{"meta":{"version":1,"warehouse":"1.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1},{"_id":"themes/yilia/source/js/script.js","path":"js/script.js","modified":1},{"_id":"themes/yilia/source/js/main.js","path":"js/main.js","modified":1},{"_id":"themes/yilia/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":1},{"_id":"themes/yilia/source/js/instagram.js","path":"js/instagram.js","modified":1},{"_id":"themes/yilia/source/img/weibo.png","path":"img/weibo.png","modified":1},{"_id":"themes/yilia/source/img/twitter.png","path":"img/twitter.png","modified":1},{"_id":"themes/yilia/source/img/teveillan.jpg","path":"img/teveillan.jpg","modified":1},{"_id":"themes/yilia/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":1},{"_id":"themes/yilia/source/img/rss.png","path":"img/rss.png","modified":1},{"_id":"themes/yilia/source/img/pinterest.png","path":"img/pinterest.png","modified":1},{"_id":"themes/yilia/source/img/pinboard.png","path":"img/pinboard.png","modified":1},{"_id":"themes/yilia/source/img/linkedin.png","path":"img/linkedin.png","modified":1},{"_id":"themes/yilia/source/img/img-loading.png","path":"img/img-loading.png","modified":1},{"_id":"themes/yilia/source/img/img-err.png","path":"img/img-err.png","modified":1},{"_id":"themes/yilia/source/img/google.png","path":"img/google.png","modified":1},{"_id":"themes/yilia/source/img/github.png","path":"img/github.png","modified":1},{"_id":"themes/yilia/source/img/facebook.png","path":"img/facebook.png","modified":1},{"_id":"themes/yilia/source/img/delicious.png","path":"img/delicious.png","modified":1},{"_id":"themes/yilia/source/img/coderwall.png","path":"img/coderwall.png","modified":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1},{"_id":"themes/yilia/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1},{"_id":"themes/yilia/source/css/style.styl","path":"css/style.styl","modified":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","path":"css/fonts/fontawesome-webfont.svgz","modified":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1},{"_id":"themes/yilia/source/assets/demo/pre_css3_demo/mhxy.png","path":"assets/demo/pre_css3_demo/mhxy.png","modified":1},{"_id":"themes/yilia/source/assets/demo/pre_css3_demo/demo.html","path":"assets/demo/pre_css3_demo/demo.html","modified":1},{"_id":"themes/yilia/source/assets/demo/pre_css3_demo/bg.jpg","path":"assets/demo/pre_css3_demo/bg.jpg","modified":1},{"_id":"themes/yilia/source/assets/demo/pre_css3_demo/Thumbs.db","path":"assets/demo/pre_css3_demo/Thumbs.db","modified":1},{"_id":"themes/yilia/source/assets/demo/my_news_reader/js/tagConfig.js","path":"assets/demo/my_news_reader/js/tagConfig.js","modified":1},{"_id":"themes/yilia/source/assets/demo/my_news_reader/js/main.js","path":"assets/demo/my_news_reader/js/main.js","modified":1},{"_id":"themes/yilia/source/assets/demo/my_news_reader/index.html","path":"assets/demo/my_news_reader/index.html","modified":1},{"_id":"themes/yilia/source/assets/demo/mediator/sgws.jpg","path":"assets/demo/mediator/sgws.jpg","modified":1},{"_id":"themes/yilia/source/assets/demo/mediator/mediator.js","path":"assets/demo/mediator/mediator.js","modified":1},{"_id":"themes/yilia/source/assets/demo/mediator/demo.html","path":"assets/demo/mediator/demo.html","modified":1},{"_id":"themes/yilia/source/assets/demo/jquery.js","path":"assets/demo/jquery.js","modified":1},{"_id":"themes/yilia/source/assets/demo/jiugongge_demo2.html","path":"assets/demo/jiugongge_demo2.html","modified":1},{"_id":"themes/yilia/source/assets/demo/jiugongge_demo.html","path":"assets/demo/jiugongge_demo.html","modified":1},{"_id":"themes/yilia/source/assets/demo/hack_demo.html","path":"assets/demo/hack_demo.html","modified":1},{"_id":"themes/yilia/source/assets/demo/gift/media/gift.ogg","path":"assets/demo/gift/media/gift.ogg","modified":1},{"_id":"themes/yilia/source/assets/demo/gift/js/zepto.min.js","path":"assets/demo/gift/js/zepto.min.js","modified":1},{"_id":"themes/yilia/source/assets/demo/gift/js/shake.js","path":"assets/demo/gift/js/shake.js","modified":1},{"_id":"themes/yilia/source/assets/demo/gift/js/index.main.js","path":"assets/demo/gift/js/index.main.js","modified":1},{"_id":"themes/yilia/source/assets/demo/gift/index.html","path":"assets/demo/gift/index.html","modified":1},{"_id":"themes/yilia/source/assets/demo/gift/img/shake.png","path":"assets/demo/gift/img/shake.png","modified":1},{"_id":"themes/yilia/source/assets/demo/gift/img/paper.jpg","path":"assets/demo/gift/img/paper.jpg","modified":1},{"_id":"themes/yilia/source/assets/demo/gift/img/paper-b.jpg","path":"assets/demo/gift/img/paper-b.jpg","modified":1},{"_id":"themes/yilia/source/assets/demo/gift/css/reset.css","path":"assets/demo/gift/css/reset.css","modified":1},{"_id":"themes/yilia/source/assets/demo/gift/css/index.scss","path":"assets/demo/gift/css/index.scss","modified":1},{"_id":"themes/yilia/source/assets/demo/gift/css/index.css","path":"assets/demo/gift/css/index.css","modified":1},{"_id":"themes/yilia/source/assets/demo/coffee_pc_demo/pro-con.js","path":"assets/demo/coffee_pc_demo/pro-con.js","modified":1},{"_id":"themes/yilia/source/assets/demo/coffee_pc_demo/pro-con.html","path":"assets/demo/coffee_pc_demo/pro-con.html","modified":1},{"_id":"themes/yilia/source/assets/demo/border1px.html","path":"assets/demo/border1px.html","modified":1},{"_id":"themes/yilia/source/assets/blogImg/xmas_ico3.jpg","path":"assets/blogImg/xmas_ico3.jpg","modified":1},{"_id":"themes/yilia/source/assets/blogImg/xmas_ico2.jpg","path":"assets/blogImg/xmas_ico2.jpg","modified":1},{"_id":"themes/yilia/source/assets/blogImg/xmas_ico1.jpg","path":"assets/blogImg/xmas_ico1.jpg","modified":1},{"_id":"themes/yilia/source/assets/blogImg/xmas_ico0.jpg","path":"assets/blogImg/xmas_ico0.jpg","modified":1},{"_id":"themes/yilia/source/assets/blogImg/web_worker2.png","path":"assets/blogImg/web_worker2.png","modified":1},{"_id":"themes/yilia/source/assets/blogImg/web_worker1.png","path":"assets/blogImg/web_worker1.png","modified":1},{"_id":"themes/yilia/source/assets/blogImg/volunteer3.jpg","path":"assets/blogImg/volunteer3.jpg","modified":1},{"_id":"themes/yilia/source/assets/blogImg/volunteer2.jpg","path":"assets/blogImg/volunteer2.jpg","modified":1},{"_id":"themes/yilia/source/assets/blogImg/volunteer1.jpg","path":"assets/blogImg/volunteer1.jpg","modified":1},{"_id":"themes/yilia/source/assets/blogImg/up1_tips.jpg","path":"assets/blogImg/up1_tips.jpg","modified":1},{"_id":"themes/yilia/source/assets/blogImg/safety_005.jpg","path":"assets/blogImg/safety_005.jpg","modified":1},{"_id":"themes/yilia/source/assets/blogImg/safety_004.jpg","path":"assets/blogImg/safety_004.jpg","modified":1},{"_id":"themes/yilia/source/assets/blogImg/safety_003.jpg","path":"assets/blogImg/safety_003.jpg","modified":1},{"_id":"themes/yilia/source/assets/blogImg/safety_002.jpg","path":"assets/blogImg/safety_002.jpg","modified":1},{"_id":"themes/yilia/source/assets/blogImg/safety_001.jpg","path":"assets/blogImg/safety_001.jpg","modified":1},{"_id":"themes/yilia/source/assets/blogImg/reduce-http.jpg","path":"assets/blogImg/reduce-http.jpg","modified":1},{"_id":"themes/yilia/source/assets/blogImg/rabbit.jpg","path":"assets/blogImg/rabbit.jpg","modified":1},{"_id":"themes/yilia/source/assets/blogImg/myReader0.jpg","path":"assets/blogImg/myReader0.jpg","modified":1},{"_id":"themes/yilia/source/assets/blogImg/mediator1.jpg","path":"assets/blogImg/mediator1.jpg","modified":1},{"_id":"themes/yilia/source/assets/blogImg/lock.jpg","path":"assets/blogImg/lock.jpg","modified":1},{"_id":"themes/yilia/source/assets/blogImg/lijiang.jpg","path":"assets/blogImg/lijiang.jpg","modified":1},{"_id":"themes/yilia/source/assets/blogImg/jiugongge9.jpg","path":"assets/blogImg/jiugongge9.jpg","modified":1},{"_id":"themes/yilia/source/assets/blogImg/jiugongge8.jpg","path":"assets/blogImg/jiugongge8.jpg","modified":1},{"_id":"themes/yilia/source/assets/blogImg/jiugongge7.jpg","path":"assets/blogImg/jiugongge7.jpg","modified":1},{"_id":"themes/yilia/source/assets/blogImg/jiugongge6.jpg","path":"assets/blogImg/jiugongge6.jpg","modified":1},{"_id":"themes/yilia/source/assets/blogImg/jiugongge5.jpg","path":"assets/blogImg/jiugongge5.jpg","modified":1},{"_id":"themes/yilia/source/assets/blogImg/jiugongge4.jpg","path":"assets/blogImg/jiugongge4.jpg","modified":1},{"_id":"themes/yilia/source/assets/blogImg/jiugongge3.jpg","path":"assets/blogImg/jiugongge3.jpg","modified":1},{"_id":"themes/yilia/source/assets/blogImg/jiugongge2.jpg","path":"assets/blogImg/jiugongge2.jpg","modified":1},{"_id":"themes/yilia/source/assets/blogImg/jiugongge10.jpg","path":"assets/blogImg/jiugongge10.jpg","modified":1},{"_id":"themes/yilia/source/assets/blogImg/jiugongge1.jpg","path":"assets/blogImg/jiugongge1.jpg","modified":1},{"_id":"themes/yilia/source/assets/blogImg/instagram2.jpg","path":"assets/blogImg/instagram2.jpg","modified":1},{"_id":"themes/yilia/source/assets/blogImg/instagram1.jpg","path":"assets/blogImg/instagram1.jpg","modified":1},{"_id":"themes/yilia/source/assets/blogImg/imp_search.jpg","path":"assets/blogImg/imp_search.jpg","modified":1},{"_id":"themes/yilia/source/assets/blogImg/immersion.png","path":"assets/blogImg/immersion.png","modified":1},{"_id":"themes/yilia/source/assets/blogImg/css_hack.jpg","path":"assets/blogImg/css_hack.jpg","modified":1},{"_id":"themes/yilia/source/assets/blogImg/css3_anm.jpg","path":"assets/blogImg/css3_anm.jpg","modified":1},{"_id":"themes/yilia/source/assets/blogImg/ckxt4.jpg","path":"assets/blogImg/ckxt4.jpg","modified":1},{"_id":"themes/yilia/source/assets/blogImg/ckxt3.jpg","path":"assets/blogImg/ckxt3.jpg","modified":1},{"_id":"themes/yilia/source/assets/blogImg/ckxt2.jpg","path":"assets/blogImg/ckxt2.jpg","modified":1},{"_id":"themes/yilia/source/assets/blogImg/ckxt1.jpg","path":"assets/blogImg/ckxt1.jpg","modified":1},{"_id":"themes/yilia/source/assets/blogImg/ckxt0.jpg","path":"assets/blogImg/ckxt0.jpg","modified":1},{"_id":"themes/yilia/source/assets/blogImg/bys3.jpg","path":"assets/blogImg/bys3.jpg","modified":1},{"_id":"themes/yilia/source/assets/blogImg/bys2.jpg","path":"assets/blogImg/bys2.jpg","modified":1},{"_id":"themes/yilia/source/assets/blogImg/bys1.jpg","path":"assets/blogImg/bys1.jpg","modified":1},{"_id":"themes/yilia/source/assets/blogImg/bys0.jpg","path":"assets/blogImg/bys0.jpg","modified":1},{"_id":"themes/yilia/source/assets/blogImg/browser-history2.jpg","path":"assets/blogImg/browser-history2.jpg","modified":1},{"_id":"themes/yilia/source/assets/blogImg/browser-history.jpg","path":"assets/blogImg/browser-history.jpg","modified":1},{"_id":"themes/yilia/source/assets/blogImg/border1px.jpg","path":"assets/blogImg/border1px.jpg","modified":1},{"_id":"themes/yilia/source/assets/blogImg/Thumbs.db","path":"assets/blogImg/Thumbs.db","modified":1}],"Cache":[{"_id":"source/CNAME","shasum":"1a5e33611ec4f58468f845e5aebdef7091181670","modified":1430918643000},{"_id":"source/_drafts/new-draft.md","shasum":"4344b98271b751a3309e73daeed6165c1b7a1adb","modified":1430918643000},{"_id":"source/_drafts/最小费用流.md","shasum":"23ac6bf4896a72d595c8ea7386f1e50287c993fe","modified":1430918643000},{"_id":"source/_posts/-转-Manacher算法-回文串处理.md","shasum":"f343218147335d3d142d0011831e5905f3d6d2bc","modified":1430918643000},{"_id":"source/_posts/BestCoder-Round-25.md","shasum":"780a850f2df87f072b2a8f739ebaf419a3de7602","modified":1430999618000},{"_id":"source/_posts/CDQ分治.md","shasum":"5eaf44af481680e224b1adccd3666c20aecbb79a","modified":1430918643000},{"_id":"source/_posts/HDU-5208-Where-is-Bob-Bestcoder-Round38-C题.md","shasum":"f41e62e767bcb22434432beae1930b9fe78a1ca4","modified":1430999629000},{"_id":"source/_posts/Mac中安装Vim7-4.md","shasum":"58e6da181890b76e2ea0e97d928e36b4407de61c","modified":1430918643000},{"_id":"source/_posts/New-Year.md","shasum":"d5c0d5342684a44a8b73ddba1b112279c38c0fc8","modified":1430918643000},{"_id":"source/_posts/最短路-SPFA.md","shasum":"db3657b8c73f4a46d21c332204f851a97a7d0d8c","modified":1430985928000},{"_id":"source/_posts/编程之美2015初赛第一场.md","shasum":"24c27b276ebecec533699e2c9020bea18a946e11","modified":1430999768000},{"_id":"source/_posts/网络流.md","shasum":"78ecab65d1769e3fd28f8d6146cc547b0bda31cb","modified":1430918643000},{"_id":"themes/yilia/source/assets/demo/gift/js/index.main.js","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1430918636000},{"_id":"themes/yilia/README.md","shasum":"7797a1ba645617512ea55c196cd0b2fc73b274b7","modified":1430918636000},{"_id":"themes/yilia/_config.yml","shasum":"5112cad4d47c9f15051c91053c60112e8a53d8ed","modified":1430999703000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","shasum":"aa0e9b5aeb97bd7424b28145be1e46f189f033c1","modified":1430918636000},{"_id":"themes/yilia/layout/_partial/archive.ejs","shasum":"d7de6421497ffaf65e4f5fe4bed71fcea51fde80","modified":1430918636000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","shasum":"a27cc79336c2cf5402ae2aa01ee3a5126fb41924","modified":1430918636000},{"_id":"themes/yilia/layout/_partial/article.ejs","shasum":"2853b2fae0874439337d6e1684c745ea66e24a67","modified":1430918636000},{"_id":"themes/yilia/layout/_partial/footer.ejs","shasum":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1430918636000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","shasum":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1430918636000},{"_id":"themes/yilia/layout/_partial/head.ejs","shasum":"2b5e0e52f456d6305681c1bfd88260b220452583","modified":1430918636000},{"_id":"themes/yilia/layout/_partial/header.ejs","shasum":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1430918636000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","shasum":"243adb2246731f29089932a5ace07d8f11db537b","modified":1430918636000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","shasum":"4fa71db4df6d5c076004c66777edd71c24aba647","modified":1430918636000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","shasum":"4fe41872f010c32fe34da0fa176398712baa03a2","modified":1430918636000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","shasum":"c0c988334e857a77ba455a056dfa21809e7e76a5","modified":1430918636000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","shasum":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1430918636000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","shasum":"1939c94f24ba0f25dd728eef559509ba8647b546","modified":1430918636000},{"_id":"themes/yilia/layout/_partial/post/share.ejs","shasum":"da39b4ba0c0ce4e1932fd45c5aee10e8aca41f28","modified":1430918636000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","shasum":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1430918636000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","shasum":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1430918636000},{"_id":"themes/yilia/layout/archive.ejs","shasum":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1430918636000},{"_id":"themes/yilia/layout/category.ejs","shasum":"765426a9c8236828dc34759e604cc2c52292835a","modified":1430918636000},{"_id":"themes/yilia/layout/index.ejs","shasum":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1430918636000},{"_id":"themes/yilia/layout/layout.ejs","shasum":"3bc1bba131445a07be002f490c70cd242bf8efce","modified":1430918636000},{"_id":"themes/yilia/layout/page.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1430918636000},{"_id":"themes/yilia/layout/post.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1430918636000},{"_id":"themes/yilia/layout/tag.ejs","shasum":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1430918636000},{"_id":"themes/yilia/package.json","shasum":"00357ef6f24eb049074da81809e98f973f528cca","modified":1430918636000},{"_id":"themes/yilia/scripts/fancybox.js","shasum":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/border1px.jpg","shasum":"0420ec461cca4d562d28ecb52c673e20ed5b5efd","modified":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/browser-history.jpg","shasum":"4807eae10a650298165de74cabd663db4fdc80a9","modified":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/browser-history2.jpg","shasum":"ba8e28e5a92f5ef0b0dd7680855c86a6d08ed89a","modified":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/bys0.jpg","shasum":"13189f11c0a47bebe902f847b25498121905ea06","modified":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/imp_search.jpg","shasum":"885b254486a8d2baf15577d7943122306945f972","modified":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/css_hack.jpg","shasum":"81ce16f00b892f9c41d454b49f486fe1a499b574","modified":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/instagram1.jpg","shasum":"84cbf6fe4c2fe8b6c856418cd2975fd598a65281","modified":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/immersion.png","shasum":"8f667f84dd26d9d5677532c39c9eb69ccdf4a278","modified":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/instagram2.jpg","shasum":"a4cb929961c12b111666ae1ea1230d6482cb56bc","modified":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/jiugongge1.jpg","shasum":"9223ad15733d4071b2559ef6ec6ebbcbeee9e4ee","modified":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/jiugongge10.jpg","shasum":"d1f6330f64b8577aeed73f904a43768c233c3cd9","modified":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/jiugongge2.jpg","shasum":"1fd6e7947cfc6ab7f751c2442aa4bc1306bd6499","modified":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/jiugongge3.jpg","shasum":"e2537012c5c7df607f1974cc798b413b8486e18e","modified":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/jiugongge4.jpg","shasum":"1bbcea320ded17f83b876f7b64d26451b0a63915","modified":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/jiugongge5.jpg","shasum":"4a13f660a004a8b36f5e04dfa6337db1573fe3e5","modified":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/jiugongge6.jpg","shasum":"5b77909b5d28b6bbe2ce8117599effb5f96ddf8d","modified":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/jiugongge7.jpg","shasum":"6eab8000e513dbd5615b9eea16fe839f8c63af7a","modified":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/jiugongge8.jpg","shasum":"e68e17cc2893f73f363e9135c3be1a8764304faf","modified":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/safety_001.jpg","shasum":"2c46d121b9d48dec3887d1a6152b5be8f36ffa5a","modified":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/safety_002.jpg","shasum":"8bae8fcf815e3d2e981110da29cba056d09b1624","modified":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/reduce-http.jpg","shasum":"eef2280cbfa634052055dbe392b17255c1100c33","modified":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/safety_005.jpg","shasum":"9805b83cd5d58a8c7e44436f137342fc1b4907d5","modified":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/up1_tips.jpg","shasum":"5aa22d5040255d2894c2d82d9c9795a2e5220cb8","modified":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/volunteer2.jpg","shasum":"f0d7c69f093ac586e1392dbd6cd9d1db3bf65bbe","modified":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/web_worker1.png","shasum":"edadfa118fc8ccc234f4a5366ad091792d5bc1ae","modified":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/volunteer3.jpg","shasum":"747348c19264c6bd3845fa422fbc06b8ee7a44b0","modified":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/web_worker2.png","shasum":"2fe31641f091009b5c44dab5bca3630d1eeece0c","modified":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/xmas_ico1.jpg","shasum":"ce1d328d7dee1f306b7679479508c9b7e7c606f6","modified":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/xmas_ico2.jpg","shasum":"5b1b9cd97308aeddcb5d5e1c78b0c5ab7a4fe270","modified":1430918636000},{"_id":"themes/yilia/source/assets/demo/coffee_pc_demo/pro-con.html","shasum":"970a160b047ad1b631becb9415f9dad0ebc3ed07","modified":1430918636000},{"_id":"themes/yilia/source/assets/demo/border1px.html","shasum":"c44bd1a627888690e33249593c8010127167886e","modified":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/xmas_ico3.jpg","shasum":"cb1a1bdaa0b2ebf6379a8877c6911a239348b088","modified":1430918636000},{"_id":"themes/yilia/source/assets/demo/coffee_pc_demo/pro-con.js","shasum":"813f97c7be11713f5ef26a9a8c8e634f171d82d3","modified":1430918636000},{"_id":"themes/yilia/source/assets/demo/gift/css/index.css","shasum":"3424b51ebf18526ab96e8c6a049ebcea63066558","modified":1430918636000},{"_id":"themes/yilia/source/assets/demo/gift/css/index.scss","shasum":"1ae9bcd33cd623b1ad38875d8defab508b36c3ae","modified":1430918636000},{"_id":"themes/yilia/source/assets/demo/gift/css/reset.css","shasum":"a82902ac501de401d95c6f09e4b644a4713e9213","modified":1430918636000},{"_id":"themes/yilia/source/assets/demo/gift/img/paper-b.jpg","shasum":"97ae11a83c12b2af13c01d54b666aca7a7c47646","modified":1430918636000},{"_id":"themes/yilia/source/assets/demo/gift/img/paper.jpg","shasum":"234944832a4d1774c0780ef4835e869494868c31","modified":1430918636000},{"_id":"themes/yilia/source/assets/demo/gift/img/shake.png","shasum":"777f0ec90a458ad4e4364a7d84f5f6d57db0eb92","modified":1430918636000},{"_id":"themes/yilia/source/assets/demo/gift/index.html","shasum":"29e437f9777ece143df56e7c465a80fd08d4879e","modified":1430918636000},{"_id":"themes/yilia/source/assets/demo/gift/js/shake.js","shasum":"14ab022bdfc801dad5a32799c0f916f56f06cc42","modified":1430918636000},{"_id":"themes/yilia/source/assets/demo/gift/js/zepto.min.js","shasum":"cbee54076e1f1dce5f418d62e13cd12500a6ff2f","modified":1430918636000},{"_id":"themes/yilia/source/assets/demo/hack_demo.html","shasum":"d362d5b3e4796e75de1fc7b88e39e3c1fd168d53","modified":1430918636000},{"_id":"themes/yilia/source/assets/demo/jiugongge_demo.html","shasum":"35c32e107f155407a3599e23a446fb01715f94ee","modified":1430918636000},{"_id":"themes/yilia/source/assets/demo/jiugongge_demo2.html","shasum":"aaf5b2d61f35ce72e9f816ffd6f1f8756fe438ce","modified":1430918636000},{"_id":"themes/yilia/source/assets/demo/mediator/demo.html","shasum":"ae0ec0b470f201a4a285ddeb47ccc8745e23e904","modified":1430918636000},{"_id":"themes/yilia/source/assets/demo/mediator/mediator.js","shasum":"4ec191b925d4f69add48b39f5ba86febb168ce4f","modified":1430918636000},{"_id":"themes/yilia/source/assets/demo/my_news_reader/index.html","shasum":"df744d470b79ea002689e81aecf89a35060f2e94","modified":1430918636000},{"_id":"themes/yilia/source/assets/demo/mediator/sgws.jpg","shasum":"e7f9e277bfae87f2570d76b3e50ed836b3d6c091","modified":1430918636000},{"_id":"themes/yilia/source/assets/demo/my_news_reader/js/main.js","shasum":"eea0ed3018a8bf637d2c1a933e1f8a51830b5f20","modified":1430918636000},{"_id":"themes/yilia/source/assets/demo/my_news_reader/js/tagConfig.js","shasum":"27304600ece63a626c348635f48b3df1224976f8","modified":1430918636000},{"_id":"themes/yilia/source/assets/demo/pre_css3_demo/demo.html","shasum":"b43f3e431fb6e2a4c8560971f0959bf670bfab9b","modified":1430918636000},{"_id":"themes/yilia/source/css/_extend.styl","shasum":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1430918636000},{"_id":"themes/yilia/source/css/_partial/archive.styl","shasum":"81624b9d5a510cc5f47f10bd1e6a0f8ea218844f","modified":1430918636000},{"_id":"themes/yilia/source/css/_partial/article.styl","shasum":"8f1a6ddd8f7976b5bfbf99150619332d0f592128","modified":1430918636000},{"_id":"themes/yilia/source/css/_partial/footer.styl","shasum":"16fa9293ad5060e5de45272a3189ac25c0332a13","modified":1430918636000},{"_id":"themes/yilia/source/css/_partial/header.styl","shasum":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1430918636000},{"_id":"themes/yilia/source/css/_partial/highlight.styl","shasum":"7d23a484c93bd8244d071164509907b1334ae262","modified":1430918636000},{"_id":"themes/yilia/source/css/_partial/instagram.styl","shasum":"050ce5a0e3987be270ffb1a4759ce4ac8b721a13","modified":1430918636000},{"_id":"themes/yilia/source/css/_partial/main.styl","shasum":"509edc709d2a0b7bae049c47e3a49ac77d98d180","modified":1430918636000},{"_id":"themes/yilia/source/css/_partial/mobile.styl","shasum":"3a1926c78a17519150063e155ac32d5a6545eb99","modified":1430918636000},{"_id":"themes/yilia/source/css/_partial/page.styl","shasum":"0b5b20b33142dee8509cfebe7dbb1bd89150bad8","modified":1430918636000},{"_id":"themes/yilia/source/css/_partial/share.styl","shasum":"6ac15a6815b1bbdbea89d3fe933c2821aa80b926","modified":1430918636000},{"_id":"themes/yilia/source/css/_partial/tagcloud.styl","shasum":"9052fa9155d132b667c7ce630366b795da034ae1","modified":1430918636000},{"_id":"themes/yilia/source/css/_util/grid.styl","shasum":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1430918636000},{"_id":"themes/yilia/source/css/_util/mixin.styl","shasum":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1430918636000},{"_id":"themes/yilia/source/css/_variables.styl","shasum":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1430918636000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","shasum":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6","modified":1430918636000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","shasum":"4bfdd33ed702e32ae01399fcc2652377f78e7626","modified":1430918636000},{"_id":"themes/yilia/source/css/style.styl","shasum":"c0a43c6fa1167f231e9736aec596b509a2c057ec","modified":1430918636000},{"_id":"themes/yilia/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1430918636000},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1430918636000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","shasum":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832","modified":1430918636000},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1430918636000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","shasum":"1480b8101b02da9bc4c60341b5e185e63e585064","modified":1430918636000},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1430918636000},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1430918636000},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1430918636000},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1430918636000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1430918636000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","shasum":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1430918636000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","shasum":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1430918636000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1430918636000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","shasum":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1430918636000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","shasum":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1430918636000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","shasum":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1430918636000},{"_id":"themes/yilia/source/img/coderwall.png","shasum":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1430918636000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","shasum":"53360764b429c212f424399384417ccc233bb3be","modified":1430918636000},{"_id":"themes/yilia/source/img/delicious.png","shasum":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1430918636000},{"_id":"themes/yilia/source/img/facebook.png","shasum":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1430918636000},{"_id":"themes/yilia/source/img/github.png","shasum":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1430918636000},{"_id":"themes/yilia/source/img/google.png","shasum":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1430918636000},{"_id":"themes/yilia/source/img/img-err.png","shasum":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1430918636000},{"_id":"themes/yilia/source/img/img-loading.png","shasum":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1430918636000},{"_id":"themes/yilia/source/img/linkedin.png","shasum":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1430918636000},{"_id":"themes/yilia/source/img/pinboard.png","shasum":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1430918636000},{"_id":"themes/yilia/source/img/pinterest.png","shasum":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1430918636000},{"_id":"themes/yilia/source/img/rss.png","shasum":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1430918636000},{"_id":"themes/yilia/source/img/stackoverflow.png","shasum":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1430918636000},{"_id":"themes/yilia/source/img/teveillan.jpg","shasum":"6ce6420f56a865c38dcf056610535ca859d183b6","modified":1430918636000},{"_id":"themes/yilia/source/img/twitter.png","shasum":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1430918636000},{"_id":"themes/yilia/source/img/weibo.png","shasum":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1430918636000},{"_id":"themes/yilia/source/js/instagram.js","shasum":"4732ad371044cbca35a4b85a29f8744335250f82","modified":1430918636000},{"_id":"themes/yilia/source/js/jquery.lazyload.js","shasum":"c11a2e7b330d16d06feabd0a8477099adf9d6799","modified":1430918636000},{"_id":"themes/yilia/source/js/main.js","shasum":"6132d754c3c528d0a68222258bcfe6d9010fa924","modified":1430918636000},{"_id":"themes/yilia/source/js/script.js","shasum":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/ckxt3.jpg","shasum":"5cc1b96e85d3d2a8364232fbf85795e4ababe5a6","modified":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/css3_anm.jpg","shasum":"ed6904c8b7855b00cc88bc57494ad927421e5798","modified":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/jiugongge9.jpg","shasum":"ee834968caa2e1a0ed85b0bde1416617117714ee","modified":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/mediator1.jpg","shasum":"f896c5e53f28463fc05c84d4a576842704a578db","modified":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/rabbit.jpg","shasum":"ee9595de19d67776c9e423acd5b032ade9be93ef","modified":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/volunteer1.jpg","shasum":"81ff551fa2b5004f59b03de5e052c64f142f5524","modified":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/xmas_ico0.jpg","shasum":"17dcd786c61d1c69a603a5c7a3ca003ca36a102d","modified":1430918636000},{"_id":"themes/yilia/source/assets/demo/jquery.js","shasum":"f3a55f44fb81cf8ee908a3872841f70d6548f8c1","modified":1430918636000},{"_id":"themes/yilia/source/assets/demo/pre_css3_demo/Thumbs.db","shasum":"aaf7beb69f639bf113e1d1783237339f563d54c5","modified":1430918636000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","shasum":"23a6f5b2ff76de9cb3cf1e886194c67647fd868a","modified":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/ckxt0.jpg","shasum":"980ebd08b10b0f3b9bf2603dc38d45842cc50d15","modified":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/ckxt1.jpg","shasum":"a184ba933c5757d9dc200b3c056759387242d1cf","modified":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/ckxt2.jpg","shasum":"f52cfe91b2918bc7d48bcf8dd10f68ea780d29c0","modified":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/ckxt4.jpg","shasum":"ca93f86e826eaaabe375a5b9d0bf4ad79762f558","modified":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/lock.jpg","shasum":"4d97b8d2b0ffecb0c9fef8daa0ff4b0f299cad2a","modified":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/safety_004.jpg","shasum":"21e015d9445aa594163d5c5ad2cdfbd2d40f234f","modified":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/Thumbs.db","shasum":"4f2b7ddfe596e0f853072c58bba036d847667fae","modified":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/myReader0.jpg","shasum":"f1cdd882e84071beee90615e33a98ee84681477b","modified":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/safety_003.jpg","shasum":"0e611b4b46b6cd60d1a19302cd9035a1a6fb79f6","modified":1430918636000},{"_id":"themes/yilia/source/assets/demo/pre_css3_demo/bg.jpg","shasum":"e6ffd5910deb7d881f6ed47cfd22d722b4f46575","modified":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/lijiang.jpg","shasum":"e3d95a8e89a5eef018869daa41b9320441a562e6","modified":1430918636000},{"_id":"themes/yilia/source/assets/demo/pre_css3_demo/mhxy.png","shasum":"8e01ae2fa02d2e5fb0d309db174d141140ee02a6","modified":1430918636000},{"_id":"themes/yilia/source/assets/demo/gift/media/gift.ogg","shasum":"326274afd016f6d4ae7a4b866bf7b286a93bdfe8","modified":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/bys2.jpg","shasum":"1f4b1ba179f9f6e85a803e84539d1bd81138183e","modified":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/bys3.jpg","shasum":"d0edc2212081b8b6f781dac949965b642d428d89","modified":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/bys1.jpg","shasum":"9806346ffb672dd870133f7b5813ff98153dfb3b","modified":1430918636000}],"Category":[{"name":"Algorithm","_id":"ci9e4cts80001p176ca7vk0qx"},{"name":"红名之路","_id":"ci9e4ctt60004p176cg9v5a1m"},{"name":"随笔","_id":"ci9e4ctu2000bp176fkdjld7b"},{"name":"Tech","_id":"ci9e4ctu5000ep176wpubwvvz"}],"Data":[],"Page":[],"Post":[{"title":"网络流","date":"2015-01-04T05:01:59.000Z","description":null,"_content":"网络流，也被称为最大流。\n\n模型也非常简单，就是一个管道系统，在有源点，汇点，和一堆有流速限制的管道连接的情况下，问能从源点到汇点传输流量的最大流速是多少。如下图所示。\n\n![Alt text](http://7tszmu.com1.z0.glb.clouddn.com/网络流.png)\n<!-- more -->\n假定s为源点，t为汇点，中间各箭头为管道，各管道的流速限制均为1。\n求最大流的话，很明显，最大流为2。有两条流量：\n*  s -> 1 -> 3 -> t，流量为1\n*  s -> 2 -> 4 -> t，流量为1\n\n现在是因为图比较简单，我们能一眼看出来。我们自然喜欢程序跑出来的结果是这样。\n\n在程序过程中，自然就是找到一条流量处理一条流量。\n如果先找到 s -> 1 -> 3 -> t，然后找到 s -> 2 -> 4 -> t，自然皆大欢喜。\n但是如果程序的第一条直接找到 s -> 1 -> 4 -> t 了呢？这样的最终结果就只有一条流量。\n\n为了解决这个问题，有人提出了一种叫回退边（后悔边）的概念。** 这个也是本算法的精髓所在。 **\n\n> 后悔边：如果我们根据原图建了一条从u到v，流量为f的边 (u,v)=f。 同时，我们也需要建一条从v到u，流量为0的边 (v,u)=0，这条边我们就称为后悔边。(u,v) 和 (v,u)互为反向边。 \n\n同时，在程序进行过程中，如果我们如果从残余网络中找到一条从s到v的流量为f，在更新的过程中，我们首先要把最终答案加上c，然后我们不仅要把在该流量上的各边的剩余流量减去f，同时还要把流量上各条边的反向边的流量加上f。\n\n这样做有什么好处呢?\n\n还是以上图为例，如果我们先找到了 s -> 1 -> 3 -> t，流量为1。我们首先在最终答案中加1，然后在更新的过程中不仅要把 (s,1)、(1,4)、(4,t) 这几条边的剩余流量减1， 还要把 (1,s)、(4,1)、(t,4) 的剩余流量加1。 \n\n此时的残余网络为：\n* (s,1) = 0, (1,s) = 1\n* (s,2) = 1, (2,s) = 0\n* (1,3) = 1, (3,1) = 0\n* (1,4) = 0, (4,1) = 1\n* (2,4) = 1, (4,2) = 0\n* (3,t ) = 1, (t,3 ) = 0\n* (4,t ) = 0, (t,4 ) = 1\n\n然后我们从残余网络中找流量，**发现此时能找到一条 s -> 2 -> 4 -> 1 -> 3 -> t 的流量了！**然后我们还按之前的方式更新。再找的时候找不到新的流量了，算法结束。此时的结果是和我们之前用肉眼观察的结果是一样的。\n\n这就是后悔边的神奇之处。\n\n**后悔边，顾名思义，就是给了一条边后悔的权利。在算法过程中，原图的边和后悔边是没有区别的，所以找流量的时候也没有任何区别。**\n\n这条边存在的意义是，还拿刚刚那条 s -> 2 -> 4 -> 1 -> 3这条流量来说。里面存在一条后悔边(4,1)，它的意义是：\n*   ** 之前已经更新过的流量中，有一条从4到t的流量`4 -> t`，这条流量我可以用到。**\n*   ** 目前的残余网络中，还存在一条从1到s得流量`1 -> 3 -> t`，这条流量可以替换你之前更新过的流量 `1 -> 4 -> t`。**\n*   ** 为什么不能你用`1 -> 3 -> t`，我用`4 -> t`呢。这样的得到的总流量多一些，我们来交换吧。**\n*   ** 你把你的流量退回去，用我给你的。我用你之前的。 至于中间的(4,1)，退回去我也用不上，大不了都不用了吧。**\n\n这样下来，最佳方案就出现了。\n\n可以发现，在有后悔边存在的情况下，先找哪条流量后找哪条流量就已经不重要了。反正都是可以做修改的。这样的话，只要考虑如何高效地找流量就好了。这个当然不能随便找，有环的话肯定要进入死循环。\n\n在**Dinic**算法中，我们采用了分层图的形式。分层用BFS来实现。\n*   首先，将源点的level设为0，并将源点加入队列。\n*   从队列中取出一个点u，遍历以它为起点还有流量的边，找到点v。如果点v还没被加入队列过，将v的level设为level[u]+1，并将v加入队列。\n*   回到步骤2，直到队列为空。\n\n然后我们规定，level为`a`的点只能向level为`a+1`的点找流量,这样就能很有效地避免环的出现。\n```c++\nconst int N = 1e5 + 100;\nconst int M = 1e7 + 100;\nconst int INF = 1e9;\nstruct Edge{\n    int to,next;\n    int c;\n}edge[M];\nint head[N], level[N], que[N], ip;\nvoid init() {\n    memset(head, -1, sizeof(head));\n    ip = 0;\n}\nbool makelevel(int s,int t) { //将图分层\n    memset(level,0,sizeof(level));\n    int num=0;\n    que[num++]=s;\n    level[s]=1;\n    for(int i=0;i<num;i++) {\n        int top=que[i];\n        if(top==t)  return 1; //找到t了，后面再找level肯定比t大\n        for(int k=head[top];k!=-1;k=edge[k].next) {\n            if(!level[edge[k].to]&&edge[k].c>0) {\n                que[num++]=edge[k].to;\n                level[edge[k].to]=level[top]+1;\n            }\n        }\n    }\n    return 0;\n}\nint dfs(int now,int maxf,int t) { //从残余网络中找流量\n    if(now==t)  return maxf;\n    int ret=0;\n    for(int k=head[now];k!=-1;k=edge[k].next) {\n        if(edge[k].c>0&&level[edge[k].to]==(level[now]+1)) {\n            int c=dfs(edge[k].to,min(maxf-ret,edge[k].c),t);\n            edge[k].c-=c;\n            edge[k^1].c+=c;\n            ret+=c;\n            if(ret==maxf)   return  ret;\n        }\n    }\n    --level[now]; //一个优化，说明往level[now]+1找流量已经找不到了。自己就降一个level。\n    return ret;\n}\nint dinic(int s,int t) {\n    int  ans=0;\n    while(makelevel(s,t))   ans+=dfs(s,INF,t);\n    return ans;\n}\nvoid add(int u,int v,int c,int f) {//有向边f为0 ,否则为 c\n    edge[ip].to=v;edge[ip].c=c;edge[ip].next=head[u];head[u]=ip++;\n    edge[ip].to=u;edge[ip].c=f;edge[ip].next=head[v];head[v]=ip++;\n}\n```\n","source":"_posts/网络流.md","raw":"title: 网络流\ncategories: Algorithm\ndate: 2015-01-04 13:01:59\ntags:\ndescription:\n---\n网络流，也被称为最大流。\n\n模型也非常简单，就是一个管道系统，在有源点，汇点，和一堆有流速限制的管道连接的情况下，问能从源点到汇点传输流量的最大流速是多少。如下图所示。\n\n![Alt text](http://7tszmu.com1.z0.glb.clouddn.com/网络流.png)\n<!-- more -->\n假定s为源点，t为汇点，中间各箭头为管道，各管道的流速限制均为1。\n求最大流的话，很明显，最大流为2。有两条流量：\n*  s -> 1 -> 3 -> t，流量为1\n*  s -> 2 -> 4 -> t，流量为1\n\n现在是因为图比较简单，我们能一眼看出来。我们自然喜欢程序跑出来的结果是这样。\n\n在程序过程中，自然就是找到一条流量处理一条流量。\n如果先找到 s -> 1 -> 3 -> t，然后找到 s -> 2 -> 4 -> t，自然皆大欢喜。\n但是如果程序的第一条直接找到 s -> 1 -> 4 -> t 了呢？这样的最终结果就只有一条流量。\n\n为了解决这个问题，有人提出了一种叫回退边（后悔边）的概念。** 这个也是本算法的精髓所在。 **\n\n> 后悔边：如果我们根据原图建了一条从u到v，流量为f的边 (u,v)=f。 同时，我们也需要建一条从v到u，流量为0的边 (v,u)=0，这条边我们就称为后悔边。(u,v) 和 (v,u)互为反向边。 \n\n同时，在程序进行过程中，如果我们如果从残余网络中找到一条从s到v的流量为f，在更新的过程中，我们首先要把最终答案加上c，然后我们不仅要把在该流量上的各边的剩余流量减去f，同时还要把流量上各条边的反向边的流量加上f。\n\n这样做有什么好处呢?\n\n还是以上图为例，如果我们先找到了 s -> 1 -> 3 -> t，流量为1。我们首先在最终答案中加1，然后在更新的过程中不仅要把 (s,1)、(1,4)、(4,t) 这几条边的剩余流量减1， 还要把 (1,s)、(4,1)、(t,4) 的剩余流量加1。 \n\n此时的残余网络为：\n* (s,1) = 0, (1,s) = 1\n* (s,2) = 1, (2,s) = 0\n* (1,3) = 1, (3,1) = 0\n* (1,4) = 0, (4,1) = 1\n* (2,4) = 1, (4,2) = 0\n* (3,t ) = 1, (t,3 ) = 0\n* (4,t ) = 0, (t,4 ) = 1\n\n然后我们从残余网络中找流量，**发现此时能找到一条 s -> 2 -> 4 -> 1 -> 3 -> t 的流量了！**然后我们还按之前的方式更新。再找的时候找不到新的流量了，算法结束。此时的结果是和我们之前用肉眼观察的结果是一样的。\n\n这就是后悔边的神奇之处。\n\n**后悔边，顾名思义，就是给了一条边后悔的权利。在算法过程中，原图的边和后悔边是没有区别的，所以找流量的时候也没有任何区别。**\n\n这条边存在的意义是，还拿刚刚那条 s -> 2 -> 4 -> 1 -> 3这条流量来说。里面存在一条后悔边(4,1)，它的意义是：\n*   ** 之前已经更新过的流量中，有一条从4到t的流量`4 -> t`，这条流量我可以用到。**\n*   ** 目前的残余网络中，还存在一条从1到s得流量`1 -> 3 -> t`，这条流量可以替换你之前更新过的流量 `1 -> 4 -> t`。**\n*   ** 为什么不能你用`1 -> 3 -> t`，我用`4 -> t`呢。这样的得到的总流量多一些，我们来交换吧。**\n*   ** 你把你的流量退回去，用我给你的。我用你之前的。 至于中间的(4,1)，退回去我也用不上，大不了都不用了吧。**\n\n这样下来，最佳方案就出现了。\n\n可以发现，在有后悔边存在的情况下，先找哪条流量后找哪条流量就已经不重要了。反正都是可以做修改的。这样的话，只要考虑如何高效地找流量就好了。这个当然不能随便找，有环的话肯定要进入死循环。\n\n在**Dinic**算法中，我们采用了分层图的形式。分层用BFS来实现。\n*   首先，将源点的level设为0，并将源点加入队列。\n*   从队列中取出一个点u，遍历以它为起点还有流量的边，找到点v。如果点v还没被加入队列过，将v的level设为level[u]+1，并将v加入队列。\n*   回到步骤2，直到队列为空。\n\n然后我们规定，level为`a`的点只能向level为`a+1`的点找流量,这样就能很有效地避免环的出现。\n```c++\nconst int N = 1e5 + 100;\nconst int M = 1e7 + 100;\nconst int INF = 1e9;\nstruct Edge{\n    int to,next;\n    int c;\n}edge[M];\nint head[N], level[N], que[N], ip;\nvoid init() {\n    memset(head, -1, sizeof(head));\n    ip = 0;\n}\nbool makelevel(int s,int t) { //将图分层\n    memset(level,0,sizeof(level));\n    int num=0;\n    que[num++]=s;\n    level[s]=1;\n    for(int i=0;i<num;i++) {\n        int top=que[i];\n        if(top==t)  return 1; //找到t了，后面再找level肯定比t大\n        for(int k=head[top];k!=-1;k=edge[k].next) {\n            if(!level[edge[k].to]&&edge[k].c>0) {\n                que[num++]=edge[k].to;\n                level[edge[k].to]=level[top]+1;\n            }\n        }\n    }\n    return 0;\n}\nint dfs(int now,int maxf,int t) { //从残余网络中找流量\n    if(now==t)  return maxf;\n    int ret=0;\n    for(int k=head[now];k!=-1;k=edge[k].next) {\n        if(edge[k].c>0&&level[edge[k].to]==(level[now]+1)) {\n            int c=dfs(edge[k].to,min(maxf-ret,edge[k].c),t);\n            edge[k].c-=c;\n            edge[k^1].c+=c;\n            ret+=c;\n            if(ret==maxf)   return  ret;\n        }\n    }\n    --level[now]; //一个优化，说明往level[now]+1找流量已经找不到了。自己就降一个level。\n    return ret;\n}\nint dinic(int s,int t) {\n    int  ans=0;\n    while(makelevel(s,t))   ans+=dfs(s,INF,t);\n    return ans;\n}\nvoid add(int u,int v,int c,int f) {//有向边f为0 ,否则为 c\n    edge[ip].to=v;edge[ip].c=c;edge[ip].next=head[u];head[u]=ip++;\n    edge[ip].to=u;edge[ip].c=f;edge[ip].next=head[v];head[v]=ip++;\n}\n```\n","slug":"网络流","published":1,"updated":"2015-05-06T13:24:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ci9e4cts60000p176ul1hccq8"},{"title":"编程之美2015初赛第一场","date":"2015-05-07T11:51:01.000Z","description":null,"_content":"\n## Hihocoder 1156 彩色的树\n\n题目链接: http://hihocoder.com/problemset/problem/1156\n\n在每个更新操作的过程中，假设点P最初的颜色为color1，更新后的颜色为color2。\n我们记与点P相邻，颜色为color1的点为num1, 颜色为color2的点为num2。\n则 ans -= num1 - 1, ans += num2 + 1。\n\n难点主要在于统计nun1, num2。直接暴力肯定是要TLE的，这里有个技巧。\n\n既然是在树中，我们用map存点P的子节点各种颜色的点有多少个，将父节点单独考虑。\n查询的过程中:\n* `num1 = map[P][color1] + (color[ fa[P] ] == color1)`\n* `num2 = map[P][color2] + (color[ fa[p] ] == color2)`\n\n更新的时候只用将父节点的子节点的color1--, color2++。\n在O(log)级的复杂度内就能完成更新查询操作。\n<!-- more -->\n\n```c++\n#include <cstdio>\n#include <cstring>\n#include <vector>\n#include <map>\n#include <cstdlib>\n#include <iostream>\n\nusing namespace std;\n\n#define FOR(i,l,r)  for(int i=(l); i<=(r); ++i)\n#define REP(i,r)    for(int i=0; i<(r); ++i)\n#define DWN(i,r,l)  for(int i=(r);i>=(l);--i)\n\n#define pb push_back\n\nconst int N = 1e5 + 10;\nvector<int>head[N];\nint color[N], fa[N];\n\nmap<int, int>m[N];\n\nvoid dfs(int cur) { //构建树形结构\n    for(int to: head[cur]) {\n        if(to == fa[cur])   continue;\n        fa[to] = cur;\n        m[cur][0] ++;\n        dfs(to);\n    }\n}\n\nvoid update(int cur, int tmp_color, int &ans) { //更新点的同时同时更新ans\n    int tmp = 0;\n    tmp += m[cur][ color[cur] ];\n    if(color[ fa[cur] ] == color[cur]) ++tmp;\n    ans += tmp - 1;\n\n    tmp = 0;\n    tmp += m[cur][tmp_color];\n    if(color[ fa[cur] ] == tmp_color) ++tmp;\n    ans -= tmp - 1;\n\n    --m[ fa[cur] ][ color[cur] ];\n    ++m[ fa[cur] ][ tmp_color ];\n    color[cur] = tmp_color;\n}\n\nint main() {\n    int casnum, casid = 0, n, q, x, y, z;\n    cin >> casnum;\n    while(casnum--) {\n        memset(color, 0, sizeof(color));\n        FOR(i, 1, n)    head[i].clear(), m[i].clear();\n        cin >> n;\n\n        REP(i, n-1) {\n            scanf(\"%d%d\", &x, &y);\n            head[x].pb(y);\n            head[y].pb(x);\n        }\n        fa[1] = 0;\n        dfs(1);\n\n        printf(\"Case #%d:\\n\", ++ casid);\n\n        int ans = 1;\n        color[0] = -1;\n        cin >> q;\n        while(q--) {\n            scanf(\"%d\", &x);\n            if(x == 1)  printf(\"%d\\n\", ans);\n            else {\n                scanf(\"%d%d\", &y, &z);\n                update(y, z, ans);\n            }\n        }\n    }\n    return 0;\n}\n```\n\n\n\n## Hihocoder 1157 建造金字塔\n\n题目链接： http://hihocoder.com/problemset/problem/1157\n\nDP。\n输入的时候时候一个三角形用顶点坐标`(x, y)`来表示，我们转化成左右端顶点的横坐标来表示一个三角形`(l,r) = (x-y,x+y)`。然后按`l`进行排序。\n我们用`dp[i][j]`表示第i个点，且前从前i个三角形选择的三角形中最右端为j的最大获益。\n假设第i个点的左右端点为`(l,r)`，利润为v1，成本为v2，分三种情况讨论：\n1.  `j <= l：dp[i][r] = max(dp[i][r], dp[i-1][j] + v1 - v2)`\n2.  `j >= r：dp[i][j] = max(dp[i][j], dp[i-1][j] + v1)`\n3.  `j > l && j < r：dp[i][r] = max(dp[i][r], dp[i-1][j] + v1 - v2 + v3)`。v3为与之前的重叠面积\n\n```c++\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n#include <vector>\n#include <cstdlib>\n#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\n#define FOR(i,l,r)  for(int i=(l); i<=(r); ++i)\n#define REP(i,r)    for(int i=0; i<(r); ++i)\n#define DWN(i,r,l)  for(int i=(r);i>=(l);--i)\n#define pb push_back\n\ndouble dp[2][3010]; //滚动数组，第一维只要2就够了\n\nstruct Trangle {\n    int l, r;\n    double v1, v2;\n    bool operator <(const Trangle &other) const {\n        if(l != other.l)    return l < other.l;\n        return r < other.r;\n    }\n};\n\nint main() {\n    int casnum, casid = 0, n, x, y, z;\n    cin >> casnum;\n    while(casnum--) {\n        double ans = 0;\n        cin >> n;\n        vector<Trangle>vec(n);\n        REP(i, n) {\n            scanf(\"%d%d%d\", &x, &y, &z);\n            vec[i].l = x - y + 1000;//因为x-y有可能小于0,注意不要超出边界 \n            vec[i].r = x + y + 1000;\n            vec[i].v1 = z;\n            vec[i].v2 = y * y;\n        }\n        sort(vec.begin(), vec.end()); //按l排序\n\n        int cur = 1, pre = 0;\n        REP(i, 2)\n            REP(j, 3001)\n                dp[i][j] = -1e18;\n\n        dp[cur][0] = 0;\n\n        for(auto t: vec) {\n            cur ^= 1, pre ^= 1;\n            REP(i, 3001)\n                dp[cur][i] = -1e18;\n            int l = t.l, r = t.r;\n            REP(i, 3001) {//分三种情况讨论\n                if(i >= r)  dp[cur][i] = max(dp[cur][i], dp[pre][i] + t.v1);\n                else if(i <= l) dp[cur][r] = max(dp[cur][r], dp[pre][i] + t.v1 - t.v2);\n                else dp[cur][r] = max(dp[cur][r], dp[pre][i] + t.v1 - pow((t.r - t.l) / 2.0, 2.0) + pow((i - t.l) / 2.0, 2.0));\n\n                dp[cur][i] = max(dp[cur][i], dp[pre][i]);\n                ans = max(ans, dp[cur][i]);\n            }\n        }\n        printf(\"Case #%d: %.2lf\\n\", ++casid, ans);\n    }\n    return 0;\n}\n```\n\n##Hihocoder 1158 质数相关\n\n题目链接：http://hihocoder.com/problemset/problem/1158\n\n二分匹配求最大独立集。\n可证：`如果(a,b)质数相关，(b,c)质数相关，则（a,c）质数无关`\n\n因此没有奇数环，可划分为二分图。\n求出二分匹配，最大独立集 = n - 最大匹配。\n\n```c++\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <vector>\n#include <map>\n#include <cstdlib>\n#include <iostream>\n\nusing namespace std;\n\n#define FOR(i,l,r)  for(int i=(l); i<=(r); ++i)\n#define REP(i,r)    for(int i=0; i<(r); ++i)\n#define DWN(i,r,l)  for(int i=(r);i>=(l);--i)\n#define pb push_back\n\nconst int N = 500010;\nbool is_prime[510000], flag[510000];\nvoid init() {\n    memset(is_prime, 1, sizeof(is_prime));\n    memset(flag, 0, sizeof(flag));\n    vector<int>prime;\n    FOR(i, 2, N) { //素数筛\n        if(!is_prime[i])    continue;\n        prime.pb(i);\n        for(int j = i + i; j <= N; j += i)  is_prime[j] = 0;\n    }\n    FOR(i, 1, N) //给每个点染色，因为没有奇数环，所以必然染成或黑或白的一种\n        for(int x: prime) {\n            if(i > N / x)  break;\n            flag[i * x] = flag[i] ^ 1;\n        }\n}\n\nstruct Max_Match { //匈牙利匹配\n    vector<int>head[1100];\n    int match_x[1100], match_y[1100];\n    bool visit[1100];\n\n    void add(int x, int y)  { head[x].pb(y); }\n\n    bool find_path(int cur) {\n        for(int to: head[cur])\n            if(!visit[to]) {\n                visit[to] = 1;\n                if(match_y[to] == -1 || find_path( match_y[to] )) {\n                    match_x[cur] = to;\n                    match_y[to] = cur;\n                    return 1;\n                }\n            }\n        return 0;\n    }\n\n    int solve(int n, vector<int>&vec) {\n        memset(match_x, -1, sizeof(match_x));\n        memset(match_y, -1, sizeof(match_y));\n        int ret = 0;\n        REP(i, n) {\n            if(flag[ vec[i] ] != 0) continue;\n            memset(visit, 0, sizeof(visit));\n            ret += find_path(i);\n        }\n        return ret;\n    }\n};\n\nint main() {\n    init();\n    int casnum, casid = 0, n;\n    cin >> casnum;\n    while(casnum --) {\n        cin >> n;\n        vector<int>vec(n);\n        REP(i, n)   scanf(\"%d\", &vec[i]);\n\n        sort(vec.begin(), vec.end());\n        Max_Match match;\n        REP(i, n) //建立二分图\n            REP(j, i)\n                if(vec[i] % vec[j] == 0 && is_prime[ vec[i] / vec[j] ]) {\n                    if(flag[ vec[i] ] < flag[ vec[j] ])   match.add(i, j);\n                    else match.add(j, i);\n                }\n        printf(\"Case #%d: %d\\n\", ++casid, n - match.solve(n, vec));\n    }\n    return 0;\n}\n```\n","source":"_posts/编程之美2015初赛第一场.md","raw":"title: \"编程之美2015初赛第一场\"\ndate: 2015-05-07 19:51:01\ncategories: 红名之路\ntags: [编程之美]\ndescription: \n---\n\n## Hihocoder 1156 彩色的树\n\n题目链接: http://hihocoder.com/problemset/problem/1156\n\n在每个更新操作的过程中，假设点P最初的颜色为color1，更新后的颜色为color2。\n我们记与点P相邻，颜色为color1的点为num1, 颜色为color2的点为num2。\n则 ans -= num1 - 1, ans += num2 + 1。\n\n难点主要在于统计nun1, num2。直接暴力肯定是要TLE的，这里有个技巧。\n\n既然是在树中，我们用map存点P的子节点各种颜色的点有多少个，将父节点单独考虑。\n查询的过程中:\n* `num1 = map[P][color1] + (color[ fa[P] ] == color1)`\n* `num2 = map[P][color2] + (color[ fa[p] ] == color2)`\n\n更新的时候只用将父节点的子节点的color1--, color2++。\n在O(log)级的复杂度内就能完成更新查询操作。\n<!-- more -->\n\n```c++\n#include <cstdio>\n#include <cstring>\n#include <vector>\n#include <map>\n#include <cstdlib>\n#include <iostream>\n\nusing namespace std;\n\n#define FOR(i,l,r)  for(int i=(l); i<=(r); ++i)\n#define REP(i,r)    for(int i=0; i<(r); ++i)\n#define DWN(i,r,l)  for(int i=(r);i>=(l);--i)\n\n#define pb push_back\n\nconst int N = 1e5 + 10;\nvector<int>head[N];\nint color[N], fa[N];\n\nmap<int, int>m[N];\n\nvoid dfs(int cur) { //构建树形结构\n    for(int to: head[cur]) {\n        if(to == fa[cur])   continue;\n        fa[to] = cur;\n        m[cur][0] ++;\n        dfs(to);\n    }\n}\n\nvoid update(int cur, int tmp_color, int &ans) { //更新点的同时同时更新ans\n    int tmp = 0;\n    tmp += m[cur][ color[cur] ];\n    if(color[ fa[cur] ] == color[cur]) ++tmp;\n    ans += tmp - 1;\n\n    tmp = 0;\n    tmp += m[cur][tmp_color];\n    if(color[ fa[cur] ] == tmp_color) ++tmp;\n    ans -= tmp - 1;\n\n    --m[ fa[cur] ][ color[cur] ];\n    ++m[ fa[cur] ][ tmp_color ];\n    color[cur] = tmp_color;\n}\n\nint main() {\n    int casnum, casid = 0, n, q, x, y, z;\n    cin >> casnum;\n    while(casnum--) {\n        memset(color, 0, sizeof(color));\n        FOR(i, 1, n)    head[i].clear(), m[i].clear();\n        cin >> n;\n\n        REP(i, n-1) {\n            scanf(\"%d%d\", &x, &y);\n            head[x].pb(y);\n            head[y].pb(x);\n        }\n        fa[1] = 0;\n        dfs(1);\n\n        printf(\"Case #%d:\\n\", ++ casid);\n\n        int ans = 1;\n        color[0] = -1;\n        cin >> q;\n        while(q--) {\n            scanf(\"%d\", &x);\n            if(x == 1)  printf(\"%d\\n\", ans);\n            else {\n                scanf(\"%d%d\", &y, &z);\n                update(y, z, ans);\n            }\n        }\n    }\n    return 0;\n}\n```\n\n\n\n## Hihocoder 1157 建造金字塔\n\n题目链接： http://hihocoder.com/problemset/problem/1157\n\nDP。\n输入的时候时候一个三角形用顶点坐标`(x, y)`来表示，我们转化成左右端顶点的横坐标来表示一个三角形`(l,r) = (x-y,x+y)`。然后按`l`进行排序。\n我们用`dp[i][j]`表示第i个点，且前从前i个三角形选择的三角形中最右端为j的最大获益。\n假设第i个点的左右端点为`(l,r)`，利润为v1，成本为v2，分三种情况讨论：\n1.  `j <= l：dp[i][r] = max(dp[i][r], dp[i-1][j] + v1 - v2)`\n2.  `j >= r：dp[i][j] = max(dp[i][j], dp[i-1][j] + v1)`\n3.  `j > l && j < r：dp[i][r] = max(dp[i][r], dp[i-1][j] + v1 - v2 + v3)`。v3为与之前的重叠面积\n\n```c++\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n#include <vector>\n#include <cstdlib>\n#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\n#define FOR(i,l,r)  for(int i=(l); i<=(r); ++i)\n#define REP(i,r)    for(int i=0; i<(r); ++i)\n#define DWN(i,r,l)  for(int i=(r);i>=(l);--i)\n#define pb push_back\n\ndouble dp[2][3010]; //滚动数组，第一维只要2就够了\n\nstruct Trangle {\n    int l, r;\n    double v1, v2;\n    bool operator <(const Trangle &other) const {\n        if(l != other.l)    return l < other.l;\n        return r < other.r;\n    }\n};\n\nint main() {\n    int casnum, casid = 0, n, x, y, z;\n    cin >> casnum;\n    while(casnum--) {\n        double ans = 0;\n        cin >> n;\n        vector<Trangle>vec(n);\n        REP(i, n) {\n            scanf(\"%d%d%d\", &x, &y, &z);\n            vec[i].l = x - y + 1000;//因为x-y有可能小于0,注意不要超出边界 \n            vec[i].r = x + y + 1000;\n            vec[i].v1 = z;\n            vec[i].v2 = y * y;\n        }\n        sort(vec.begin(), vec.end()); //按l排序\n\n        int cur = 1, pre = 0;\n        REP(i, 2)\n            REP(j, 3001)\n                dp[i][j] = -1e18;\n\n        dp[cur][0] = 0;\n\n        for(auto t: vec) {\n            cur ^= 1, pre ^= 1;\n            REP(i, 3001)\n                dp[cur][i] = -1e18;\n            int l = t.l, r = t.r;\n            REP(i, 3001) {//分三种情况讨论\n                if(i >= r)  dp[cur][i] = max(dp[cur][i], dp[pre][i] + t.v1);\n                else if(i <= l) dp[cur][r] = max(dp[cur][r], dp[pre][i] + t.v1 - t.v2);\n                else dp[cur][r] = max(dp[cur][r], dp[pre][i] + t.v1 - pow((t.r - t.l) / 2.0, 2.0) + pow((i - t.l) / 2.0, 2.0));\n\n                dp[cur][i] = max(dp[cur][i], dp[pre][i]);\n                ans = max(ans, dp[cur][i]);\n            }\n        }\n        printf(\"Case #%d: %.2lf\\n\", ++casid, ans);\n    }\n    return 0;\n}\n```\n\n##Hihocoder 1158 质数相关\n\n题目链接：http://hihocoder.com/problemset/problem/1158\n\n二分匹配求最大独立集。\n可证：`如果(a,b)质数相关，(b,c)质数相关，则（a,c）质数无关`\n\n因此没有奇数环，可划分为二分图。\n求出二分匹配，最大独立集 = n - 最大匹配。\n\n```c++\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <vector>\n#include <map>\n#include <cstdlib>\n#include <iostream>\n\nusing namespace std;\n\n#define FOR(i,l,r)  for(int i=(l); i<=(r); ++i)\n#define REP(i,r)    for(int i=0; i<(r); ++i)\n#define DWN(i,r,l)  for(int i=(r);i>=(l);--i)\n#define pb push_back\n\nconst int N = 500010;\nbool is_prime[510000], flag[510000];\nvoid init() {\n    memset(is_prime, 1, sizeof(is_prime));\n    memset(flag, 0, sizeof(flag));\n    vector<int>prime;\n    FOR(i, 2, N) { //素数筛\n        if(!is_prime[i])    continue;\n        prime.pb(i);\n        for(int j = i + i; j <= N; j += i)  is_prime[j] = 0;\n    }\n    FOR(i, 1, N) //给每个点染色，因为没有奇数环，所以必然染成或黑或白的一种\n        for(int x: prime) {\n            if(i > N / x)  break;\n            flag[i * x] = flag[i] ^ 1;\n        }\n}\n\nstruct Max_Match { //匈牙利匹配\n    vector<int>head[1100];\n    int match_x[1100], match_y[1100];\n    bool visit[1100];\n\n    void add(int x, int y)  { head[x].pb(y); }\n\n    bool find_path(int cur) {\n        for(int to: head[cur])\n            if(!visit[to]) {\n                visit[to] = 1;\n                if(match_y[to] == -1 || find_path( match_y[to] )) {\n                    match_x[cur] = to;\n                    match_y[to] = cur;\n                    return 1;\n                }\n            }\n        return 0;\n    }\n\n    int solve(int n, vector<int>&vec) {\n        memset(match_x, -1, sizeof(match_x));\n        memset(match_y, -1, sizeof(match_y));\n        int ret = 0;\n        REP(i, n) {\n            if(flag[ vec[i] ] != 0) continue;\n            memset(visit, 0, sizeof(visit));\n            ret += find_path(i);\n        }\n        return ret;\n    }\n};\n\nint main() {\n    init();\n    int casnum, casid = 0, n;\n    cin >> casnum;\n    while(casnum --) {\n        cin >> n;\n        vector<int>vec(n);\n        REP(i, n)   scanf(\"%d\", &vec[i]);\n\n        sort(vec.begin(), vec.end());\n        Max_Match match;\n        REP(i, n) //建立二分图\n            REP(j, i)\n                if(vec[i] % vec[j] == 0 && is_prime[ vec[i] / vec[j] ]) {\n                    if(flag[ vec[i] ] < flag[ vec[j] ])   match.add(i, j);\n                    else match.add(j, i);\n                }\n        printf(\"Case #%d: %d\\n\", ++casid, n - match.solve(n, vec));\n    }\n    return 0;\n}\n```\n","slug":"编程之美2015初赛第一场","published":1,"updated":"2015-05-07T11:56:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ci9e4ctt60003p17675q4b9fw"},{"title":"最短路 SPFA","date":"2015-01-04T07:32:34.000Z","description":null,"_content":"首先，为了简化分析，我们假定图中是没有负环的。\n如果有负环，则就没有最短路径。\n> 负环：一条从a到a的路径，路径上每条边的边权和为负。\n\n但是SPFA算法是可以判断是否有负环存在的，比较基本的做法是判断每个点进队出队的次数，这个复杂度比较高。其实有一种DFS版的SPFA，用这个来判断是否有负环的效率是非常高的，这个我们后续再讲。\n\n最短路的算法中都用着一种通用的思路：\n* 初始化\n* 松弛操作\n<!-- more -->\n初始化自然不用说。\n最开始还没有进行任何操作，每个点（除了起始点）距离起始点的距离为无穷大（记为dis[i]=INF），起始点到起始点的距离为0（记作dis[start]=0）。\n\n\n然后是松弛操作，也是本篇文章的主要部分。\n松弛操作的要达到的目的是：\n* ** 对于任意点u, 将从起始点到u的最短距离记为dis[u]。 **\n* ** 对于点u的任意相邻点v, 满足dis[v] <= dis[u] + d[u,v] **\n\n> u与v相邻：存在一条边 u->v\n\n为什么要满足这样一个条件呢？\n\n拿v点举例。\n我们知道，一条从起始点s到v点的最短路径不可能是凭空产生的，从起始点到v点的最短路径在两种情况下可能产生：\n* ** s与v相邻，(s,v)这条边就可能（但不是一定）就直接是一条最短路径。**\n* ** 有一个点u与v相邻，通过s到u的的最短路径，延伸出一条从s到v得最短路径。 **\n\n对于第一种情况，很明显一次就直接能找到最短路径。\n\n对于第二种情况，假设到点v的最终最短路径是先从s到u, 再从u到v。 \n在算法执行的过程中，我们不知道此时的dis[u]是否是最短距离。这个都没关系，我们先满足在当前dis[u]的情况下,dis[v]是否小于等于dis[u] + d[u,v]。\n如果此时的dis[u]是最优解，dis[v]自然也是最优解。\n如果dis[u]不是最优解，那就往前推，先保证从s到u的最短路径中，u的前一个点x是最优解。如果x不是，再往前推，早晚会推到dis[s]=0，这个妥妥地是最优解了，然后就能保证后面的都是最优解。\n\n所以，我们的算法流程是这样:\n1. 初始化\n2. 将起始点加入一个队列中\n3. 从队列中取出来一个点u，并将这个点从队列中移除\n4. 对于u所有相邻的点v，看dis[v] 是否小于等于dis[u] + d[u,v]，如果不是（说明这个点还不是最优解，所以它之前更新过的点中仍然有些不是最优解），更新dis[v]=dis[u] + d[u,v]。再看v是否在队列中，如果不是，将v加入队列。\n5. 回到步骤3\n6. 直到队列为空，算法结束，此时的dis均为最优解。\n\n算法复杂度为O(k * e)，e为边数。k为可变常数，可证明一般情况下k < 2。（我不知道怎么证明的...有兴趣的可以自己查查）\n\n在这个模板中，为了省内存，我的队列采用的时循环队列的形式。因为每个点最多只能同时在队列里一次，所以这个队列大小为n就足够了。\n\n```c++\nclass SPFA {\n    typedef int type;\n    struct Edge {\n        int to, next;\n        type d;\n    }edge[M];\n\n    type dis[N];\n    int que[N], head[N], ip;\n    bool visit[N];//标记各点是否在队列中\n\n    public:\n        SPFA() { init(); }\n\n        void init() { //初始化，采用链式前向星建边\n            memset(head, -1, sizeof(head));\n            ip = 0;\n        }\n\n        void add(int u, int v, int d) {\n            edge[ip].to=v; edge[ip].d=d; edge[ip].next=head[u]; head[u]=ip++;\n        }\n\n        void spfa(int start, int end, int num) {\n            memset(visit, 0, sizeof(visit));//清空队列\n            for(int i=0; i<=num; ++i)   dis[i] = INF;//步骤1\n\n            int front = -1, tail = -1;\n            dis[start] = 0; visit[start] = 1; que[++tail] = start;//步骤2\n            while(front != tail) {\n                if(++front > num)   front -= num;\n                int top = que[front];//步骤3\n                visit[top] = 0;\n                for(int p=head[top]; p!=-1; p=edge[p].next) {\n                    int to = edge[p].to, temp = dis[top] + edge[p].c;\n                    if(dis[to] > temp) {//步骤4\n                        dis[to] = temp;\n                        if(!visit[to]) {\n                            if(++tail > num)    tail -= num;\n                            que[tail] = to;\n                            viist[to] = 1;\n                        }\n                    }\n                }\n            }\n            return dis[end];\n        }\n}\n```\n","source":"_posts/最短路-SPFA.md","raw":"title: 最短路 SPFA\ncategories: Algorithm\ndate: 2015-01-04 15:32:34\ntags:\ndescription:\n---\n首先，为了简化分析，我们假定图中是没有负环的。\n如果有负环，则就没有最短路径。\n> 负环：一条从a到a的路径，路径上每条边的边权和为负。\n\n但是SPFA算法是可以判断是否有负环存在的，比较基本的做法是判断每个点进队出队的次数，这个复杂度比较高。其实有一种DFS版的SPFA，用这个来判断是否有负环的效率是非常高的，这个我们后续再讲。\n\n最短路的算法中都用着一种通用的思路：\n* 初始化\n* 松弛操作\n<!-- more -->\n初始化自然不用说。\n最开始还没有进行任何操作，每个点（除了起始点）距离起始点的距离为无穷大（记为dis[i]=INF），起始点到起始点的距离为0（记作dis[start]=0）。\n\n\n然后是松弛操作，也是本篇文章的主要部分。\n松弛操作的要达到的目的是：\n* ** 对于任意点u, 将从起始点到u的最短距离记为dis[u]。 **\n* ** 对于点u的任意相邻点v, 满足dis[v] <= dis[u] + d[u,v] **\n\n> u与v相邻：存在一条边 u->v\n\n为什么要满足这样一个条件呢？\n\n拿v点举例。\n我们知道，一条从起始点s到v点的最短路径不可能是凭空产生的，从起始点到v点的最短路径在两种情况下可能产生：\n* ** s与v相邻，(s,v)这条边就可能（但不是一定）就直接是一条最短路径。**\n* ** 有一个点u与v相邻，通过s到u的的最短路径，延伸出一条从s到v得最短路径。 **\n\n对于第一种情况，很明显一次就直接能找到最短路径。\n\n对于第二种情况，假设到点v的最终最短路径是先从s到u, 再从u到v。 \n在算法执行的过程中，我们不知道此时的dis[u]是否是最短距离。这个都没关系，我们先满足在当前dis[u]的情况下,dis[v]是否小于等于dis[u] + d[u,v]。\n如果此时的dis[u]是最优解，dis[v]自然也是最优解。\n如果dis[u]不是最优解，那就往前推，先保证从s到u的最短路径中，u的前一个点x是最优解。如果x不是，再往前推，早晚会推到dis[s]=0，这个妥妥地是最优解了，然后就能保证后面的都是最优解。\n\n所以，我们的算法流程是这样:\n1. 初始化\n2. 将起始点加入一个队列中\n3. 从队列中取出来一个点u，并将这个点从队列中移除\n4. 对于u所有相邻的点v，看dis[v] 是否小于等于dis[u] + d[u,v]，如果不是（说明这个点还不是最优解，所以它之前更新过的点中仍然有些不是最优解），更新dis[v]=dis[u] + d[u,v]。再看v是否在队列中，如果不是，将v加入队列。\n5. 回到步骤3\n6. 直到队列为空，算法结束，此时的dis均为最优解。\n\n算法复杂度为O(k * e)，e为边数。k为可变常数，可证明一般情况下k < 2。（我不知道怎么证明的...有兴趣的可以自己查查）\n\n在这个模板中，为了省内存，我的队列采用的时循环队列的形式。因为每个点最多只能同时在队列里一次，所以这个队列大小为n就足够了。\n\n```c++\nclass SPFA {\n    typedef int type;\n    struct Edge {\n        int to, next;\n        type d;\n    }edge[M];\n\n    type dis[N];\n    int que[N], head[N], ip;\n    bool visit[N];//标记各点是否在队列中\n\n    public:\n        SPFA() { init(); }\n\n        void init() { //初始化，采用链式前向星建边\n            memset(head, -1, sizeof(head));\n            ip = 0;\n        }\n\n        void add(int u, int v, int d) {\n            edge[ip].to=v; edge[ip].d=d; edge[ip].next=head[u]; head[u]=ip++;\n        }\n\n        void spfa(int start, int end, int num) {\n            memset(visit, 0, sizeof(visit));//清空队列\n            for(int i=0; i<=num; ++i)   dis[i] = INF;//步骤1\n\n            int front = -1, tail = -1;\n            dis[start] = 0; visit[start] = 1; que[++tail] = start;//步骤2\n            while(front != tail) {\n                if(++front > num)   front -= num;\n                int top = que[front];//步骤3\n                visit[top] = 0;\n                for(int p=head[top]; p!=-1; p=edge[p].next) {\n                    int to = edge[p].to, temp = dis[top] + edge[p].c;\n                    if(dis[to] > temp) {//步骤4\n                        dis[to] = temp;\n                        if(!visit[to]) {\n                            if(++tail > num)    tail -= num;\n                            que[tail] = to;\n                            viist[to] = 1;\n                        }\n                    }\n                }\n            }\n            return dis[end];\n        }\n}\n```\n","slug":"最短路-SPFA","published":1,"updated":"2015-05-07T08:05:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ci9e4ctty0008p1767pw5xhy7"},{"title":"New Year","date":"2015-01-02T15:16:29.000Z","description":"What’t this?","_content":"\n新的一年，要把CF刷红，TC刷红。\n托福要过，N2看着办吧。。。\n至于签了百度什么的。。。呵呵呵呵。。。妥妥地不想回去了。。。\n","source":"_posts/New-Year.md","raw":"title: New Year\ndate: 2015-01-02 23:16:29\ncategories: 随笔\ntags: \ndescription: What’t this?\n---\n\n新的一年，要把CF刷红，TC刷红。\n托福要过，N2看着办吧。。。\n至于签了百度什么的。。。呵呵呵呵。。。妥妥地不想回去了。。。\n","slug":"New-Year","published":1,"updated":"2015-05-06T13:24:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ci9e4ctu1000ap176hy5y2q1b"},{"title":"(转) Mac中安装Vim7.4","date":"2015-01-07T04:58:51.000Z","description":null,"_content":"Mac本身其实是预装了Vim的，但是目前的系统中都是Vim7.3版本的，而最新的Vim已经是7.4版了，因此为了能够使用最新版的vim，必须要对Mac中的vim要么升级，要么重装。在折腾过程中，遇到了一些问题，这里记录，以鉴后人。\n\n<!-- more -->\n# **可选方案**\n\n**升级原生的Vim7.3**\n 这种方法貌似是最”干净”的，不会引入其他任何多余的东西，对于有洁癖的人这应该是一种比较好的方案。但是，这个方案也有缺点，那就是它会覆盖原生的Vim，会改变系统的默认设置，并且一旦升级过程中出现了问题，那你就再也没有可用的vim了。另外一个问题是，以后当你系统升级的时候，很有可能你自己的vim又会被新系统的vim给覆盖，这样会比较麻烦。\n\n**使用MacVim**\n这是一种比较好的方案，Vim官网上也是推荐使用这种方案的，MacVim是针对Mac系统特别定制的Vim版本，安装过程也很简单，网上一搜一大把。它功能上和vim完全一致，不会有任何的问题。要说这种方案其实已经算是一个完美的解决方案了，但是它有一点不太方便的地方，那就是不能直接在终端中使用vim，每次使用MacVim的时候都会单独开启一个窗口，有点类似于windows中的gvim。而我个人是比较习惯在终端中写代码的，因此这个方案还是不能满足我的需求。\n\n**自己编译**\n这是一种终极的方案，但是自己编译的时候注意要手动更改默认的安装目录，不然它就会覆盖原生的vim7.3，这样就会变成第一种方案了。将vim7.4安装在其他目录，然后在.bash_profile中添加一个vim命令的别名，将其指向新安装的vim7.4的目录，而不是原生的vim7.3目录。这个方案就能在终端中直接使用vim7.4了，并且不会对原生的vim7.3又任何影响。这个方案唯一的缺点大概就是会在系统中产生两个不同版本的vim了，这也许对一些有洁癖的人是难以接受的。\n\n我自己最终选择了第三套方案，也就是自己编译新版本的vim.\n\n\n# **重新编译**\n\n好了，现在让我们开始折腾吧。\n\n首先上vim的官网下载vim7.4的源文件。（[下载链接](http://www.vim.org/sources.ph)）\n\n新建目录`/opt/local`，这个目录就是用来存放我们新安装的vim7.4的，你也可以建立其他的目录，这里只是一个示例。\n\n进入vim的源文件目录中，在终端中运行命令:\n```bash\n./configure --with-features=huge --enable-pythoninterp=yes  --enable-cscope --enable-fontset --enable-perlinterp --enable-rubyinterp --with-python-config-dir=/usr/lib/python2.6/config --prefix=/opt/local\n```\n这个命令是完成对vim的一些配置选项，启用了python和ruby的支持特性，这还是比较重要的，因为vim中有些插件会使用python和ruby的，如果没有开启这些特性，有些插件是无法运行的。在这些配置命令中，最后一个`--prefix=/opt/local`是用来指明安装目录的，你也可以修改成你自己的目录。\n\n在写配置命令的时候，需要注意的是，不能写上`--enable-gui`，这是开启gui特性的，但是我们是在终端环境下安装的，因此不能开启这个特性，否则会出现编译错误。\n\n在终端中执行`make`命令。在make过程中，会出现一个错误，如下所示：\n```bash\n:info:build os_unix.c:830:46: warning: declaration of 'struct sigaltstack' will not be visible outside of this function [-Wvisibility]\n:info:build         extern int sigaltstack __ARGS((const struct sigaltstack *ss, struct sigaltstack *oss));\n:info:build                                                     ^\n:info:build ./os_unix.h:88:21: note: expanded from macro '__ARGS'\n:info:build #  define __ARGS(x) x\n:info:build                     ^\n:info:build os_unix.c:830:13: error: conflicting types for 'sigaltstack'\n:info:build         extern int sigaltstack __ARGS((const struct sigaltstack *ss, struct sigaltstack *oss));\n:info:build                    ^\n:info:build /usr/include/signal.h:89:5: note: previous declaration is here\n:info:build int     sigaltstack(const stack_t * __restrict, stack_t * __restrict)  __DARWIN_ALIAS(sigaltstack);\n:info:build         ^\n:info:build 1 warning and 1 error generated.\n:info:build make[1]: *** [objects/os_unix.o] Error 1\n:info:build make[1]: *** Waiting for unfinished jobs….)\n```\n解决方案也很简单，只需要在os_unix.h(src文件夹中)中加上`#include <AvailabilityMacros.h>`就可以了。\n\n执行`make install`.执行完成之后，vim7.4就安装完成了。\n\n添加vim命令的别名，在.bash_profile中添加一行`alias vim='/opt/local/bin/vim'`，然后在终端中执行`source ~/.bash_profile`\n\n好了，现在你的Mac系统已经安装好了vim7.4了，现在可以开始愉快的工作了。\n\n参考资料\nhttp://stackoverflow.com/questions/7211820/update-built-in-vim-on-mac-os-x\nhttp://www.jokerlin.us/2014/04/13/Vim74.html\nhttp://trac.macports.org/ticket/41774\n\n声明:本文采用`BY-NC-SA`协议进行授权.转载请注明: [Mac中安装Vim7.4](http://zhouyichu.com/vim/Vim-in-Mac.html)\n转自:Flyaway\n原文链接: [http://zhouyichu.com/vim/Vim-in-Mac.html](http://zhouyichu.com/vim/Vim-in-Mac.html)\n","source":"_posts/Mac中安装Vim7-4.md","raw":"title: (转) Mac中安装Vim7.4\ncategories: Tech\ndate: 2015-01-07 12:58:51\ntags: [MacOS,VIM]\ndescription:\n---\nMac本身其实是预装了Vim的，但是目前的系统中都是Vim7.3版本的，而最新的Vim已经是7.4版了，因此为了能够使用最新版的vim，必须要对Mac中的vim要么升级，要么重装。在折腾过程中，遇到了一些问题，这里记录，以鉴后人。\n\n<!-- more -->\n# **可选方案**\n\n**升级原生的Vim7.3**\n 这种方法貌似是最”干净”的，不会引入其他任何多余的东西，对于有洁癖的人这应该是一种比较好的方案。但是，这个方案也有缺点，那就是它会覆盖原生的Vim，会改变系统的默认设置，并且一旦升级过程中出现了问题，那你就再也没有可用的vim了。另外一个问题是，以后当你系统升级的时候，很有可能你自己的vim又会被新系统的vim给覆盖，这样会比较麻烦。\n\n**使用MacVim**\n这是一种比较好的方案，Vim官网上也是推荐使用这种方案的，MacVim是针对Mac系统特别定制的Vim版本，安装过程也很简单，网上一搜一大把。它功能上和vim完全一致，不会有任何的问题。要说这种方案其实已经算是一个完美的解决方案了，但是它有一点不太方便的地方，那就是不能直接在终端中使用vim，每次使用MacVim的时候都会单独开启一个窗口，有点类似于windows中的gvim。而我个人是比较习惯在终端中写代码的，因此这个方案还是不能满足我的需求。\n\n**自己编译**\n这是一种终极的方案，但是自己编译的时候注意要手动更改默认的安装目录，不然它就会覆盖原生的vim7.3，这样就会变成第一种方案了。将vim7.4安装在其他目录，然后在.bash_profile中添加一个vim命令的别名，将其指向新安装的vim7.4的目录，而不是原生的vim7.3目录。这个方案就能在终端中直接使用vim7.4了，并且不会对原生的vim7.3又任何影响。这个方案唯一的缺点大概就是会在系统中产生两个不同版本的vim了，这也许对一些有洁癖的人是难以接受的。\n\n我自己最终选择了第三套方案，也就是自己编译新版本的vim.\n\n\n# **重新编译**\n\n好了，现在让我们开始折腾吧。\n\n首先上vim的官网下载vim7.4的源文件。（[下载链接](http://www.vim.org/sources.ph)）\n\n新建目录`/opt/local`，这个目录就是用来存放我们新安装的vim7.4的，你也可以建立其他的目录，这里只是一个示例。\n\n进入vim的源文件目录中，在终端中运行命令:\n```bash\n./configure --with-features=huge --enable-pythoninterp=yes  --enable-cscope --enable-fontset --enable-perlinterp --enable-rubyinterp --with-python-config-dir=/usr/lib/python2.6/config --prefix=/opt/local\n```\n这个命令是完成对vim的一些配置选项，启用了python和ruby的支持特性，这还是比较重要的，因为vim中有些插件会使用python和ruby的，如果没有开启这些特性，有些插件是无法运行的。在这些配置命令中，最后一个`--prefix=/opt/local`是用来指明安装目录的，你也可以修改成你自己的目录。\n\n在写配置命令的时候，需要注意的是，不能写上`--enable-gui`，这是开启gui特性的，但是我们是在终端环境下安装的，因此不能开启这个特性，否则会出现编译错误。\n\n在终端中执行`make`命令。在make过程中，会出现一个错误，如下所示：\n```bash\n:info:build os_unix.c:830:46: warning: declaration of 'struct sigaltstack' will not be visible outside of this function [-Wvisibility]\n:info:build         extern int sigaltstack __ARGS((const struct sigaltstack *ss, struct sigaltstack *oss));\n:info:build                                                     ^\n:info:build ./os_unix.h:88:21: note: expanded from macro '__ARGS'\n:info:build #  define __ARGS(x) x\n:info:build                     ^\n:info:build os_unix.c:830:13: error: conflicting types for 'sigaltstack'\n:info:build         extern int sigaltstack __ARGS((const struct sigaltstack *ss, struct sigaltstack *oss));\n:info:build                    ^\n:info:build /usr/include/signal.h:89:5: note: previous declaration is here\n:info:build int     sigaltstack(const stack_t * __restrict, stack_t * __restrict)  __DARWIN_ALIAS(sigaltstack);\n:info:build         ^\n:info:build 1 warning and 1 error generated.\n:info:build make[1]: *** [objects/os_unix.o] Error 1\n:info:build make[1]: *** Waiting for unfinished jobs….)\n```\n解决方案也很简单，只需要在os_unix.h(src文件夹中)中加上`#include <AvailabilityMacros.h>`就可以了。\n\n执行`make install`.执行完成之后，vim7.4就安装完成了。\n\n添加vim命令的别名，在.bash_profile中添加一行`alias vim='/opt/local/bin/vim'`，然后在终端中执行`source ~/.bash_profile`\n\n好了，现在你的Mac系统已经安装好了vim7.4了，现在可以开始愉快的工作了。\n\n参考资料\nhttp://stackoverflow.com/questions/7211820/update-built-in-vim-on-mac-os-x\nhttp://www.jokerlin.us/2014/04/13/Vim74.html\nhttp://trac.macports.org/ticket/41774\n\n声明:本文采用`BY-NC-SA`协议进行授权.转载请注明: [Mac中安装Vim7.4](http://zhouyichu.com/vim/Vim-in-Mac.html)\n转自:Flyaway\n原文链接: [http://zhouyichu.com/vim/Vim-in-Mac.html](http://zhouyichu.com/vim/Vim-in-Mac.html)\n","slug":"Mac中安装Vim7-4","published":1,"updated":"2015-05-06T13:24:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ci9e4ctu4000dp176qgu7g019"},{"title":"HDU 5208 Where is Bob && Bestcoder Round38 C题","date":"2015-04-21T09:57:45.000Z","description":null,"_content":"\n题目链接：http://acm.hdu.edu.cn/showproblem.php?pid=5208\n\n近似于数位DP的思路。\n用数位DP求区间中符号条件的数有多少的时候，有时会用一个符号位来记录当前的取值是否达到区间的上界。这里同样用这个办法。（官方题解我有点没看懂，我的解法有可能和官方题解不一样）\n\n看到题第一眼，觉得应该优先从高位到低位处理，在以下两种情况中，决策应该是确定的：\n*   第一个人只能取0或1中的一个。这时候第二个人一定是尽量取和第一个人一样的值。\n*   第二个人只能取0或1中得一个，而第一个人两个都可以选。第一个人自然取第二个人取不到的值。\n\n但是，当在这两种情况之外，决策就不唯一了。这时，先把低位的决策解决了就很有必要。\n<!-- more -->\n我们用dp[i][l1][r1][l2][r2]来表示。 \n> `l1` 为1时，表示 **假设第一个人从最高位到第i+1位的取值都是取区间范围允许的最小值。** 此时，第一个人在第i位的取值要小心不要小于区间允许的最小值。\n反之`l1`为0时，表示**假设第一个人从最高位到第i+1位的取值有一个不是区间范围的最小值**，这时候，从第i位到第0位取任何值都不会小于区间允许的最小值了。\n\n请仔细理解上面这段话。\n\n同理，`r1`代表之前取的是不是区间范围允许的最大值。然后能类推倒l2, r2。\n\n对于每一位, 我们枚举l1, r1, l2, r2。**（再次阐明一下，l1, r1, l2, r2不是表示第i位两个人的取值范围，是表示高位的取值是不是都是边界值。）** 当l1, r1, l2, r2确定以后，第i位两个人的取值范围也就确定了，枚举两个人的取值，用第i-1位递推到第i位。\n\n```c++\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <cstring>\n#include <string>\n#include <stack>\n#include <queue>\n#include <vector>\n#include <set>\n#include <map>\n#include <cmath>\n#include <cstdlib>\n#include <iostream>\n\nusing namespace std;\n\n#define FOR(i,l,r)  for(int i=(l); i<=(r); ++i)\n#define REP(i,r)    for(int i=0; i<(r); ++i)\n#define DWN(i,r,l)  for(int i=(r);i>=(l);--i)\n\n#define pb push_back\n\ntypedef long long ll;\ntypedef pair<int, int>pii;\n\nll dp[40][2][2][2][2];\n\nint main() {\n    int casnum, casid = 0;\n    cin >> casnum;\n    while(casnum--) {\n        REP(i, 31)\n            REP(a, 2)\n                REP(b, 2)\n                    REP(c, 2)\n                        REP(d, 2)\n                            dp[i][a][b][c][d] = 1e15;\n        int l[2][2];\n        REP(i, 2)\n            REP(j, 2)\n                cin >> l[i][j];\n\n        FOR(i, 0, 31) {\n            REP(a, 2)\n                REP(b, 2)\n                    REP(c, 2)\n                        REP(d, 2) { //枚举高位的取值是不是都是边界值\n                            bool tmp_l[2][2] = { {0, 1}, {0, 1} }; \n                            // 确定此时两个人的取值范围\n                            if(a)   tmp_l[0][0] = l[0][0] & (1<<i);\n                            //当第一个人高位的取值都是下界值，而且第i位的下界值为1时\n                            //第i位的取值范围的下界为1。否则第i位的取值范围的下界为0。\n                            if(b)   tmp_l[0][1] = l[0][1] & (1<<i);\n                            //都类比第一个\n                            if(c)   tmp_l[1][0] = l[1][0] & (1<<i);\n                            if(d)   tmp_l[1][1] = l[1][1] & (1<<i);\n\n                            ll tmp1 = 0;\n                            FOR(j, tmp_l[0][0], tmp_l[0][1]) {\n                            //取值范围确定了，现在我们来枚举值。j是第一个人的取值\n                                ll tmp2 = 1e15;\n                                FOR(k, tmp_l[1][0], tmp_l[1][1]) {\n                                    //第i位的异或值加上i-1位的dp值就是第i位的dp值。\n                                    //但是我们得先算出两个人分别取j和k的情况下\n                                    //高位的取值加上第i位的取值是否依然达到上下界\n                                    bool tmp[2][2] = { {0, 0}, {0, 0} };\n                                    if(a && (j == tmp_l[0][0])) tmp[0][0] = 1;\n                                    //当且仅当高位取值到达下界,第i位又取到下界值得时候,\n                                    //对i-1位来说高位的取值达到下界\n                                    if(b && (j == tmp_l[0][1])) tmp[0][1] = 1;\n                                    if(c && (k == tmp_l[1][0])) tmp[1][0] = 1;\n                                    if(d && (k == tmp_l[1][1])) tmp[1][1] = 1;\n                                    if(i)\n                                        tmp2 = min(tmp2, ((ll)(j^k) << i) + dp[i-1][tmp[0][0]][tmp[0][1]][tmp[1][0]][tmp[1][1]]);\n                                    else\n                                        tmp2 = min(tmp2, ((ll)(j^k) << i));\n                                }\n                                tmp1 = max(tmp1, tmp2);\n                            }\n                            dp[i][a][b][c][d] = tmp1;\n                        }\n        }\n        ll ans = dp[31][1][1][1][1];\n        printf(\"Case #%d: %I64d\\n\", ++casid, ans);\n\n    }\n    return 0;\n}\n```\n","source":"_posts/HDU-5208-Where-is-Bob-Bestcoder-Round38-C题.md","raw":"title: \"HDU 5208 Where is Bob && Bestcoder Round38 C题\"\ncategories: 红名之路\ntags:\n  - BestCoder\ndate: 2015-04-21 17:57:45\ndescription:\n---\n\n题目链接：http://acm.hdu.edu.cn/showproblem.php?pid=5208\n\n近似于数位DP的思路。\n用数位DP求区间中符号条件的数有多少的时候，有时会用一个符号位来记录当前的取值是否达到区间的上界。这里同样用这个办法。（官方题解我有点没看懂，我的解法有可能和官方题解不一样）\n\n看到题第一眼，觉得应该优先从高位到低位处理，在以下两种情况中，决策应该是确定的：\n*   第一个人只能取0或1中的一个。这时候第二个人一定是尽量取和第一个人一样的值。\n*   第二个人只能取0或1中得一个，而第一个人两个都可以选。第一个人自然取第二个人取不到的值。\n\n但是，当在这两种情况之外，决策就不唯一了。这时，先把低位的决策解决了就很有必要。\n<!-- more -->\n我们用dp[i][l1][r1][l2][r2]来表示。 \n> `l1` 为1时，表示 **假设第一个人从最高位到第i+1位的取值都是取区间范围允许的最小值。** 此时，第一个人在第i位的取值要小心不要小于区间允许的最小值。\n反之`l1`为0时，表示**假设第一个人从最高位到第i+1位的取值有一个不是区间范围的最小值**，这时候，从第i位到第0位取任何值都不会小于区间允许的最小值了。\n\n请仔细理解上面这段话。\n\n同理，`r1`代表之前取的是不是区间范围允许的最大值。然后能类推倒l2, r2。\n\n对于每一位, 我们枚举l1, r1, l2, r2。**（再次阐明一下，l1, r1, l2, r2不是表示第i位两个人的取值范围，是表示高位的取值是不是都是边界值。）** 当l1, r1, l2, r2确定以后，第i位两个人的取值范围也就确定了，枚举两个人的取值，用第i-1位递推到第i位。\n\n```c++\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <cstring>\n#include <string>\n#include <stack>\n#include <queue>\n#include <vector>\n#include <set>\n#include <map>\n#include <cmath>\n#include <cstdlib>\n#include <iostream>\n\nusing namespace std;\n\n#define FOR(i,l,r)  for(int i=(l); i<=(r); ++i)\n#define REP(i,r)    for(int i=0; i<(r); ++i)\n#define DWN(i,r,l)  for(int i=(r);i>=(l);--i)\n\n#define pb push_back\n\ntypedef long long ll;\ntypedef pair<int, int>pii;\n\nll dp[40][2][2][2][2];\n\nint main() {\n    int casnum, casid = 0;\n    cin >> casnum;\n    while(casnum--) {\n        REP(i, 31)\n            REP(a, 2)\n                REP(b, 2)\n                    REP(c, 2)\n                        REP(d, 2)\n                            dp[i][a][b][c][d] = 1e15;\n        int l[2][2];\n        REP(i, 2)\n            REP(j, 2)\n                cin >> l[i][j];\n\n        FOR(i, 0, 31) {\n            REP(a, 2)\n                REP(b, 2)\n                    REP(c, 2)\n                        REP(d, 2) { //枚举高位的取值是不是都是边界值\n                            bool tmp_l[2][2] = { {0, 1}, {0, 1} }; \n                            // 确定此时两个人的取值范围\n                            if(a)   tmp_l[0][0] = l[0][0] & (1<<i);\n                            //当第一个人高位的取值都是下界值，而且第i位的下界值为1时\n                            //第i位的取值范围的下界为1。否则第i位的取值范围的下界为0。\n                            if(b)   tmp_l[0][1] = l[0][1] & (1<<i);\n                            //都类比第一个\n                            if(c)   tmp_l[1][0] = l[1][0] & (1<<i);\n                            if(d)   tmp_l[1][1] = l[1][1] & (1<<i);\n\n                            ll tmp1 = 0;\n                            FOR(j, tmp_l[0][0], tmp_l[0][1]) {\n                            //取值范围确定了，现在我们来枚举值。j是第一个人的取值\n                                ll tmp2 = 1e15;\n                                FOR(k, tmp_l[1][0], tmp_l[1][1]) {\n                                    //第i位的异或值加上i-1位的dp值就是第i位的dp值。\n                                    //但是我们得先算出两个人分别取j和k的情况下\n                                    //高位的取值加上第i位的取值是否依然达到上下界\n                                    bool tmp[2][2] = { {0, 0}, {0, 0} };\n                                    if(a && (j == tmp_l[0][0])) tmp[0][0] = 1;\n                                    //当且仅当高位取值到达下界,第i位又取到下界值得时候,\n                                    //对i-1位来说高位的取值达到下界\n                                    if(b && (j == tmp_l[0][1])) tmp[0][1] = 1;\n                                    if(c && (k == tmp_l[1][0])) tmp[1][0] = 1;\n                                    if(d && (k == tmp_l[1][1])) tmp[1][1] = 1;\n                                    if(i)\n                                        tmp2 = min(tmp2, ((ll)(j^k) << i) + dp[i-1][tmp[0][0]][tmp[0][1]][tmp[1][0]][tmp[1][1]]);\n                                    else\n                                        tmp2 = min(tmp2, ((ll)(j^k) << i));\n                                }\n                                tmp1 = max(tmp1, tmp2);\n                            }\n                            dp[i][a][b][c][d] = tmp1;\n                        }\n        }\n        ll ans = dp[31][1][1][1][1];\n        printf(\"Case #%d: %I64d\\n\", ++casid, ans);\n\n    }\n    return 0;\n}\n```\n","slug":"HDU-5208-Where-is-Bob-Bestcoder-Round38-C题","published":1,"updated":"2015-05-07T11:53:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ci9e4ctur000kp176kyb9lto6"},{"title":"CDQ分治 && HDU 5126","date":"2015-05-02T08:48:26.000Z","description":null,"_content":"参考文献：[从《Cash》谈一类分治算法的应用](http://wenku.baidu.com/view/52f9c11cff00bed5b9f31d2d.html) -- 陈丹琦\n\n也因此简称CDQ分治。\n\n个人理解CDQ分治和普通分治最大的区别为：\n普通分治可以将问题拆成几个相互独立的子问题\nCDQ分治将问题分成了两个部分：\n1.  相互独立的两个子问题  \n2.  两个子问题之间的联系\n\n因此，CDQ分治的算法流程也分为以下几步：\n> 1.  算法开始\n> 2.  取一个中间点mid, 将问题分为[L, mid] 和 [mid + 1, R]两个部分。分别处理两个子问题\n> 3.  处理[L, mid] 和 [mid + 1, R]之间的联系\n\n<!--more-->\n\n举个例子：在二维坐标系中，有n个点，m个询问。对于每个询问(x, y)，求点(x1, x2) ，x1<= x && y1 <= y 有多少个。\n\n当然，这题用树状数组就直接能写了。但是我们在这里用CDQ分治来解决一下这个问题。\n\n我们将n个点看做是n个更新，并和m个询问放在一起。定义一个结构体用vector存起来。\n\n```c++\nvoid sovle1(int l, int r, vector<Struct>vec1) {\n    //在这里将vec1[l, r]按x从小到大排序\n    int mid = (l + r) / 2;\n    solve1(l, mid);\n    solve1(mid + 1, r);//划分成相互独立的子问题\n\n    //将vec1[l, mid]中的更新操作 和 vec1[mid + 1, r]中的询问操作,存到一个vec2中 \n    solve2(l, r, vec2);//左半边的更新操作和右半边的询问操作之间有联系\n}\n\nvoid solve2(int l, int r, vector<Struct>vec2) {\n//此时在solve2中已经不需要管x了。在vec2中所有的更新操作的x必然小于等于询问操作的x。\n    \n    //在这里将vec2[l, r]按y从小到大排序\n    int mid = (l + r) / 2;\n    sovle2(l, mid);\n    solve2(mid + 1, r);//独立子问题\n\n    //将vec2[l, mid]中的更新操作和vec2[mid + 1, r]中得询问操作存到一个vec3中\n    solve3(l, r, vec3);//\n}\n\nvoid solve3（int l, int r, vector<Struct>vec3） {\n//此时在solve3中，x和y都是已经排好序的。从前到后遍历该更新更新该询问询问就好。\n    int cal = 0;\n    for(Struct tmp: vec3) {\n        if(tmp.type == Update)  ++cal;\n        else tmp.query_anser += cal;\n    }\n}\n//这段代码其中有许多可以优化的地方，但是不要在意细节，主要是为了更加方便地理解算法\n```\n\n虽然解法不如树状数组，但是我们得看到题目扩展后的好处。\n我们看到，当到solve2时，函数中的参数`vec2`已经不用再管他的x了（`请务必深刻理解为什么不用再管了`）。\n这样的好处在哪里？没错，**降维！**\n假如我们要处理的不是二维，而是三维四维依旧可以这么处理，每一个维度只不过加了O(log)的复杂度而已。\n**如果是随时可以更新查询的操作，只不过也只是把时间当成一个维度而已。**（光是这一点就已经牛逼哄哄够解决大部分题目了。）\n\n然后就是下面这道题，三维且可随时更新查询：\nHDU 5126 starts: [传送门](http://acm.hdu.edu.cn/showproblem.php?pid=5126)\n\n```c++\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n#include <vector>\n#include <cstdlib>\n\nusing namespace std;\n\n#define FOR(i,l,r)  for(int i=(l); i<=(r); ++i)\n#define REP(i,r)    for(int i=0; i<(r); ++i)\n#define DWN(i,r,l)  for(int i=(r);i>=(l);--i)\n\n#define pb push_back\n\ntypedef long long ll;\ntypedef pair<int, int>pii;\n\nconst int N = 5e4 + 100;\nint que[N << 1];\nint ans[N];\nint z_num;\nint node[N << 1];\nstruct Query {\n    int x, y, z, kind, id;\n    Query() {}\n    Query(int _x, int _y, int _z, int _kind, int _id) : x(_x), y(_y), z(_z), kind(_kind), id(_id) {}\n}queries[N << 3], queries_x[N<<3], queries_y[N << 3];\n\nbool cmpx(Query a, Query b) {\n    return a.x < b.x || (a.x == b.x && a.kind < b.kind);\n}\nbool cmpy(Query a, Query b) {\n    return a.y < b.y || (a.y == b.y && a.kind < b.kind);\n}\n\ninline int lowbit(int x)    {return x&-x;}\nvoid update(int pos, int value) {\n    while(pos <= z_num) {\n        node[pos] += value;\n        pos += lowbit(pos);\n    }\n}\nint query(int pos) {\n    int ret = 0;\n    while(pos) {\n        ret += node[pos];\n        pos -= lowbit(pos);\n    }\n    return ret;\n}\n\nvoid solve3(int l, int r) {//只剩下二维y和z，直接就是二维的更新查询题目，树状数组解决就好了\n    if(l >= r)  return;\n    FOR(i, l, r)\n        if(queries_y[i].kind == 0)  update(queries_y[i].z, 1);\n        else if(queries_y[i].kind == 1)  ans[ queries_y[i].id ] -= query(queries_y[i].z);\n        else if(queries_y[i].kind == 2) ans[ queries_y[i].id ] += query(queries_y[i].z);\n    FOR(i, l, r)\n        if(queries_y[i].kind == 0)  update(queries_y[i].z, -1);\n}\n\n\nvoid solve2(int l, int r) {//把x这一维度消除\n    if(l >= r)  return;\n    int mid = (l+r)>>1;\n    solve2(l, mid);\n    solve2(mid + 1, r);\n\n    int num = 0;\n    FOR(i, l, mid)  if(queries_x[i].kind == 0)  queries_y[num++] = queries_x[i];\n    FOR(i, mid+1, r)    if(queries_x[i].kind)  queries_y[num++] = queries_x[i];\n    sort(queries_y, queries_y + num, cmpy);\n    solve3(0, num - 1);\n}\n\nvoid solve1(int l, int r) {//已经默认时间从小到大排序了，把时间这一维度消除\n    if(l >= r)  return;\n    int mid = (l+r)>>1;\n    solve1(l, mid);\n    solve1(mid + 1, r);\n    int num = 0;\n    FOR(i, l, mid)  if(queries[i].kind == 0)    queries_x[num++] = queries[i];\n    FOR(i, mid + 1, r)  if(queries[i].kind)     queries_x[num++] = queries[i];\n    sort(queries_x, queries_x + num, cmpx);//对x从小到大排序\n    solve2(0, num - 1);\n}\n\n\nint main() {\n    int casnum, n;\n    int x1, x2, y1, y2, z1, z2, kind;\n    cin >> casnum;\n    while(casnum--) {\n        memset(ans, -1, sizeof(ans));\n        cin >> n;\n        int id = 0;\n        z_num = 0;\n        REP(i, n) {\n            scanf(\"%d\", &kind);\n            if(kind == 1) {\n                scanf(\"%d%d%d\", &x1, &y1, &z1);\n                queries[id++] = Query(x1, y1, z1, 0, i);\n                que[z_num++] = z1;\n            } else {\n                ans[i] = 0;\n                scanf(\"%d%d%d%d%d%d\", &x1, &y1, &z1, &x2, &y2, &z2);\n                queries[id++] = Query(x2    , y2    , z2    , 2, i);\n                queries[id++] = Query(x2    , y2    , z1 - 1, 1, i);\n                queries[id++] = Query(x2    , y1 - 1, z2    , 1, i);\n                queries[id++] = Query(x1 - 1, y2    , z2    , 1, i);\n                queries[id++] = Query(x2    , y1 - 1, z1 - 1, 2, i);\n                queries[id++] = Query(x1 - 1, y2    , z1 - 1, 2, i);\n                queries[id++] = Query(x1 - 1, y1 - 1, z2    , 2, i);\n                queries[id++] = Query(x1 - 1, y1 - 1, z1 - 1, 1, i);\n                que[z_num++] = z2;\n                que[z_num++] = z1 - 1;\n            }\n        }\n            sort(que, que + z_num);\n            z_num = unique(que, que + z_num) - que;\n            REP(i, id)  queries[i].z = lower_bound(que, que + z_num, queries[i].z) - que + 1;\n            solve1(0, id - 1);\n            REP(i, n)\n                if(ans[i] != -1)\n                    printf(\"%d\\n\", ans[i]);\n    }\n\n    return 0;\n}\n```\n","source":"_posts/CDQ分治.md","raw":"title: CDQ分治 && HDU 5126\ncategories: Algorithm\ndate: 2015-05-02 16:48:26\ntags:\n    - HDU\n    \ndescription:\n---\n参考文献：[从《Cash》谈一类分治算法的应用](http://wenku.baidu.com/view/52f9c11cff00bed5b9f31d2d.html) -- 陈丹琦\n\n也因此简称CDQ分治。\n\n个人理解CDQ分治和普通分治最大的区别为：\n普通分治可以将问题拆成几个相互独立的子问题\nCDQ分治将问题分成了两个部分：\n1.  相互独立的两个子问题  \n2.  两个子问题之间的联系\n\n因此，CDQ分治的算法流程也分为以下几步：\n> 1.  算法开始\n> 2.  取一个中间点mid, 将问题分为[L, mid] 和 [mid + 1, R]两个部分。分别处理两个子问题\n> 3.  处理[L, mid] 和 [mid + 1, R]之间的联系\n\n<!--more-->\n\n举个例子：在二维坐标系中，有n个点，m个询问。对于每个询问(x, y)，求点(x1, x2) ，x1<= x && y1 <= y 有多少个。\n\n当然，这题用树状数组就直接能写了。但是我们在这里用CDQ分治来解决一下这个问题。\n\n我们将n个点看做是n个更新，并和m个询问放在一起。定义一个结构体用vector存起来。\n\n```c++\nvoid sovle1(int l, int r, vector<Struct>vec1) {\n    //在这里将vec1[l, r]按x从小到大排序\n    int mid = (l + r) / 2;\n    solve1(l, mid);\n    solve1(mid + 1, r);//划分成相互独立的子问题\n\n    //将vec1[l, mid]中的更新操作 和 vec1[mid + 1, r]中的询问操作,存到一个vec2中 \n    solve2(l, r, vec2);//左半边的更新操作和右半边的询问操作之间有联系\n}\n\nvoid solve2(int l, int r, vector<Struct>vec2) {\n//此时在solve2中已经不需要管x了。在vec2中所有的更新操作的x必然小于等于询问操作的x。\n    \n    //在这里将vec2[l, r]按y从小到大排序\n    int mid = (l + r) / 2;\n    sovle2(l, mid);\n    solve2(mid + 1, r);//独立子问题\n\n    //将vec2[l, mid]中的更新操作和vec2[mid + 1, r]中得询问操作存到一个vec3中\n    solve3(l, r, vec3);//\n}\n\nvoid solve3（int l, int r, vector<Struct>vec3） {\n//此时在solve3中，x和y都是已经排好序的。从前到后遍历该更新更新该询问询问就好。\n    int cal = 0;\n    for(Struct tmp: vec3) {\n        if(tmp.type == Update)  ++cal;\n        else tmp.query_anser += cal;\n    }\n}\n//这段代码其中有许多可以优化的地方，但是不要在意细节，主要是为了更加方便地理解算法\n```\n\n虽然解法不如树状数组，但是我们得看到题目扩展后的好处。\n我们看到，当到solve2时，函数中的参数`vec2`已经不用再管他的x了（`请务必深刻理解为什么不用再管了`）。\n这样的好处在哪里？没错，**降维！**\n假如我们要处理的不是二维，而是三维四维依旧可以这么处理，每一个维度只不过加了O(log)的复杂度而已。\n**如果是随时可以更新查询的操作，只不过也只是把时间当成一个维度而已。**（光是这一点就已经牛逼哄哄够解决大部分题目了。）\n\n然后就是下面这道题，三维且可随时更新查询：\nHDU 5126 starts: [传送门](http://acm.hdu.edu.cn/showproblem.php?pid=5126)\n\n```c++\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n#include <vector>\n#include <cstdlib>\n\nusing namespace std;\n\n#define FOR(i,l,r)  for(int i=(l); i<=(r); ++i)\n#define REP(i,r)    for(int i=0; i<(r); ++i)\n#define DWN(i,r,l)  for(int i=(r);i>=(l);--i)\n\n#define pb push_back\n\ntypedef long long ll;\ntypedef pair<int, int>pii;\n\nconst int N = 5e4 + 100;\nint que[N << 1];\nint ans[N];\nint z_num;\nint node[N << 1];\nstruct Query {\n    int x, y, z, kind, id;\n    Query() {}\n    Query(int _x, int _y, int _z, int _kind, int _id) : x(_x), y(_y), z(_z), kind(_kind), id(_id) {}\n}queries[N << 3], queries_x[N<<3], queries_y[N << 3];\n\nbool cmpx(Query a, Query b) {\n    return a.x < b.x || (a.x == b.x && a.kind < b.kind);\n}\nbool cmpy(Query a, Query b) {\n    return a.y < b.y || (a.y == b.y && a.kind < b.kind);\n}\n\ninline int lowbit(int x)    {return x&-x;}\nvoid update(int pos, int value) {\n    while(pos <= z_num) {\n        node[pos] += value;\n        pos += lowbit(pos);\n    }\n}\nint query(int pos) {\n    int ret = 0;\n    while(pos) {\n        ret += node[pos];\n        pos -= lowbit(pos);\n    }\n    return ret;\n}\n\nvoid solve3(int l, int r) {//只剩下二维y和z，直接就是二维的更新查询题目，树状数组解决就好了\n    if(l >= r)  return;\n    FOR(i, l, r)\n        if(queries_y[i].kind == 0)  update(queries_y[i].z, 1);\n        else if(queries_y[i].kind == 1)  ans[ queries_y[i].id ] -= query(queries_y[i].z);\n        else if(queries_y[i].kind == 2) ans[ queries_y[i].id ] += query(queries_y[i].z);\n    FOR(i, l, r)\n        if(queries_y[i].kind == 0)  update(queries_y[i].z, -1);\n}\n\n\nvoid solve2(int l, int r) {//把x这一维度消除\n    if(l >= r)  return;\n    int mid = (l+r)>>1;\n    solve2(l, mid);\n    solve2(mid + 1, r);\n\n    int num = 0;\n    FOR(i, l, mid)  if(queries_x[i].kind == 0)  queries_y[num++] = queries_x[i];\n    FOR(i, mid+1, r)    if(queries_x[i].kind)  queries_y[num++] = queries_x[i];\n    sort(queries_y, queries_y + num, cmpy);\n    solve3(0, num - 1);\n}\n\nvoid solve1(int l, int r) {//已经默认时间从小到大排序了，把时间这一维度消除\n    if(l >= r)  return;\n    int mid = (l+r)>>1;\n    solve1(l, mid);\n    solve1(mid + 1, r);\n    int num = 0;\n    FOR(i, l, mid)  if(queries[i].kind == 0)    queries_x[num++] = queries[i];\n    FOR(i, mid + 1, r)  if(queries[i].kind)     queries_x[num++] = queries[i];\n    sort(queries_x, queries_x + num, cmpx);//对x从小到大排序\n    solve2(0, num - 1);\n}\n\n\nint main() {\n    int casnum, n;\n    int x1, x2, y1, y2, z1, z2, kind;\n    cin >> casnum;\n    while(casnum--) {\n        memset(ans, -1, sizeof(ans));\n        cin >> n;\n        int id = 0;\n        z_num = 0;\n        REP(i, n) {\n            scanf(\"%d\", &kind);\n            if(kind == 1) {\n                scanf(\"%d%d%d\", &x1, &y1, &z1);\n                queries[id++] = Query(x1, y1, z1, 0, i);\n                que[z_num++] = z1;\n            } else {\n                ans[i] = 0;\n                scanf(\"%d%d%d%d%d%d\", &x1, &y1, &z1, &x2, &y2, &z2);\n                queries[id++] = Query(x2    , y2    , z2    , 2, i);\n                queries[id++] = Query(x2    , y2    , z1 - 1, 1, i);\n                queries[id++] = Query(x2    , y1 - 1, z2    , 1, i);\n                queries[id++] = Query(x1 - 1, y2    , z2    , 1, i);\n                queries[id++] = Query(x2    , y1 - 1, z1 - 1, 2, i);\n                queries[id++] = Query(x1 - 1, y2    , z1 - 1, 2, i);\n                queries[id++] = Query(x1 - 1, y1 - 1, z2    , 2, i);\n                queries[id++] = Query(x1 - 1, y1 - 1, z1 - 1, 1, i);\n                que[z_num++] = z2;\n                que[z_num++] = z1 - 1;\n            }\n        }\n            sort(que, que + z_num);\n            z_num = unique(que, que + z_num) - que;\n            REP(i, id)  queries[i].z = lower_bound(que, que + z_num, queries[i].z) - que + 1;\n            solve1(0, id - 1);\n            REP(i, n)\n                if(ans[i] != -1)\n                    printf(\"%d\\n\", ans[i]);\n    }\n\n    return 0;\n}\n```\n","slug":"CDQ分治","published":1,"updated":"2015-05-06T13:24:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ci9e4ctus000op176hvf5ou0l"},{"title":"BestCoder Round #25","date":"2015-01-09T05:57:46.000Z","description":null,"_content":"## 1001 Harry and Magical Computer\n\n就是判断有没有环存在。\n点比较少，Floyd一遍O(n^3)就行。\n\n## 1002 Harry And Magic Box\n\n官方题解是O(n^4)的，其实中间有一维可以省略。（小地方而已。。不管也罢。。）\n<!-- more -->\ndp[i][j]表示第i行已经有j列被选过（这j个不一定全都是在第i行选的，有可能包括之前选的）。\n则dp公式为： `(1 <= k <= j)`\n\n```c++\nif(k == j)\n    dp[i][j] += dp[i-1][k] * ((1<<k) - 1);\nelse:\n    dp[i][j] += dp[i-1][k] * (1<<k) * c[m-k][j-k];\n```\n表示假如`k==j`，前k个中至少选一个，种类数为`((1<<k) - 1)`。\n否则， 前k个随便选， 其余从`m-k`中选`j-k`个。\n注意数据溢出。\n\n## 1003 Harry and Christmas tree\n\n我是按照官方题解的思路。\n对每种颜色单独考虑。对第i-1个有这种颜色点a, 第i个有这种颜色的点b， 以及a和b的lca点c。 在递归过程中，c之前的点都可以被贡献1中颜色，直到c以及c往上，贡献度为a和b各一个，然后减去a和b的重复一个，总共为1。\n\n中间要用到lca算法，因为这道题就是按照递归的顺序进行遍历，用离线的lca就行。\n```c++\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <cstring>\n#include <string>\n#include <stack>\n#include <queue>\n#include <vector>\n#include <set>\n#include <map>\n#include <cmath>\n#include <cstdlib>\n#include <iostream>\n\nusing namespace std;\n\n#define FOR(i,l,r)  for(int i=(l); i<=(r); ++i)\n#define REP(i,r)    for(int i=0; i<(r); ++i)\n#define DWN(i,r,l)  for(int i=(r);i>=(l);--i)\n\n#define pb push_back\n\ntypedef long long ll;\ntypedef pair<int, int>pii;\nconst int N = 5e4 + 1;\nconst int M = 1e5 + 1;\nvector<int>head[N], gift[N];\nint fa[N], ans[N];\nint pre_color[M];\n\ninline int find(int x) {\n    if(x==fa[x])    return x;\n    else return fa[x] = find(fa[x]);\n}\n\nvoid dfs(int now, int pre) {\n    REP(i, head[now].size()) {\n        if(head[now][i] != pre) {\n            dfs(head[now][i], now); \n            fa[ head[now][i] ] = now; //离线lca中得一部分\n            ans[now] += ans[ head[now][i] ]; //将子节点的贡献度加上来。（这时候子节点的贡献度已经是 总贡献度 - 重复次数 了）\n        }\n    }\n    REP(i, gift[now].size()) {\n        int color = gift[now][i];\n        if(!pre_color[color])  { //第一个出现这种颜色，跳过不处理\n            pre_color[color] = now;\n            continue;\n        }\n        int lca = find(pre_color[color]); // 找lca\n        --ans[lca]; // 在lca上加上一个重复度, ans--\n\n        pre_color[color] = now;\n    }\n    ans[now] += gift[now].size(); //加上本节点的贡献\n}\n\nint main() {\n    //freopen(\"in\", \"r\", stdin);\n    int n, m;\n    int x, y;\n    while(cin>>n>>m) {\n        memset(ans, 0, sizeof(ans));\n        memset(pre_color, 0, sizeof(pre_color));\n        FOR(i, 1, n)    fa[i] = i, head[i].clear(), gift[i].clear();\n        REP(i, n-1) {\n            scanf(\"%d%d\",&x, &y);\n            head[x].pb(y);\n            head[y].pb(x);\n        }\n        while(m--) {\n            scanf(\"%d%d\", &x, &y);\n            gift[x].pb(y);\n        }\n        dfs(1, 0);\n\n        FOR(i, 1, n) {\n            if(i!=1)    putchar(' ');\n            printf(\"%d\", ans[i]);\n        }\n        puts(\"\");\n    }\n    return 0;\n}\n```\n\n## Harry and magic string\n\nDP + Manacher算法\n\nDP思路很简单。\nsum[i] 表示以i结尾和i之前结尾的回文串总数。\ndp[i] 表示以i开头的回文串数。\n\n> ans = $$\\sum_{i=1}^{len-1} {sum[i-1] * dp[i]}$$\n\n难点就是`sum[i]` 和 `dp[i]` 怎么求的问题了。\n新学习了个算法， Manacher算法，在我转载的上篇文章中有讲解。[传送门](http://teveillan.com/2015/01/09/-%E8%BD%AC-Manacher%E7%AE%97%E6%B3%95-%E5%9B%9E%E6%96%87%E4%B8%B2%E5%A4%84%E7%90%86/)\n\n```c++\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <cstring>\n#include <string>\n#include <stack>\n#include <queue>\n#include <vector>\n#include <set>\n#include <map>\n#include <cmath>\n#include <cstdlib>\n#include <iostream>\n\nusing namespace std;\n\n#define FOR(i,l,r)  for(int i=(l); i<=(r); ++i)\n#define REP(i,r)    for(int i=0; i<(r); ++i)\n#define DWN(i,r,l)  for(int i=(r);i>=(l);--i)\n\n#define pb push_back\n\ntypedef long long ll;\ntypedef pair<int, int>pii;\n\nconst int MAX_LEN = 1e5 + 10;\n\nchar str[MAX_LEN];\nint Len[MAX_LEN<<1];\nstruct Manacher { // Manacher算法, 讲解看上篇文章\n    char tmp_str[MAX_LEN<<1];\n    int init(char *s) {\n        int len = strlen(s);\n        int id = 0;\n        tmp_str[id++] = '#';\n        for(int i=0; i<len; ++i) {\n            tmp_str[id++] = s[i];\n            tmp_str[id++] = '#';\n        }\n        tmp_str[id] = '\\0';\n        return id;\n    }\n\n    void solve(char *s) {\n        int len = init(s);\n        int max_r = -1, max_id = -1;\n        for(int i=0; i<len; ++i) {\n            if(max_r > i)   Len[i] = min(max_r - i, Len[2 * max_id - i]);\n            else Len[i] = 1;\n\n            while(i - Len[i] >= 0 && i + Len[i] < len && tmp_str[i - Len[i]] == tmp_str[i + Len[i]])\n                ++Len[i];\n\n            if(i + Len[i] > max_r) {\n                max_r = i + Len[i];\n                max_id = i;\n            }\n        }\n    }\n};\n\nlong long sum[MAX_LEN << 1];\nint flag[MAX_LEN << 1];\nint main() {\n    //freopen(\"in\", \"r\", stdin);\n    while(cin>>str) {\n        memset(sum, 0, sizeof(sum));\n        memset(flag, 0 ,sizeof(flag));\n        Manacher manacher;\n        manacher.solve(str);\n\n        int len = strlen(str);\n        int tmp = 0;\n        for(int i = 1; i <= (len<<1); ++i) { //求sum\n            sum[i] += sum[i-1];\n            ++tmp;\n\n            tmp -= flag[i];\n            ++flag[i + Len[i]];\n            if(i&1) sum[i] += tmp;\n        }\n\n        long long ans = 0;\n        memset(flag, 0, sizeof(flag));\n        tmp = 0;\n        for(int i = (len<<1); i >= 1; --i) { //求ans\n            ++tmp;\n            tmp -= flag[i];\n            ++flag[i - Len[i]];\n            if(i&1) ans += sum[i-1] * tmp;\n        }\n        cout << ans << endl;\n    }\n    return 0;\n}\n\n```\n\n\n","source":"_posts/BestCoder-Round-25.md","raw":"title: \"BestCoder Round #25\"\ncategories: 红名之路\ntags:\n  - BestCoder\ndate: 2015-01-09 13:57:46\ndescription:\n---\n## 1001 Harry and Magical Computer\n\n就是判断有没有环存在。\n点比较少，Floyd一遍O(n^3)就行。\n\n## 1002 Harry And Magic Box\n\n官方题解是O(n^4)的，其实中间有一维可以省略。（小地方而已。。不管也罢。。）\n<!-- more -->\ndp[i][j]表示第i行已经有j列被选过（这j个不一定全都是在第i行选的，有可能包括之前选的）。\n则dp公式为： `(1 <= k <= j)`\n\n```c++\nif(k == j)\n    dp[i][j] += dp[i-1][k] * ((1<<k) - 1);\nelse:\n    dp[i][j] += dp[i-1][k] * (1<<k) * c[m-k][j-k];\n```\n表示假如`k==j`，前k个中至少选一个，种类数为`((1<<k) - 1)`。\n否则， 前k个随便选， 其余从`m-k`中选`j-k`个。\n注意数据溢出。\n\n## 1003 Harry and Christmas tree\n\n我是按照官方题解的思路。\n对每种颜色单独考虑。对第i-1个有这种颜色点a, 第i个有这种颜色的点b， 以及a和b的lca点c。 在递归过程中，c之前的点都可以被贡献1中颜色，直到c以及c往上，贡献度为a和b各一个，然后减去a和b的重复一个，总共为1。\n\n中间要用到lca算法，因为这道题就是按照递归的顺序进行遍历，用离线的lca就行。\n```c++\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <cstring>\n#include <string>\n#include <stack>\n#include <queue>\n#include <vector>\n#include <set>\n#include <map>\n#include <cmath>\n#include <cstdlib>\n#include <iostream>\n\nusing namespace std;\n\n#define FOR(i,l,r)  for(int i=(l); i<=(r); ++i)\n#define REP(i,r)    for(int i=0; i<(r); ++i)\n#define DWN(i,r,l)  for(int i=(r);i>=(l);--i)\n\n#define pb push_back\n\ntypedef long long ll;\ntypedef pair<int, int>pii;\nconst int N = 5e4 + 1;\nconst int M = 1e5 + 1;\nvector<int>head[N], gift[N];\nint fa[N], ans[N];\nint pre_color[M];\n\ninline int find(int x) {\n    if(x==fa[x])    return x;\n    else return fa[x] = find(fa[x]);\n}\n\nvoid dfs(int now, int pre) {\n    REP(i, head[now].size()) {\n        if(head[now][i] != pre) {\n            dfs(head[now][i], now); \n            fa[ head[now][i] ] = now; //离线lca中得一部分\n            ans[now] += ans[ head[now][i] ]; //将子节点的贡献度加上来。（这时候子节点的贡献度已经是 总贡献度 - 重复次数 了）\n        }\n    }\n    REP(i, gift[now].size()) {\n        int color = gift[now][i];\n        if(!pre_color[color])  { //第一个出现这种颜色，跳过不处理\n            pre_color[color] = now;\n            continue;\n        }\n        int lca = find(pre_color[color]); // 找lca\n        --ans[lca]; // 在lca上加上一个重复度, ans--\n\n        pre_color[color] = now;\n    }\n    ans[now] += gift[now].size(); //加上本节点的贡献\n}\n\nint main() {\n    //freopen(\"in\", \"r\", stdin);\n    int n, m;\n    int x, y;\n    while(cin>>n>>m) {\n        memset(ans, 0, sizeof(ans));\n        memset(pre_color, 0, sizeof(pre_color));\n        FOR(i, 1, n)    fa[i] = i, head[i].clear(), gift[i].clear();\n        REP(i, n-1) {\n            scanf(\"%d%d\",&x, &y);\n            head[x].pb(y);\n            head[y].pb(x);\n        }\n        while(m--) {\n            scanf(\"%d%d\", &x, &y);\n            gift[x].pb(y);\n        }\n        dfs(1, 0);\n\n        FOR(i, 1, n) {\n            if(i!=1)    putchar(' ');\n            printf(\"%d\", ans[i]);\n        }\n        puts(\"\");\n    }\n    return 0;\n}\n```\n\n## Harry and magic string\n\nDP + Manacher算法\n\nDP思路很简单。\nsum[i] 表示以i结尾和i之前结尾的回文串总数。\ndp[i] 表示以i开头的回文串数。\n\n> ans = $$\\sum_{i=1}^{len-1} {sum[i-1] * dp[i]}$$\n\n难点就是`sum[i]` 和 `dp[i]` 怎么求的问题了。\n新学习了个算法， Manacher算法，在我转载的上篇文章中有讲解。[传送门](http://teveillan.com/2015/01/09/-%E8%BD%AC-Manacher%E7%AE%97%E6%B3%95-%E5%9B%9E%E6%96%87%E4%B8%B2%E5%A4%84%E7%90%86/)\n\n```c++\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <cstring>\n#include <string>\n#include <stack>\n#include <queue>\n#include <vector>\n#include <set>\n#include <map>\n#include <cmath>\n#include <cstdlib>\n#include <iostream>\n\nusing namespace std;\n\n#define FOR(i,l,r)  for(int i=(l); i<=(r); ++i)\n#define REP(i,r)    for(int i=0; i<(r); ++i)\n#define DWN(i,r,l)  for(int i=(r);i>=(l);--i)\n\n#define pb push_back\n\ntypedef long long ll;\ntypedef pair<int, int>pii;\n\nconst int MAX_LEN = 1e5 + 10;\n\nchar str[MAX_LEN];\nint Len[MAX_LEN<<1];\nstruct Manacher { // Manacher算法, 讲解看上篇文章\n    char tmp_str[MAX_LEN<<1];\n    int init(char *s) {\n        int len = strlen(s);\n        int id = 0;\n        tmp_str[id++] = '#';\n        for(int i=0; i<len; ++i) {\n            tmp_str[id++] = s[i];\n            tmp_str[id++] = '#';\n        }\n        tmp_str[id] = '\\0';\n        return id;\n    }\n\n    void solve(char *s) {\n        int len = init(s);\n        int max_r = -1, max_id = -1;\n        for(int i=0; i<len; ++i) {\n            if(max_r > i)   Len[i] = min(max_r - i, Len[2 * max_id - i]);\n            else Len[i] = 1;\n\n            while(i - Len[i] >= 0 && i + Len[i] < len && tmp_str[i - Len[i]] == tmp_str[i + Len[i]])\n                ++Len[i];\n\n            if(i + Len[i] > max_r) {\n                max_r = i + Len[i];\n                max_id = i;\n            }\n        }\n    }\n};\n\nlong long sum[MAX_LEN << 1];\nint flag[MAX_LEN << 1];\nint main() {\n    //freopen(\"in\", \"r\", stdin);\n    while(cin>>str) {\n        memset(sum, 0, sizeof(sum));\n        memset(flag, 0 ,sizeof(flag));\n        Manacher manacher;\n        manacher.solve(str);\n\n        int len = strlen(str);\n        int tmp = 0;\n        for(int i = 1; i <= (len<<1); ++i) { //求sum\n            sum[i] += sum[i-1];\n            ++tmp;\n\n            tmp -= flag[i];\n            ++flag[i + Len[i]];\n            if(i&1) sum[i] += tmp;\n        }\n\n        long long ans = 0;\n        memset(flag, 0, sizeof(flag));\n        tmp = 0;\n        for(int i = (len<<1); i >= 1; --i) { //求ans\n            ++tmp;\n            tmp -= flag[i];\n            ++flag[i - Len[i]];\n            if(i&1) ans += sum[i-1] * tmp;\n        }\n        cout << ans << endl;\n    }\n    return 0;\n}\n\n```\n\n\n","slug":"BestCoder-Round-25","published":1,"updated":"2015-05-07T11:53:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ci9e4ctuu000sp176c2vzkjqm"},{"title":"[转] Manacher算法-回文串处理","date":"2015-01-09T03:45:39.000Z","description":null,"_content":"**Manacher**算法是查找一个字符串的最长回文子串的线性算法。\n在介绍算法之前，首先介绍一下什么是回文串，所谓回文串，简单来说就是正着读和反着读都是一样的字符串，比如abba，noon等等，一个字符串的最长回文子串即为这个字符串的子串中，是回文串的最长的那个。\n计算字符串的最长回文字串最简单的算法就是枚举该字符串的每一个子串，并且判断这个子串是否为回文串，这个算法的时间复杂度为O(n^3)的，显然无法令人满意，稍微优化的一个算法是枚举回文串的中点，这里要分为两种情况，一种是回文串长度是奇数的情况，另一种是回文串长度是偶数的情况，枚举中点再判断是否是回文串，这样能把算法的时间复杂度降为O(n^2)，但是当n比较大的时候仍然无法令人满意，Manacher算法可以在线性时间复杂度内求出一个字符串的最长回文字串，达到了理论上的下界。\n\n<!-- more -->\n\n#Manacher算法原理与实现\n\n下面介绍Manacher算法的原理与步骤。\n首先，Manacher算法提供了一种巧妙地办法，将长度为奇数的回文串和长度为偶数的回文串一起考虑，具体做法是，在原字符串的每个相邻两个字符中间插入一个分隔符，同时在首尾也要添加一个分隔符，分隔符的要求是不在原串中出现，一般情况下可以用#号。下面举一个例子：\n![](http://7tszmu.com1.z0.glb.clouddn.com/Manacher-1.png)\n\n## Len数组简介与性质\nManacher算法用一个辅助数组Len[i]表示以字符T[i]为中心的最长回文字串的最右字符到T[i]的长度，比如以T[i]为中心的最长回文字串是T[l,r],那么Len[i]=r-i+1。\n对于上面的例子，可以得出Len[i]数组为:\n\n![](http://7tszmu.com1.z0.glb.clouddn.com/Manacher-2.png)\n\nLen数组有一个性质，那就是Len[i]-1就是该回文子串在原字符串S中的长度，至于证明，首先在转换得到的字符串T中，所有的回文字串的长度都为奇数，那么对于以T[i]为中心的最长回文字串，其长度就为2*Len[i]-1,经过观察可知，T中所有的回文子串，其中分隔符的数量一定比其他字符的数量多1，也就是有Len[i]个分隔符，剩下Len[i]-1个字符来自原字符串，所以该回文串在原字符串中的长度就为Len[i]-1。\n有了这个性质，那么原问题就转化为求所有的Len[i]。下面介绍如何在线性时间复杂度内求出所有的Len。\n\n## Len数组的计算\n\n首先从左往右依次计算Len[i]，当计算Len[i]时，Len[j](0<=j<i)已经计算完毕。设P为之前计算中最长回文子串的右端点的最大值，并且设取得这个最大值的位置为po，分两种情况：\n第一种情况：i<=P\n那么找到i相对于po的对称位置，设为j，那么如果Len[j]<P-i，如下图：\n\n![](http://7tszmu.com1.z0.glb.clouddn.com/Manacher-3.png)\n\n那么说明以j为中心的回文串一定在以po为中心的回文串的内部，且j和i关于位置po对称，由回文串的定义可知，一个回文串反过来还是一个回文串，所以以i为中心的回文串的长度至少和以j为中心的回文串一样，即Len[i]>=Len[j]。因为Len[j]<P-i,所以说i+Len[j]<P。由对称性可知Len[i]=Len[j]。\n如果Len[j]>=P-i,由对称性，说明以i为中心的回文串可能会延伸到P之外，而大于P的部分我们还没有进行匹配，所以要从P+1位置开始一个一个进行匹配，直到发生失配，从而更新P和对应的po以及Len[i]。\n\n![](http://7tszmu.com1.z0.glb.clouddn.com/Manacher-4.png)\n\n第二种情况: i>P\n如果i比P还要大，说明对于中点为i的回文串还一点都没有匹配，这个时候，就只能老老实实地一个一个匹配了，匹配完成后要更新P的位置和对应的po以及Len[i]。\n\n![](http://7tszmu.com1.z0.glb.clouddn.com/Manacher-5.png)\n\n# 时间复杂度分析\n\nManacher算法的时间复杂度分析和Z算法类似，因为算法只有遇到还没有匹配的位置时才进行匹配，已经匹配过的位置不再进行匹配，所以对于T字符串中的每一个位置，只进行一次匹配，所以Manacher算法的总体时间复杂度为O(n)，其中n为T字符串的长度，由于T的长度事实上是S的两倍，所以时间复杂度依然是线性的。\n\n```c++\nconst int MAX_LEN = 1e5 + 10;\n\nint Len[MAX_LEN<<1]; //记录算法完成后以i点为中心最长回文串向左向右延伸的半径\nstruct Manacher {\n    char tmp_str[MAX_LEN<<1]; //记录预处理过后的字符串\n    int init(char *s) { //在solve中就直接调用了。对原串进行预处理。\n        int len = strlen(s);\n        int id = 0;\n        tmp_str[id++] = '#';\n        for(int i=0; i<len; ++i) {\n            tmp_str[id++] = s[i];\n            tmp_str[id++] = '#';\n        }\n        tmp_str[id] = '\\0';\n        return id; //此时的id即为处理过后的字符串长度\n    }\n\n\n    void solve(char *s) { //从这开始处理\n        int len = init(s);\n        int max_r = -1, max_id = -1; // 最右能到得地方，以及最右时的中心点id\n        for(int i=0; i<len; ++i) {\n            if(max_r > i)   Len[i] = min(max_r - i, Len[2 * max_id - i]);\n            else Len[i] = 1;\n\n            while(i - Len[i] >= 0 && i + Len[i] < len && tmp_str[i - Len[i]] == tmp_str[i + Len[i]])\n                ++Len[i];\n\n            if(i + Len[i] > max_r) {\n                max_r = i + Len[i];\n                max_id = i;\n            }\n        }\n    }\n};\n```\n\n转自：[http://blog.csdn.net/dyx404514/article/details/42061017](http://blog.csdn.net/dyx404514/article/details/42061017)\n作者：dyx心心\n\n","source":"_posts/-转-Manacher算法-回文串处理.md","raw":"title: \"[转] Manacher算法-回文串处理\"\ncategories: Algorithm\ndate: 2015-01-09 11:45:39\ntags:\ndescription:\n---\n**Manacher**算法是查找一个字符串的最长回文子串的线性算法。\n在介绍算法之前，首先介绍一下什么是回文串，所谓回文串，简单来说就是正着读和反着读都是一样的字符串，比如abba，noon等等，一个字符串的最长回文子串即为这个字符串的子串中，是回文串的最长的那个。\n计算字符串的最长回文字串最简单的算法就是枚举该字符串的每一个子串，并且判断这个子串是否为回文串，这个算法的时间复杂度为O(n^3)的，显然无法令人满意，稍微优化的一个算法是枚举回文串的中点，这里要分为两种情况，一种是回文串长度是奇数的情况，另一种是回文串长度是偶数的情况，枚举中点再判断是否是回文串，这样能把算法的时间复杂度降为O(n^2)，但是当n比较大的时候仍然无法令人满意，Manacher算法可以在线性时间复杂度内求出一个字符串的最长回文字串，达到了理论上的下界。\n\n<!-- more -->\n\n#Manacher算法原理与实现\n\n下面介绍Manacher算法的原理与步骤。\n首先，Manacher算法提供了一种巧妙地办法，将长度为奇数的回文串和长度为偶数的回文串一起考虑，具体做法是，在原字符串的每个相邻两个字符中间插入一个分隔符，同时在首尾也要添加一个分隔符，分隔符的要求是不在原串中出现，一般情况下可以用#号。下面举一个例子：\n![](http://7tszmu.com1.z0.glb.clouddn.com/Manacher-1.png)\n\n## Len数组简介与性质\nManacher算法用一个辅助数组Len[i]表示以字符T[i]为中心的最长回文字串的最右字符到T[i]的长度，比如以T[i]为中心的最长回文字串是T[l,r],那么Len[i]=r-i+1。\n对于上面的例子，可以得出Len[i]数组为:\n\n![](http://7tszmu.com1.z0.glb.clouddn.com/Manacher-2.png)\n\nLen数组有一个性质，那就是Len[i]-1就是该回文子串在原字符串S中的长度，至于证明，首先在转换得到的字符串T中，所有的回文字串的长度都为奇数，那么对于以T[i]为中心的最长回文字串，其长度就为2*Len[i]-1,经过观察可知，T中所有的回文子串，其中分隔符的数量一定比其他字符的数量多1，也就是有Len[i]个分隔符，剩下Len[i]-1个字符来自原字符串，所以该回文串在原字符串中的长度就为Len[i]-1。\n有了这个性质，那么原问题就转化为求所有的Len[i]。下面介绍如何在线性时间复杂度内求出所有的Len。\n\n## Len数组的计算\n\n首先从左往右依次计算Len[i]，当计算Len[i]时，Len[j](0<=j<i)已经计算完毕。设P为之前计算中最长回文子串的右端点的最大值，并且设取得这个最大值的位置为po，分两种情况：\n第一种情况：i<=P\n那么找到i相对于po的对称位置，设为j，那么如果Len[j]<P-i，如下图：\n\n![](http://7tszmu.com1.z0.glb.clouddn.com/Manacher-3.png)\n\n那么说明以j为中心的回文串一定在以po为中心的回文串的内部，且j和i关于位置po对称，由回文串的定义可知，一个回文串反过来还是一个回文串，所以以i为中心的回文串的长度至少和以j为中心的回文串一样，即Len[i]>=Len[j]。因为Len[j]<P-i,所以说i+Len[j]<P。由对称性可知Len[i]=Len[j]。\n如果Len[j]>=P-i,由对称性，说明以i为中心的回文串可能会延伸到P之外，而大于P的部分我们还没有进行匹配，所以要从P+1位置开始一个一个进行匹配，直到发生失配，从而更新P和对应的po以及Len[i]。\n\n![](http://7tszmu.com1.z0.glb.clouddn.com/Manacher-4.png)\n\n第二种情况: i>P\n如果i比P还要大，说明对于中点为i的回文串还一点都没有匹配，这个时候，就只能老老实实地一个一个匹配了，匹配完成后要更新P的位置和对应的po以及Len[i]。\n\n![](http://7tszmu.com1.z0.glb.clouddn.com/Manacher-5.png)\n\n# 时间复杂度分析\n\nManacher算法的时间复杂度分析和Z算法类似，因为算法只有遇到还没有匹配的位置时才进行匹配，已经匹配过的位置不再进行匹配，所以对于T字符串中的每一个位置，只进行一次匹配，所以Manacher算法的总体时间复杂度为O(n)，其中n为T字符串的长度，由于T的长度事实上是S的两倍，所以时间复杂度依然是线性的。\n\n```c++\nconst int MAX_LEN = 1e5 + 10;\n\nint Len[MAX_LEN<<1]; //记录算法完成后以i点为中心最长回文串向左向右延伸的半径\nstruct Manacher {\n    char tmp_str[MAX_LEN<<1]; //记录预处理过后的字符串\n    int init(char *s) { //在solve中就直接调用了。对原串进行预处理。\n        int len = strlen(s);\n        int id = 0;\n        tmp_str[id++] = '#';\n        for(int i=0; i<len; ++i) {\n            tmp_str[id++] = s[i];\n            tmp_str[id++] = '#';\n        }\n        tmp_str[id] = '\\0';\n        return id; //此时的id即为处理过后的字符串长度\n    }\n\n\n    void solve(char *s) { //从这开始处理\n        int len = init(s);\n        int max_r = -1, max_id = -1; // 最右能到得地方，以及最右时的中心点id\n        for(int i=0; i<len; ++i) {\n            if(max_r > i)   Len[i] = min(max_r - i, Len[2 * max_id - i]);\n            else Len[i] = 1;\n\n            while(i - Len[i] >= 0 && i + Len[i] < len && tmp_str[i - Len[i]] == tmp_str[i + Len[i]])\n                ++Len[i];\n\n            if(i + Len[i] > max_r) {\n                max_r = i + Len[i];\n                max_id = i;\n            }\n        }\n    }\n};\n```\n\n转自：[http://blog.csdn.net/dyx404514/article/details/42061017](http://blog.csdn.net/dyx404514/article/details/42061017)\n作者：dyx心心\n\n","slug":"-转-Manacher算法-回文串处理","published":1,"updated":"2015-05-06T13:24:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ci9e4ctuv000vp176ahhkxkq9"},{"title":"最小费用流","date":"2015-01-04T07:21:44.000Z","description":null,"_content":"```c++\n#define INF 1e9\n#define N 1000\n#define M 1000100\nstruct Edge\n{\n    int to,next,cost,flow;\n}edge[M];\nint head[N],ip;\nint que[N],dis[N],pre[N];\nbool visit[N];\nbool spfa(int start,int end,int numpoint)\n{\n    int front=-1,tail=-1,to,top,temp;\n    memset(visit,0,sizeof(visit));\n    memset(pre,-1,sizeof(pre));\n    for(int i=0;i<=numpoint;i++)    dis[i]=INF;\n    que[++tail]=start; dis[start]=0;\n    visit[start]=1;\n    while(front!=tail)\n    {\n        if(++front>numpoint) front-=numpoint;\n        top=que[front];\n        visit[top]=0;\n        for(int p=head[top];p!=-1;p=edge[p].next)\n        {\n            if(edge[p].flow>0)\n            {\n                to=edge[p].to;\n                temp=edge[p].cost+dis[top];\n                if(dis[to]>temp)\n                {\n                    dis[to]=temp;\n                    pre[to]=p;                      //记录前驱边\n                    if(!visit[to])\n                    {\n                        visit[to]=1;\n                        if(++tail>numpoint) tail-=numpoint;\n                        que[tail]=to;\n                    }\n                }\n            }\n        }\n    }\n    if(dis[end]==INF)   return 0;\n    return 1;\n}\nint mincost(int start,int end,int numpoint)\n{\n    int u,mn;\n    int ans_flow=0,ans_cost=0;\n    while(spfa(start,end,numpoint))\n    {\n        u=end;\n        mn=INF;\n        while(pre[u]!=-1)\n        {\n            mn=min(edge[pre[u]].flow,mn);\n            u=edge[ pre[u]^1 ].to;\n        }\n        u=end;\n        while(pre[u]!=-1)\n        {\n            edge[pre[u]].flow-=mn;\n            edge[pre[u]^1].flow+=mn;\n            u=edge[ pre[u]^1 ].to ;\n        }\n        ans_cost+=dis[end]*mn;\n       // ans_flow+=mn;\n    }\n    return ans_cost;\n}\nvoid add(int u,int v,int f,int c)\n{\n    edge[ip].to=v;edge[ip].flow=f;edge[ip].next=head[u];edge[ip].cost=c;head[u]=ip++;\n    edge[ip].to=u;edge[ip].flow=0;edge[ip].next=head[v];edge[ip].cost=-c;head[v]=ip++;\n}\n```\n","source":"_drafts/最小费用流.md","raw":"title: 最小费用流\ncategories: Algorithm\ndate: 2015-01-04 15:21:44\ntags:\ndescription:\n---\n```c++\n#define INF 1e9\n#define N 1000\n#define M 1000100\nstruct Edge\n{\n    int to,next,cost,flow;\n}edge[M];\nint head[N],ip;\nint que[N],dis[N],pre[N];\nbool visit[N];\nbool spfa(int start,int end,int numpoint)\n{\n    int front=-1,tail=-1,to,top,temp;\n    memset(visit,0,sizeof(visit));\n    memset(pre,-1,sizeof(pre));\n    for(int i=0;i<=numpoint;i++)    dis[i]=INF;\n    que[++tail]=start; dis[start]=0;\n    visit[start]=1;\n    while(front!=tail)\n    {\n        if(++front>numpoint) front-=numpoint;\n        top=que[front];\n        visit[top]=0;\n        for(int p=head[top];p!=-1;p=edge[p].next)\n        {\n            if(edge[p].flow>0)\n            {\n                to=edge[p].to;\n                temp=edge[p].cost+dis[top];\n                if(dis[to]>temp)\n                {\n                    dis[to]=temp;\n                    pre[to]=p;                      //记录前驱边\n                    if(!visit[to])\n                    {\n                        visit[to]=1;\n                        if(++tail>numpoint) tail-=numpoint;\n                        que[tail]=to;\n                    }\n                }\n            }\n        }\n    }\n    if(dis[end]==INF)   return 0;\n    return 1;\n}\nint mincost(int start,int end,int numpoint)\n{\n    int u,mn;\n    int ans_flow=0,ans_cost=0;\n    while(spfa(start,end,numpoint))\n    {\n        u=end;\n        mn=INF;\n        while(pre[u]!=-1)\n        {\n            mn=min(edge[pre[u]].flow,mn);\n            u=edge[ pre[u]^1 ].to;\n        }\n        u=end;\n        while(pre[u]!=-1)\n        {\n            edge[pre[u]].flow-=mn;\n            edge[pre[u]^1].flow+=mn;\n            u=edge[ pre[u]^1 ].to ;\n        }\n        ans_cost+=dis[end]*mn;\n       // ans_flow+=mn;\n    }\n    return ans_cost;\n}\nvoid add(int u,int v,int f,int c)\n{\n    edge[ip].to=v;edge[ip].flow=f;edge[ip].next=head[u];edge[ip].cost=c;head[u]=ip++;\n    edge[ip].to=u;edge[ip].flow=0;edge[ip].next=head[v];edge[ip].cost=-c;head[v]=ip++;\n}\n```\n","slug":"最小费用流","published":0,"updated":"2015-05-06T13:24:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ci9e4ctux000xp176mj6cwoxf"},{"title":"new draft","_content":"","source":"_drafts/new-draft.md","raw":"title: new draft\ntags:\n---\n","slug":"new-draft","published":0,"date":"2015-05-06T13:24:03.000Z","updated":"2015-05-06T13:24:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ci9e4ctuy000zp17607ptf9v2"}],"PostAsset":[],"PostCategory":[{"post_id":"ci9e4cts60000p176ul1hccq8","category_id":"ci9e4cts80001p176ca7vk0qx","_id":"ci9e4cts90002p176lxnslq94"},{"post_id":"ci9e4ctt60003p17675q4b9fw","category_id":"ci9e4ctt60004p176cg9v5a1m","_id":"ci9e4ctt70007p176phvp4sn6"},{"post_id":"ci9e4ctty0008p1767pw5xhy7","category_id":"ci9e4cts80001p176ca7vk0qx","_id":"ci9e4cttz0009p1764ljgvix5"},{"post_id":"ci9e4ctu1000ap176hy5y2q1b","category_id":"ci9e4ctu2000bp176fkdjld7b","_id":"ci9e4ctu2000cp176zibp09u5"},{"post_id":"ci9e4ctu4000dp176qgu7g019","category_id":"ci9e4ctu5000ep176wpubwvvz","_id":"ci9e4ctu5000hp176aovtnn6l"},{"post_id":"ci9e4ctur000kp176kyb9lto6","category_id":"ci9e4ctt60004p176cg9v5a1m","_id":"ci9e4ctur000lp176mxem7vuj"},{"post_id":"ci9e4ctus000op176hvf5ou0l","category_id":"ci9e4cts80001p176ca7vk0qx","_id":"ci9e4ctut000pp1767w4fmwr7"},{"post_id":"ci9e4ctuu000sp176c2vzkjqm","category_id":"ci9e4ctt60004p176cg9v5a1m","_id":"ci9e4ctuu000tp176fx1ecbnj"},{"post_id":"ci9e4ctuv000vp176ahhkxkq9","category_id":"ci9e4cts80001p176ca7vk0qx","_id":"ci9e4ctuw000wp176j6u8cthq"},{"post_id":"ci9e4ctux000xp176mj6cwoxf","category_id":"ci9e4cts80001p176ca7vk0qx","_id":"ci9e4ctuy000yp1767hfy42c7"}],"PostTag":[{"post_id":"ci9e4ctt60003p17675q4b9fw","tag_id":"ci9e4ctt70005p176r9dlfpx0","_id":"ci9e4ctt70006p1760n0nu3rs"},{"post_id":"ci9e4ctu4000dp176qgu7g019","tag_id":"ci9e4ctu5000fp176vi5vud8e","_id":"ci9e4ctu5000ip1763aurmvso"},{"post_id":"ci9e4ctu4000dp176qgu7g019","tag_id":"ci9e4ctu5000gp176vk16qasg","_id":"ci9e4ctu5000jp176morr8pbk"},{"post_id":"ci9e4ctur000kp176kyb9lto6","tag_id":"ci9e4ctur000mp176ftbslbgr","_id":"ci9e4ctur000np176dr7sge0j"},{"post_id":"ci9e4ctus000op176hvf5ou0l","tag_id":"ci9e4ctut000qp1766sn2e42u","_id":"ci9e4ctut000rp1767eiieemo"},{"post_id":"ci9e4ctuu000sp176c2vzkjqm","tag_id":"ci9e4ctur000mp176ftbslbgr","_id":"ci9e4ctuv000up176xrhhz3a4"}],"Tag":[{"name":"编程之美","_id":"ci9e4ctt70005p176r9dlfpx0"},{"name":"MacOS","_id":"ci9e4ctu5000fp176vi5vud8e"},{"name":"VIM","_id":"ci9e4ctu5000gp176vk16qasg"},{"name":"BestCoder","_id":"ci9e4ctur000mp176ftbslbgr"},{"name":"HDU","_id":"ci9e4ctut000qp1766sn2e42u"}]}}