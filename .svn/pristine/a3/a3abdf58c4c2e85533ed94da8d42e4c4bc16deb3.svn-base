{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":false},{"_id":"themes/yilia/source/img/delicious.png","path":"img/delicious.png","modified":false},{"_id":"themes/yilia/source/img/coderwall.png","path":"img/coderwall.png","modified":false},{"_id":"themes/yilia/source/img/facebook.png","path":"img/facebook.png","modified":false},{"_id":"themes/yilia/source/img/github.png","path":"img/github.png","modified":false},{"_id":"themes/yilia/source/img/google.png","path":"img/google.png","modified":false},{"_id":"themes/yilia/source/img/img-err.png","path":"img/img-err.png","modified":false},{"_id":"themes/yilia/source/img/img-loading.png","path":"img/img-loading.png","modified":false},{"_id":"themes/yilia/source/img/linkedin.png","path":"img/linkedin.png","modified":false},{"_id":"themes/yilia/source/img/pinboard.png","path":"img/pinboard.png","modified":false},{"_id":"themes/yilia/source/img/rss.png","path":"img/rss.png","modified":false},{"_id":"themes/yilia/source/img/pinterest.png","path":"img/pinterest.png","modified":false},{"_id":"themes/yilia/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":false},{"_id":"themes/yilia/source/img/teveillan.jpg","path":"img/teveillan.jpg","modified":false},{"_id":"themes/yilia/source/img/twitter.png","path":"img/twitter.png","modified":false},{"_id":"themes/yilia/source/img/weibo.png","path":"img/weibo.png","modified":false},{"_id":"themes/yilia/source/js/instagram.js","path":"js/instagram.js","modified":false},{"_id":"themes/yilia/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":false},{"_id":"themes/yilia/source/js/main.js","path":"js/main.js","modified":false},{"_id":"themes/yilia/source/js/script.js","path":"js/script.js","modified":false},{"_id":"themes/yilia/source/css/style.styl","path":"css/style.styl","modified":false},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":false},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":false},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","path":"css/fonts/fontawesome-webfont.svgz","modified":false},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":false},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":false},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":false},{"_id":"themes/yilia/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":false},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":false},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":false},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":false},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":false},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":false},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":false},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":false},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":false},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":false},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":false},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":false},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":false},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":false},{"_id":"themes/yilia/source/assets/blogImg/Thumbs.db","path":"assets/blogImg/Thumbs.db","modified":false},{"_id":"themes/yilia/source/assets/blogImg/border1px.jpg","path":"assets/blogImg/border1px.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/browser-history.jpg","path":"assets/blogImg/browser-history.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/browser-history2.jpg","path":"assets/blogImg/browser-history2.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/bys0.jpg","path":"assets/blogImg/bys0.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/bys1.jpg","path":"assets/blogImg/bys1.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/bys2.jpg","path":"assets/blogImg/bys2.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/bys3.jpg","path":"assets/blogImg/bys3.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/ckxt0.jpg","path":"assets/blogImg/ckxt0.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/ckxt1.jpg","path":"assets/blogImg/ckxt1.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/ckxt2.jpg","path":"assets/blogImg/ckxt2.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/ckxt3.jpg","path":"assets/blogImg/ckxt3.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/ckxt4.jpg","path":"assets/blogImg/ckxt4.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/css3_anm.jpg","path":"assets/blogImg/css3_anm.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/css_hack.jpg","path":"assets/blogImg/css_hack.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/immersion.png","path":"assets/blogImg/immersion.png","modified":false},{"_id":"themes/yilia/source/assets/blogImg/imp_search.jpg","path":"assets/blogImg/imp_search.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/instagram1.jpg","path":"assets/blogImg/instagram1.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/instagram2.jpg","path":"assets/blogImg/instagram2.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/jiugongge1.jpg","path":"assets/blogImg/jiugongge1.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/jiugongge10.jpg","path":"assets/blogImg/jiugongge10.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/jiugongge2.jpg","path":"assets/blogImg/jiugongge2.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/jiugongge3.jpg","path":"assets/blogImg/jiugongge3.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/jiugongge4.jpg","path":"assets/blogImg/jiugongge4.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/jiugongge5.jpg","path":"assets/blogImg/jiugongge5.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/jiugongge6.jpg","path":"assets/blogImg/jiugongge6.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/jiugongge7.jpg","path":"assets/blogImg/jiugongge7.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/jiugongge8.jpg","path":"assets/blogImg/jiugongge8.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/jiugongge9.jpg","path":"assets/blogImg/jiugongge9.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/lijiang.jpg","path":"assets/blogImg/lijiang.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/lock.jpg","path":"assets/blogImg/lock.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/mediator1.jpg","path":"assets/blogImg/mediator1.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/myReader0.jpg","path":"assets/blogImg/myReader0.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/rabbit.jpg","path":"assets/blogImg/rabbit.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/reduce-http.jpg","path":"assets/blogImg/reduce-http.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/safety_001.jpg","path":"assets/blogImg/safety_001.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/safety_002.jpg","path":"assets/blogImg/safety_002.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/safety_003.jpg","path":"assets/blogImg/safety_003.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/safety_004.jpg","path":"assets/blogImg/safety_004.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/safety_005.jpg","path":"assets/blogImg/safety_005.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/up1_tips.jpg","path":"assets/blogImg/up1_tips.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/volunteer1.jpg","path":"assets/blogImg/volunteer1.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/volunteer2.jpg","path":"assets/blogImg/volunteer2.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/volunteer3.jpg","path":"assets/blogImg/volunteer3.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/web_worker1.png","path":"assets/blogImg/web_worker1.png","modified":false},{"_id":"themes/yilia/source/assets/blogImg/web_worker2.png","path":"assets/blogImg/web_worker2.png","modified":false},{"_id":"themes/yilia/source/assets/blogImg/xmas_ico0.jpg","path":"assets/blogImg/xmas_ico0.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/xmas_ico1.jpg","path":"assets/blogImg/xmas_ico1.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/xmas_ico2.jpg","path":"assets/blogImg/xmas_ico2.jpg","modified":false},{"_id":"themes/yilia/source/assets/blogImg/xmas_ico3.jpg","path":"assets/blogImg/xmas_ico3.jpg","modified":false},{"_id":"themes/yilia/source/assets/demo/border1px.html","path":"assets/demo/border1px.html","modified":false},{"_id":"themes/yilia/source/assets/demo/hack_demo.html","path":"assets/demo/hack_demo.html","modified":false},{"_id":"themes/yilia/source/assets/demo/jiugongge_demo.html","path":"assets/demo/jiugongge_demo.html","modified":false},{"_id":"themes/yilia/source/assets/demo/jiugongge_demo2.html","path":"assets/demo/jiugongge_demo2.html","modified":false},{"_id":"themes/yilia/source/assets/demo/jquery.js","path":"assets/demo/jquery.js","modified":false},{"_id":"themes/yilia/source/assets/demo/coffee_pc_demo/pro-con.html","path":"assets/demo/coffee_pc_demo/pro-con.html","modified":false},{"_id":"themes/yilia/source/assets/demo/coffee_pc_demo/pro-con.js","path":"assets/demo/coffee_pc_demo/pro-con.js","modified":false},{"_id":"themes/yilia/source/assets/demo/mediator/demo.html","path":"assets/demo/mediator/demo.html","modified":false},{"_id":"themes/yilia/source/assets/demo/mediator/mediator.js","path":"assets/demo/mediator/mediator.js","modified":false},{"_id":"themes/yilia/source/assets/demo/mediator/sgws.jpg","path":"assets/demo/mediator/sgws.jpg","modified":false},{"_id":"themes/yilia/source/assets/demo/pre_css3_demo/Thumbs.db","path":"assets/demo/pre_css3_demo/Thumbs.db","modified":false},{"_id":"themes/yilia/source/assets/demo/pre_css3_demo/bg.jpg","path":"assets/demo/pre_css3_demo/bg.jpg","modified":false},{"_id":"themes/yilia/source/assets/demo/pre_css3_demo/demo.html","path":"assets/demo/pre_css3_demo/demo.html","modified":false},{"_id":"themes/yilia/source/assets/demo/pre_css3_demo/mhxy.png","path":"assets/demo/pre_css3_demo/mhxy.png","modified":false},{"_id":"themes/yilia/source/assets/demo/gift/index.html","path":"assets/demo/gift/index.html","modified":false},{"_id":"themes/yilia/source/assets/demo/gift/css/index.css","path":"assets/demo/gift/css/index.css","modified":false},{"_id":"themes/yilia/source/assets/demo/gift/css/index.scss","path":"assets/demo/gift/css/index.scss","modified":false},{"_id":"themes/yilia/source/assets/demo/gift/css/reset.css","path":"assets/demo/gift/css/reset.css","modified":false},{"_id":"themes/yilia/source/assets/demo/gift/img/paper-b.jpg","path":"assets/demo/gift/img/paper-b.jpg","modified":false},{"_id":"themes/yilia/source/assets/demo/gift/img/paper.jpg","path":"assets/demo/gift/img/paper.jpg","modified":false},{"_id":"themes/yilia/source/assets/demo/gift/img/shake.png","path":"assets/demo/gift/img/shake.png","modified":false},{"_id":"themes/yilia/source/assets/demo/gift/js/index.main.js","path":"assets/demo/gift/js/index.main.js","modified":false},{"_id":"themes/yilia/source/assets/demo/gift/js/shake.js","path":"assets/demo/gift/js/shake.js","modified":false},{"_id":"themes/yilia/source/assets/demo/gift/js/zepto.min.js","path":"assets/demo/gift/js/zepto.min.js","modified":false},{"_id":"themes/yilia/source/assets/demo/gift/media/gift.ogg","path":"assets/demo/gift/media/gift.ogg","modified":false},{"_id":"themes/yilia/source/assets/demo/my_news_reader/index.html","path":"assets/demo/my_news_reader/index.html","modified":false},{"_id":"themes/yilia/source/assets/demo/my_news_reader/js/main.js","path":"assets/demo/my_news_reader/js/main.js","modified":false},{"_id":"themes/yilia/source/assets/demo/my_news_reader/js/tagConfig.js","path":"assets/demo/my_news_reader/js/tagConfig.js","modified":false}],"Cache":[{"_id":"scaffolds/draft.md","mtime":1430918636000},{"_id":"scaffolds/photo.md","mtime":1430918636000},{"_id":"scaffolds/page.md","mtime":1430918636000},{"_id":"scaffolds/post.md","mtime":1430918636000},{"_id":"source/CNAME","mtime":1430918643000},{"_id":"source/_posts/New-Year.md","mtime":1430918643000},{"_id":"themes/yilia/README.md","mtime":1430918636000},{"_id":"themes/yilia/_config.yml","mtime":1430918842000},{"_id":"themes/yilia/package.json","mtime":1430918636000},{"_id":"themes/yilia/scripts/fancybox.js","mtime":1430918636000},{"_id":"themes/yilia/layout/archive.ejs","mtime":1430918636000},{"_id":"themes/yilia/layout/category.ejs","mtime":1430918636000},{"_id":"themes/yilia/layout/index.ejs","mtime":1430918636000},{"_id":"themes/yilia/layout/layout.ejs","mtime":1430918636000},{"_id":"themes/yilia/layout/post.ejs","mtime":1430918636000},{"_id":"themes/yilia/layout/page.ejs","mtime":1430918636000},{"_id":"themes/yilia/layout/tag.ejs","mtime":1430918636000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","mtime":1430918636000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","mtime":1430918636000},{"_id":"themes/yilia/layout/_partial/archive.ejs","mtime":1430918636000},{"_id":"themes/yilia/layout/_partial/article.ejs","mtime":1430918636000},{"_id":"themes/yilia/layout/_partial/footer.ejs","mtime":1430918636000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","mtime":1430918636000},{"_id":"themes/yilia/layout/_partial/head.ejs","mtime":1430918636000},{"_id":"themes/yilia/layout/_partial/header.ejs","mtime":1430918636000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","mtime":1430918636000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","mtime":1430918636000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","mtime":1430918636000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","mtime":1430918636000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","mtime":1430918636000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","mtime":1430918636000},{"_id":"themes/yilia/layout/_partial/post/share.ejs","mtime":1430918636000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","mtime":1430918636000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","mtime":1430918636000},{"_id":"themes/yilia/source/img/delicious.png","mtime":1430918636000},{"_id":"themes/yilia/source/img/coderwall.png","mtime":1430918636000},{"_id":"themes/yilia/source/img/facebook.png","mtime":1430918636000},{"_id":"themes/yilia/source/img/github.png","mtime":1430918636000},{"_id":"themes/yilia/source/img/google.png","mtime":1430918636000},{"_id":"themes/yilia/source/img/img-err.png","mtime":1430918636000},{"_id":"themes/yilia/source/img/img-loading.png","mtime":1430918636000},{"_id":"themes/yilia/source/img/linkedin.png","mtime":1430918636000},{"_id":"themes/yilia/source/img/pinboard.png","mtime":1430918636000},{"_id":"themes/yilia/source/img/rss.png","mtime":1430918636000},{"_id":"themes/yilia/source/img/pinterest.png","mtime":1430918636000},{"_id":"themes/yilia/source/img/stackoverflow.png","mtime":1430918636000},{"_id":"themes/yilia/source/img/teveillan.jpg","mtime":1430918636000},{"_id":"themes/yilia/source/img/twitter.png","mtime":1430918636000},{"_id":"themes/yilia/source/img/weibo.png","mtime":1430918636000},{"_id":"themes/yilia/source/js/instagram.js","mtime":1430918636000},{"_id":"themes/yilia/source/js/jquery.lazyload.js","mtime":1430918636000},{"_id":"themes/yilia/source/js/main.js","mtime":1430918636000},{"_id":"themes/yilia/source/js/script.js","mtime":1430918636000},{"_id":"themes/yilia/source/css/_extend.styl","mtime":1430918636000},{"_id":"themes/yilia/source/css/_variables.styl","mtime":1430918636000},{"_id":"themes/yilia/source/css/style.styl","mtime":1430918636000},{"_id":"themes/yilia/source/css/_partial/archive.styl","mtime":1430918636000},{"_id":"themes/yilia/source/css/_partial/article.styl","mtime":1430918636000},{"_id":"themes/yilia/source/css/_partial/footer.styl","mtime":1430918636000},{"_id":"themes/yilia/source/css/_partial/header.styl","mtime":1430918636000},{"_id":"themes/yilia/source/css/_partial/highlight.styl","mtime":1430918636000},{"_id":"themes/yilia/source/css/_partial/instagram.styl","mtime":1430918636000},{"_id":"themes/yilia/source/css/_partial/main.styl","mtime":1430918636000},{"_id":"themes/yilia/source/css/_partial/mobile.styl","mtime":1430918636000},{"_id":"themes/yilia/source/css/_partial/page.styl","mtime":1430918636000},{"_id":"themes/yilia/source/css/_partial/share.styl","mtime":1430918636000},{"_id":"themes/yilia/source/css/_partial/tagcloud.styl","mtime":1430918636000},{"_id":"themes/yilia/source/css/_util/grid.styl","mtime":1430918636000},{"_id":"themes/yilia/source/css/_util/mixin.styl","mtime":1430918636000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","mtime":1430918636000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","mtime":1430918636000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","mtime":1430918636000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","mtime":1430918636000},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","mtime":1430918636000},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","mtime":1430918636000},{"_id":"themes/yilia/source/fancybox/blank.gif","mtime":1430918636000},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","mtime":1430918636000},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","mtime":1430918636000},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","mtime":1430918636000},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","mtime":1430918636000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","mtime":1430918636000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","mtime":1430918636000},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","mtime":1430918636000},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","mtime":1430918636000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","mtime":1430918636000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","mtime":1430918636000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","mtime":1430918636000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","mtime":1430918636000},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","mtime":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/Thumbs.db","mtime":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/border1px.jpg","mtime":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/browser-history.jpg","mtime":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/browser-history2.jpg","mtime":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/bys0.jpg","mtime":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/bys1.jpg","mtime":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/bys2.jpg","mtime":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/bys3.jpg","mtime":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/ckxt0.jpg","mtime":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/ckxt1.jpg","mtime":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/ckxt2.jpg","mtime":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/ckxt3.jpg","mtime":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/ckxt4.jpg","mtime":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/css3_anm.jpg","mtime":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/css_hack.jpg","mtime":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/immersion.png","mtime":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/imp_search.jpg","mtime":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/instagram1.jpg","mtime":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/instagram2.jpg","mtime":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/jiugongge1.jpg","mtime":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/jiugongge10.jpg","mtime":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/jiugongge2.jpg","mtime":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/jiugongge3.jpg","mtime":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/jiugongge4.jpg","mtime":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/jiugongge5.jpg","mtime":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/jiugongge6.jpg","mtime":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/jiugongge7.jpg","mtime":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/jiugongge8.jpg","mtime":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/jiugongge9.jpg","mtime":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/lijiang.jpg","mtime":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/lock.jpg","mtime":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/mediator1.jpg","mtime":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/myReader0.jpg","mtime":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/rabbit.jpg","mtime":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/reduce-http.jpg","mtime":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/safety_001.jpg","mtime":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/safety_002.jpg","mtime":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/safety_003.jpg","mtime":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/safety_004.jpg","mtime":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/safety_005.jpg","mtime":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/up1_tips.jpg","mtime":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/volunteer1.jpg","mtime":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/volunteer2.jpg","mtime":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/volunteer3.jpg","mtime":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/web_worker1.png","mtime":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/web_worker2.png","mtime":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/xmas_ico0.jpg","mtime":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/xmas_ico1.jpg","mtime":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/xmas_ico2.jpg","mtime":1430918636000},{"_id":"themes/yilia/source/assets/blogImg/xmas_ico3.jpg","mtime":1430918636000},{"_id":"themes/yilia/source/assets/demo/border1px.html","mtime":1430918636000},{"_id":"themes/yilia/source/assets/demo/hack_demo.html","mtime":1430918636000},{"_id":"themes/yilia/source/assets/demo/jiugongge_demo.html","mtime":1430918636000},{"_id":"themes/yilia/source/assets/demo/jiugongge_demo2.html","mtime":1430918636000},{"_id":"themes/yilia/source/assets/demo/jquery.js","mtime":1430918636000},{"_id":"themes/yilia/source/assets/demo/coffee_pc_demo/pro-con.html","mtime":1430918636000},{"_id":"themes/yilia/source/assets/demo/coffee_pc_demo/pro-con.js","mtime":1430918636000},{"_id":"themes/yilia/source/assets/demo/mediator/demo.html","mtime":1430918636000},{"_id":"themes/yilia/source/assets/demo/mediator/mediator.js","mtime":1430918636000},{"_id":"themes/yilia/source/assets/demo/mediator/sgws.jpg","mtime":1430918636000},{"_id":"themes/yilia/source/assets/demo/pre_css3_demo/Thumbs.db","mtime":1430918636000},{"_id":"themes/yilia/source/assets/demo/pre_css3_demo/bg.jpg","mtime":1430918636000},{"_id":"themes/yilia/source/assets/demo/pre_css3_demo/demo.html","mtime":1430918636000},{"_id":"themes/yilia/source/assets/demo/pre_css3_demo/mhxy.png","mtime":1430918636000},{"_id":"themes/yilia/source/assets/demo/gift/index.html","mtime":1430918636000},{"_id":"themes/yilia/source/assets/demo/gift/css/index.css","mtime":1430918636000},{"_id":"themes/yilia/source/assets/demo/gift/css/index.scss","mtime":1430918636000},{"_id":"themes/yilia/source/assets/demo/gift/css/reset.css","mtime":1430918636000},{"_id":"themes/yilia/source/assets/demo/gift/img/paper-b.jpg","mtime":1430918636000},{"_id":"themes/yilia/source/assets/demo/gift/img/paper.jpg","mtime":1430918636000},{"_id":"themes/yilia/source/assets/demo/gift/img/shake.png","mtime":1430918636000},{"_id":"themes/yilia/source/assets/demo/gift/js/index.main.js","mtime":1430918636000},{"_id":"themes/yilia/source/assets/demo/gift/js/shake.js","mtime":1430918636000},{"_id":"themes/yilia/source/assets/demo/gift/js/zepto.min.js","mtime":1430918636000},{"_id":"themes/yilia/source/assets/demo/gift/media/gift.ogg","mtime":1430918636000},{"_id":"themes/yilia/source/assets/demo/my_news_reader/index.html","mtime":1430918636000},{"_id":"themes/yilia/source/assets/demo/my_news_reader/js/main.js","mtime":1430918636000},{"_id":"themes/yilia/source/assets/demo/my_news_reader/js/tagConfig.js","mtime":1430918636000},{"_id":"scaffolds/algorithm.md","mtime":1430918636000},{"_id":"scaffolds/cf.md","mtime":1430918636000},{"_id":"scaffolds/essay.md","mtime":1430918636000},{"_id":"scaffolds/tc.md","mtime":1430918636000},{"_id":"scaffolds/tech.md","mtime":1430918636000},{"_id":"source/_posts/最短路-SPFA.md","mtime":1430918643000},{"_id":"source/_drafts/new-draft.md","mtime":1430918643000},{"_id":"source/_drafts/最小费用流.md","mtime":1430918643000},{"_id":"source/_posts/网络流.md","mtime":1430918643000},{"_id":"source/_posts/Mac中安装Vim7-4.md","mtime":1430918643000},{"_id":"scaffolds/bc.md","mtime":1430918636000},{"_id":"source/_posts/-转-Manacher算法-回文串处理.md","mtime":1430918643000},{"_id":"source/_posts/BestCoder-Round-25.md","mtime":1430918643000},{"_id":"source/_posts/HDU-5208-Where-is-Bob-Bestcoder-Round38-C题.md","mtime":1430918643000},{"_id":"source/_posts/CDQ分治.md","mtime":1430918643000}],"Category":[{"name":"随笔","_id":"zu4pctdd4swhh3t3","posts":["hh61gffdl3ntz8ed"]},{"name":"模板","_id":"523y7m2eueh5pc1k","posts":[]},{"name":"Algorithm","_id":"sa7ex4uajg10wus6","posts":["t8oba0xt1rz00ifo","bm3an0xj3qa55s6m","uhewykdaugab073r","tckrbk2lq4va2ljt"]},{"name":"Tech","_id":"82hv6ntzei74foze","posts":["lnm14yyf649r6mx6"]},{"name":"红名","_id":"gfm7ob8coc657zv2","posts":["uosts3uvzuhw2fm2","ilh9t48674sb37tz"]}],"Page":[],"Post":[{"title":"New Year","date":1420211789000,"categories":["zu4pctdd4swhh3t3"],"tags":[],"description":"What’t this?","content":"<p>新的一年，要把CF刷红，TC刷红。<br>托福要过，N2看着办吧。。。<br>至于签了百度什么的。。。呵呵呵呵。。。妥妥地不想回去了。。。</p>\n","source":"_posts/New-Year.md","raw":"title: New Year\ndate: 2015-01-02 23:16:29\ncategories: 随笔\ntags: \ndescription: What’t this?\n---\n\n新的一年，要把CF刷红，TC刷红。\n托福要过，N2看着办吧。。。\n至于签了百度什么的。。。呵呵呵呵。。。妥妥地不想回去了。。。\n","slug":"New-Year","updated":1430918643000,"excerpt":"","_id":"hh61gffdl3ntz8ed","comments":true,"layout":"post","photos":[],"link":""},{"title":"最短路 SPFA","categories":["sa7ex4uajg10wus6"],"date":1420356754000,"tags":[],"description":null,"content":"<p>首先，为了简化分析，我们假定图中是没有负环的。<br>如果有负环，则就没有最短路径。</p>\n<blockquote>\n<p>负环：一条从a到a的路径，路径上每条边的边权和为负。</p>\n</blockquote>\n<p>但是SPFA算法是可以判断是否有负环存在的，比较基本的做法是判断每个点进队出队的次数，这个复杂度比较高。其实有一种DFS版的SPFA，用这个来判断是否有负环的效率是非常高的，这个我们后续再讲。</p>\n<p>最短路的算法中都用着一种通用的思路：</p>\n<ul>\n<li>初始化</li>\n<li>松弛操作<br><a id=\"more\"></a><br>初始化自然不用说。<br>最开始还没有进行任何操作，每个点（除了起始点）距离起始点的距离为无穷大（记为dis[i]=INF），起始点到起始点的距离为0（记作dis[start]=0）。</li>\n</ul>\n<p>然后是松弛操作，也是本篇文章的主要部分。<br>松弛操作的要达到的目的是：</p>\n<ul>\n<li><strong> 对于任意点u, 将从起始点到u的最短距离记为dis[u]。 </strong></li>\n<li><strong> 对于点u的任意相邻点v, 满足dis[v] &lt;= dis[u] + d[u,v] </strong></li>\n</ul>\n<blockquote>\n<p>u与v相邻：存在一条边 u-&gt;v</p>\n</blockquote>\n<p>为什么要满足这样一个条件呢？</p>\n<p>拿v点举例。<br>我们知道，一条从起始点s到v点的最短路径不可能是凭空产生的，从起始点到v点的最短路径在两种情况下可能产生：</p>\n<ul>\n<li><strong> s与v相邻，(s,v)这条边就可能（但不是一定）就直接是一条最短路径。</strong></li>\n<li><strong> 有一个点u与v相邻，通过s到u的的最短路径，延伸出一条从s到v得最短路径。 </strong></li>\n</ul>\n<p>对于第一种情况，很明显一次就直接能找到最短路径。</p>\n<p>对于第二种情况，假设到点v的最终最短路径是先从s到u, 再从u到v。<br>在算法执行的过程中，我们不知道此时的dis[u]是否是最短距离。这个都没关系，我们先满足在当前dis[u]的情况下,dis[v]是否小于等于dis[u] + d[u,v]。<br>如果此时的dis[u]是最优解，dis[v]自然也是最优解。<br>如果dis[u]不是最优解，那就往前推，先保证从s到u的最短路径中，u的前一个点x是最优解。如果x不是，再往前推，早晚会推到dis[s]=0，这个妥妥地是最优解了，然后就能保证后面的都是最优解。</p>\n<p>所以，我们的算法流程是这样:</p>\n<ol>\n<li>初始化</li>\n<li>将起始点加入一个队列中</li>\n<li>从队列中取出来一个点u，并将这个点从队列中移除</li>\n<li>对于u所有相邻的点v，看dis[v] 是否小于等于dis[u] + d[u,v]，如果不是（说明这个点还不是最优解，所以它之前更新过的点中仍然有些不是最优解），更新dis[v]=dis[u] + d[u,v]。再看v是否在队列中，如果不是，将v加入队列。</li>\n<li>回到步骤3</li>\n<li>直到队列为空，算法结束，此时的dis均为最优解。</li>\n</ol>\n<p>算法复杂度为O(k * e)，e为边数。k为可变常数，可证明一般情况下k &lt; 2。（我不知道怎么证明的…有兴趣的可以自己查查）</p>\n<p>在这个模板中，为了省内存，我的队列采用的时循环队列的形式。因为每个点最多只能同时在队列里一次，所以这个队列大小为n就足够了。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> SPFA {</div><div class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">int</span> type;</div><div class=\"line\">    <span class=\"keyword\">struct</span> Edge {</div><div class=\"line\">        <span class=\"keyword\">int</span> to, next;</div><div class=\"line\">        type d;</div><div class=\"line\">    }edge[M];</div><div class=\"line\"></div><div class=\"line\">    type dis[N];</div><div class=\"line\">    <span class=\"keyword\">int</span> que[N], head[N], ip;</div><div class=\"line\">    <span class=\"keyword\">bool</span> visit[N];<span class=\"comment\">//标记各点是否在队列中</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span>:</div><div class=\"line\">        SPFA() { init(); }</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">void</span> init() { <span class=\"comment\">//初始化，采用链式前向星建边</span></div><div class=\"line\">            <span class=\"built_in\">memset</span>(head, -<span class=\"number\">1</span>, <span class=\"keyword\">sizeof</span>(head));</div><div class=\"line\">            ip = <span class=\"number\">0</span>;</div><div class=\"line\">        }</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">void</span> add(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> d) {</div><div class=\"line\">            edge[ip].to=v; edge[ip].d=d; edge[ip].next=head[u]; head[u]=ip++;</div><div class=\"line\">        }</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">void</span> spfa(<span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end, <span class=\"keyword\">int</span> num) {</div><div class=\"line\">            <span class=\"built_in\">memset</span>(visit, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(visit));<span class=\"comment\">//清空队列</span></div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;=num; ++i)   dis[i] = INF;<span class=\"comment\">//步骤1</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">int</span> front = -<span class=\"number\">1</span>, tail = -<span class=\"number\">1</span>;</div><div class=\"line\">            dis[start] = <span class=\"number\">0</span>; visit[start] = <span class=\"number\">1</span>; que[++tail] = start;<span class=\"comment\">//步骤2</span></div><div class=\"line\">            <span class=\"keyword\">while</span>(front != tail) {</div><div class=\"line\">                <span class=\"keyword\">if</span>(++front &gt; num)   front -= num;</div><div class=\"line\">                <span class=\"keyword\">int</span> top = que[front];<span class=\"comment\">//步骤3</span></div><div class=\"line\">                visit[top] = <span class=\"number\">0</span>;</div><div class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> p=head[top]; p!=-<span class=\"number\">1</span>; p=edge[p].next) {</div><div class=\"line\">                    <span class=\"keyword\">int</span> to = edge[p].to, temp = dis[top] + edge[p].c;</div><div class=\"line\">                    <span class=\"keyword\">if</span>(dis[to] &gt; temp) {<span class=\"comment\">//步骤4</span></div><div class=\"line\">                        dis[to] = temp;</div><div class=\"line\">                        <span class=\"keyword\">if</span>(!visit[to]) {</div><div class=\"line\">                            <span class=\"keyword\">if</span>(++tail &gt; num)    tail -= num;</div><div class=\"line\">                            que[tail] = to;</div><div class=\"line\">                            viist[to] = <span class=\"number\">1</span>;</div><div class=\"line\">                        }</div><div class=\"line\">                    }</div><div class=\"line\">                }</div><div class=\"line\">            }</div><div class=\"line\">            <span class=\"keyword\">return</span> dis[end];</div><div class=\"line\">        }</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>`</p>\n","source":"_posts/最短路-SPFA.md","raw":"title: 最短路 SPFA\ncategories: Algorithm\ndate: 2015-01-04 15:32:34\ntags:\ndescription:\n---\n首先，为了简化分析，我们假定图中是没有负环的。\n如果有负环，则就没有最短路径。\n> 负环：一条从a到a的路径，路径上每条边的边权和为负。\n\n但是SPFA算法是可以判断是否有负环存在的，比较基本的做法是判断每个点进队出队的次数，这个复杂度比较高。其实有一种DFS版的SPFA，用这个来判断是否有负环的效率是非常高的，这个我们后续再讲。\n\n最短路的算法中都用着一种通用的思路：\n* 初始化\n* 松弛操作\n<!-- more -->\n初始化自然不用说。\n最开始还没有进行任何操作，每个点（除了起始点）距离起始点的距离为无穷大（记为dis[i]=INF），起始点到起始点的距离为0（记作dis[start]=0）。\n\n\n然后是松弛操作，也是本篇文章的主要部分。\n松弛操作的要达到的目的是：\n* ** 对于任意点u, 将从起始点到u的最短距离记为dis[u]。 **\n* ** 对于点u的任意相邻点v, 满足dis[v] <= dis[u] + d[u,v] **\n\n> u与v相邻：存在一条边 u->v\n\n为什么要满足这样一个条件呢？\n\n拿v点举例。\n我们知道，一条从起始点s到v点的最短路径不可能是凭空产生的，从起始点到v点的最短路径在两种情况下可能产生：\n* ** s与v相邻，(s,v)这条边就可能（但不是一定）就直接是一条最短路径。**\n* ** 有一个点u与v相邻，通过s到u的的最短路径，延伸出一条从s到v得最短路径。 **\n\n对于第一种情况，很明显一次就直接能找到最短路径。\n\n对于第二种情况，假设到点v的最终最短路径是先从s到u, 再从u到v。 \n在算法执行的过程中，我们不知道此时的dis[u]是否是最短距离。这个都没关系，我们先满足在当前dis[u]的情况下,dis[v]是否小于等于dis[u] + d[u,v]。\n如果此时的dis[u]是最优解，dis[v]自然也是最优解。\n如果dis[u]不是最优解，那就往前推，先保证从s到u的最短路径中，u的前一个点x是最优解。如果x不是，再往前推，早晚会推到dis[s]=0，这个妥妥地是最优解了，然后就能保证后面的都是最优解。\n\n所以，我们的算法流程是这样:\n1. 初始化\n2. 将起始点加入一个队列中\n3. 从队列中取出来一个点u，并将这个点从队列中移除\n4. 对于u所有相邻的点v，看dis[v] 是否小于等于dis[u] + d[u,v]，如果不是（说明这个点还不是最优解，所以它之前更新过的点中仍然有些不是最优解），更新dis[v]=dis[u] + d[u,v]。再看v是否在队列中，如果不是，将v加入队列。\n5. 回到步骤3\n6. 直到队列为空，算法结束，此时的dis均为最优解。\n\n算法复杂度为O(k * e)，e为边数。k为可变常数，可证明一般情况下k < 2。（我不知道怎么证明的...有兴趣的可以自己查查）\n\n在这个模板中，为了省内存，我的队列采用的时循环队列的形式。因为每个点最多只能同时在队列里一次，所以这个队列大小为n就足够了。\n\n```c++\nclass SPFA {\n    typedef int type;\n    struct Edge {\n        int to, next;\n        type d;\n    }edge[M];\n\n    type dis[N];\n    int que[N], head[N], ip;\n    bool visit[N];//标记各点是否在队列中\n\n    public:\n        SPFA() { init(); }\n\n        void init() { //初始化，采用链式前向星建边\n            memset(head, -1, sizeof(head));\n            ip = 0;\n        }\n\n        void add(int u, int v, int d) {\n            edge[ip].to=v; edge[ip].d=d; edge[ip].next=head[u]; head[u]=ip++;\n        }\n\n        void spfa(int start, int end, int num) {\n            memset(visit, 0, sizeof(visit));//清空队列\n            for(int i=0; i<=num; ++i)   dis[i] = INF;//步骤1\n\n            int front = -1, tail = -1;\n            dis[start] = 0; visit[start] = 1; que[++tail] = start;//步骤2\n            while(front != tail) {\n                if(++front > num)   front -= num;\n                int top = que[front];//步骤3\n                visit[top] = 0;\n                for(int p=head[top]; p!=-1; p=edge[p].next) {\n                    int to = edge[p].to, temp = dis[top] + edge[p].c;\n                    if(dis[to] > temp) {//步骤4\n                        dis[to] = temp;\n                        if(!visit[to]) {\n                            if(++tail > num)    tail -= num;\n                            que[tail] = to;\n                            viist[to] = 1;\n                        }\n                    }\n                }\n            }\n            return dis[end];\n        }\n}\n````\n","slug":"最短路-SPFA","updated":1430918643000,"excerpt":"<p>首先，为了简化分析，我们假定图中是没有负环的。<br>如果有负环，则就没有最短路径。</p>\n<blockquote>\n<p>负环：一条从a到a的路径，路径上每条边的边权和为负。</p>\n</blockquote>\n<p>但是SPFA算法是可以判断是否有负环存在的，比较基本的做法是判断每个点进队出队的次数，这个复杂度比较高。其实有一种DFS版的SPFA，用这个来判断是否有负环的效率是非常高的，这个我们后续再讲。</p>\n<p>最短路的算法中都用着一种通用的思路：</p>\n<ul>\n<li>初始化</li>\n<li>松弛操作<br>","_id":"t8oba0xt1rz00ifo","comments":true,"layout":"post","photos":[],"link":""},{"title":"网络流","categories":["sa7ex4uajg10wus6"],"date":1420347719000,"tags":[],"description":null,"content":"<p>网络流，也被称为最大流。</p>\n<p>模型也非常简单，就是一个管道系统，在有源点，汇点，和一堆有流速限制的管道连接的情况下，问能从源点到汇点传输流量的最大流速是多少。如下图所示。</p>\n<p><img src=\"http://7tszmu.com1.z0.glb.clouddn.com/网络流.png\" alt=\"Alt text\"><br><a id=\"more\"></a><br>假定s为源点，t为汇点，中间各箭头为管道，各管道的流速限制均为1。<br>求最大流的话，很明显，最大流为2。有两条流量：</p>\n<ul>\n<li>s -&gt; 1 -&gt; 3 -&gt; t，流量为1</li>\n<li>s -&gt; 2 -&gt; 4 -&gt; t，流量为1</li>\n</ul>\n<p>现在是因为图比较简单，我们能一眼看出来。我们自然喜欢程序跑出来的结果是这样。</p>\n<p>在程序过程中，自然就是找到一条流量处理一条流量。<br>如果先找到 s -&gt; 1 -&gt; 3 -&gt; t，然后找到 s -&gt; 2 -&gt; 4 -&gt; t，自然皆大欢喜。<br>但是如果程序的第一条直接找到 s -&gt; 1 -&gt; 4 -&gt; t 了呢？这样的最终结果就只有一条流量。</p>\n<p>为了解决这个问题，有人提出了一种叫回退边（后悔边）的概念。<strong> 这个也是本算法的精髓所在。 </strong></p>\n<blockquote>\n<p>后悔边：如果我们根据原图建了一条从u到v，流量为f的边 (u,v)=f。 同时，我们也需要建一条从v到u，流量为0的边 (v,u)=0，这条边我们就称为后悔边。(u,v) 和 (v,u)互为反向边。 </p>\n</blockquote>\n<p>同时，在程序进行过程中，如果我们如果从残余网络中找到一条从s到v的流量为f，在更新的过程中，我们首先要把最终答案加上c，然后我们不仅要把在该流量上的各边的剩余流量减去f，同时还要把流量上各条边的反向边的流量加上f。</p>\n<p>这样做有什么好处呢?</p>\n<p>还是以上图为例，如果我们先找到了 s -&gt; 1 -&gt; 3 -&gt; t，流量为1。我们首先在最终答案中加1，然后在更新的过程中不仅要把 (s,1)、(1,4)、(4,t) 这几条边的剩余流量减1， 还要把 (1,s)、(4,1)、(t,4) 的剩余流量加1。 </p>\n<p>此时的残余网络为：</p>\n<ul>\n<li>(s,1) = 0, (1,s) = 1</li>\n<li>(s,2) = 1, (2,s) = 0</li>\n<li>(1,3) = 1, (3,1) = 0</li>\n<li>(1,4) = 0, (4,1) = 1</li>\n<li>(2,4) = 1, (4,2) = 0</li>\n<li>(3,t ) = 1, (t,3 ) = 0</li>\n<li>(4,t ) = 0, (t,4 ) = 1</li>\n</ul>\n<p>然后我们从残余网络中找流量，<strong>发现此时能找到一条 s -&gt; 2 -&gt; 4 -&gt; 1 -&gt; 3 -&gt; t 的流量了！</strong>然后我们还按之前的方式更新。再找的时候找不到新的流量了，算法结束。此时的结果是和我们之前用肉眼观察的结果是一样的。</p>\n<p>这就是后悔边的神奇之处。</p>\n<p><strong>后悔边，顾名思义，就是给了一条边后悔的权利。在算法过程中，原图的边和后悔边是没有区别的，所以找流量的时候也没有任何区别。</strong></p>\n<p>这条边存在的意义是，还拿刚刚那条 s -&gt; 2 -&gt; 4 -&gt; 1 -&gt; 3这条流量来说。里面存在一条后悔边(4,1)，它的意义是：</p>\n<ul>\n<li><strong> 之前已经更新过的流量中，有一条从4到t的流量<code>4 -&gt; t</code>，这条流量我可以用到。</strong></li>\n<li><strong> 目前的残余网络中，还存在一条从1到s得流量<code>1 -&gt; 3 -&gt; t</code>，这条流量可以替换你之前更新过的流量 <code>1 -&gt; 4 -&gt; t</code>。</strong></li>\n<li><strong> 为什么不能你用<code>1 -&gt; 3 -&gt; t</code>，我用<code>4 -&gt; t</code>呢。这样的得到的总流量多一些，我们来交换吧。</strong></li>\n<li><strong> 你把你的流量退回去，用我给你的。我用你之前的。 至于中间的(4,1)，退回去我也用不上，大不了都不用了吧。</strong></li>\n</ul>\n<p>这样下来，最佳方案就出现了。</p>\n<p>可以发现，在有后悔边存在的情况下，先找哪条流量后找哪条流量就已经不重要了。反正都是可以做修改的。这样的话，只要考虑如何高效地找流量就好了。这个当然不能随便找，有环的话肯定要进入死循环。</p>\n<p>在<strong>Dinic</strong>算法中，我们采用了分层图的形式。分层用BFS来实现。</p>\n<ul>\n<li>首先，将源点的level设为0，并将源点加入队列。</li>\n<li>从队列中取出一个点u，遍历以它为起点还有流量的边，找到点v。如果点v还没被加入队列过，将v的level设为level[u]+1，并将v加入队列。</li>\n<li>回到步骤2，直到队列为空。</li>\n</ul>\n<p>然后我们规定，level为<code>a</code>的点只能向level为<code>a+1</code>的点找流量,这样就能很有效地避免环的出现。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">100</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> M = <span class=\"number\">1e7</span> + <span class=\"number\">100</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF = <span class=\"number\">1e9</span>;</div><div class=\"line\"><span class=\"keyword\">struct</span> Edge{</div><div class=\"line\">    <span class=\"keyword\">int</span> to,next;</div><div class=\"line\">    <span class=\"keyword\">int</span> c;</div><div class=\"line\">}edge[M];</div><div class=\"line\"><span class=\"keyword\">int</span> head[N], level[N], que[N], ip;</div><div class=\"line\"><span class=\"keyword\">void</span> init() {</div><div class=\"line\">    <span class=\"built_in\">memset</span>(head, -<span class=\"number\">1</span>, <span class=\"keyword\">sizeof</span>(head));</div><div class=\"line\">    ip = <span class=\"number\">0</span>;</div><div class=\"line\">}</div><div class=\"line\"><span class=\"keyword\">bool</span> makelevel(<span class=\"keyword\">int</span> s,<span class=\"keyword\">int</span> t) { <span class=\"comment\">//将图分层</span></div><div class=\"line\">    <span class=\"built_in\">memset</span>(level,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(level));</div><div class=\"line\">    <span class=\"keyword\">int</span> num=<span class=\"number\">0</span>;</div><div class=\"line\">    que[num++]=s;</div><div class=\"line\">    level[s]=<span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;num;i++) {</div><div class=\"line\">        <span class=\"keyword\">int</span> top=que[i];</div><div class=\"line\">        <span class=\"keyword\">if</span>(top==t)  <span class=\"keyword\">return</span> <span class=\"number\">1</span>; <span class=\"comment\">//找到t了，后面再找level肯定比t大</span></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=head[top];k!=-<span class=\"number\">1</span>;k=edge[k].next) {</div><div class=\"line\">            <span class=\"keyword\">if</span>(!level[edge[k].to]&&edge[k].c&gt;<span class=\"number\">0</span>) {</div><div class=\"line\">                que[num++]=edge[k].to;</div><div class=\"line\">                level[edge[k].to]=level[top]+<span class=\"number\">1</span>;</div><div class=\"line\">            }</div><div class=\"line\">        }</div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">}</div><div class=\"line\"><span class=\"keyword\">int</span> dfs(<span class=\"keyword\">int</span> now,<span class=\"keyword\">int</span> maxf,<span class=\"keyword\">int</span> t) { <span class=\"comment\">//从残余网络中找流量</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(now==t)  <span class=\"keyword\">return</span> maxf;</div><div class=\"line\">    <span class=\"keyword\">int</span> ret=<span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=head[now];k!=-<span class=\"number\">1</span>;k=edge[k].next) {</div><div class=\"line\">        <span class=\"keyword\">if</span>(edge[k].c&gt;<span class=\"number\">0</span>&&level[edge[k].to]==(level[now]+<span class=\"number\">1</span>)) {</div><div class=\"line\">            <span class=\"keyword\">int</span> c=dfs(edge[k].to,min(maxf-ret,edge[k].c),t);</div><div class=\"line\">            edge[k].c-=c;</div><div class=\"line\">            edge[k^<span class=\"number\">1</span>].c+=c;</div><div class=\"line\">            ret+=c;</div><div class=\"line\">            <span class=\"keyword\">if</span>(ret==maxf)   <span class=\"keyword\">return</span>  ret;</div><div class=\"line\">        }</div><div class=\"line\">    }</div><div class=\"line\">    --level[now]; <span class=\"comment\">//一个优化，说明往level[now]+1找流量已经找不到了。自己就降一个level。</span></div><div class=\"line\">    <span class=\"keyword\">return</span> ret;</div><div class=\"line\">}</div><div class=\"line\"><span class=\"keyword\">int</span> dinic(<span class=\"keyword\">int</span> s,<span class=\"keyword\">int</span> t) {</div><div class=\"line\">    <span class=\"keyword\">int</span>  ans=<span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(makelevel(s,t))   ans+=dfs(s,INF,t);</div><div class=\"line\">    <span class=\"keyword\">return</span> ans;</div><div class=\"line\">}</div><div class=\"line\"><span class=\"keyword\">void</span> add(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> v,<span class=\"keyword\">int</span> c,<span class=\"keyword\">int</span> f) {<span class=\"comment\">//有向边f为0 ,否则为 c</span></div><div class=\"line\">    edge[ip].to=v;edge[ip].c=c;edge[ip].next=head[u];head[u]=ip++;</div><div class=\"line\">    edge[ip].to=u;edge[ip].c=f;edge[ip].next=head[v];head[v]=ip++;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n","source":"_posts/网络流.md","raw":"title: 网络流\ncategories: Algorithm\ndate: 2015-01-04 13:01:59\ntags:\ndescription:\n---\n网络流，也被称为最大流。\n\n模型也非常简单，就是一个管道系统，在有源点，汇点，和一堆有流速限制的管道连接的情况下，问能从源点到汇点传输流量的最大流速是多少。如下图所示。\n\n![Alt text](http://7tszmu.com1.z0.glb.clouddn.com/网络流.png)\n<!-- more -->\n假定s为源点，t为汇点，中间各箭头为管道，各管道的流速限制均为1。\n求最大流的话，很明显，最大流为2。有两条流量：\n*  s -> 1 -> 3 -> t，流量为1\n*  s -> 2 -> 4 -> t，流量为1\n\n现在是因为图比较简单，我们能一眼看出来。我们自然喜欢程序跑出来的结果是这样。\n\n在程序过程中，自然就是找到一条流量处理一条流量。\n如果先找到 s -> 1 -> 3 -> t，然后找到 s -> 2 -> 4 -> t，自然皆大欢喜。\n但是如果程序的第一条直接找到 s -> 1 -> 4 -> t 了呢？这样的最终结果就只有一条流量。\n\n为了解决这个问题，有人提出了一种叫回退边（后悔边）的概念。** 这个也是本算法的精髓所在。 **\n\n> 后悔边：如果我们根据原图建了一条从u到v，流量为f的边 (u,v)=f。 同时，我们也需要建一条从v到u，流量为0的边 (v,u)=0，这条边我们就称为后悔边。(u,v) 和 (v,u)互为反向边。 \n\n同时，在程序进行过程中，如果我们如果从残余网络中找到一条从s到v的流量为f，在更新的过程中，我们首先要把最终答案加上c，然后我们不仅要把在该流量上的各边的剩余流量减去f，同时还要把流量上各条边的反向边的流量加上f。\n\n这样做有什么好处呢?\n\n还是以上图为例，如果我们先找到了 s -> 1 -> 3 -> t，流量为1。我们首先在最终答案中加1，然后在更新的过程中不仅要把 (s,1)、(1,4)、(4,t) 这几条边的剩余流量减1， 还要把 (1,s)、(4,1)、(t,4) 的剩余流量加1。 \n\n此时的残余网络为：\n* (s,1) = 0, (1,s) = 1\n* (s,2) = 1, (2,s) = 0\n* (1,3) = 1, (3,1) = 0\n* (1,4) = 0, (4,1) = 1\n* (2,4) = 1, (4,2) = 0\n* (3,t ) = 1, (t,3 ) = 0\n* (4,t ) = 0, (t,4 ) = 1\n\n然后我们从残余网络中找流量，**发现此时能找到一条 s -> 2 -> 4 -> 1 -> 3 -> t 的流量了！**然后我们还按之前的方式更新。再找的时候找不到新的流量了，算法结束。此时的结果是和我们之前用肉眼观察的结果是一样的。\n\n这就是后悔边的神奇之处。\n\n**后悔边，顾名思义，就是给了一条边后悔的权利。在算法过程中，原图的边和后悔边是没有区别的，所以找流量的时候也没有任何区别。**\n\n这条边存在的意义是，还拿刚刚那条 s -> 2 -> 4 -> 1 -> 3这条流量来说。里面存在一条后悔边(4,1)，它的意义是：\n*   ** 之前已经更新过的流量中，有一条从4到t的流量`4 -> t`，这条流量我可以用到。**\n*   ** 目前的残余网络中，还存在一条从1到s得流量`1 -> 3 -> t`，这条流量可以替换你之前更新过的流量 `1 -> 4 -> t`。**\n*   ** 为什么不能你用`1 -> 3 -> t`，我用`4 -> t`呢。这样的得到的总流量多一些，我们来交换吧。**\n*   ** 你把你的流量退回去，用我给你的。我用你之前的。 至于中间的(4,1)，退回去我也用不上，大不了都不用了吧。**\n\n这样下来，最佳方案就出现了。\n\n可以发现，在有后悔边存在的情况下，先找哪条流量后找哪条流量就已经不重要了。反正都是可以做修改的。这样的话，只要考虑如何高效地找流量就好了。这个当然不能随便找，有环的话肯定要进入死循环。\n\n在**Dinic**算法中，我们采用了分层图的形式。分层用BFS来实现。\n*   首先，将源点的level设为0，并将源点加入队列。\n*   从队列中取出一个点u，遍历以它为起点还有流量的边，找到点v。如果点v还没被加入队列过，将v的level设为level[u]+1，并将v加入队列。\n*   回到步骤2，直到队列为空。\n\n然后我们规定，level为`a`的点只能向level为`a+1`的点找流量,这样就能很有效地避免环的出现。\n```c++\nconst int N = 1e5 + 100;\nconst int M = 1e7 + 100;\nconst int INF = 1e9;\nstruct Edge{\n    int to,next;\n    int c;\n}edge[M];\nint head[N], level[N], que[N], ip;\nvoid init() {\n    memset(head, -1, sizeof(head));\n    ip = 0;\n}\nbool makelevel(int s,int t) { //将图分层\n    memset(level,0,sizeof(level));\n    int num=0;\n    que[num++]=s;\n    level[s]=1;\n    for(int i=0;i<num;i++) {\n        int top=que[i];\n        if(top==t)  return 1; //找到t了，后面再找level肯定比t大\n        for(int k=head[top];k!=-1;k=edge[k].next) {\n            if(!level[edge[k].to]&&edge[k].c>0) {\n                que[num++]=edge[k].to;\n                level[edge[k].to]=level[top]+1;\n            }\n        }\n    }\n    return 0;\n}\nint dfs(int now,int maxf,int t) { //从残余网络中找流量\n    if(now==t)  return maxf;\n    int ret=0;\n    for(int k=head[now];k!=-1;k=edge[k].next) {\n        if(edge[k].c>0&&level[edge[k].to]==(level[now]+1)) {\n            int c=dfs(edge[k].to,min(maxf-ret,edge[k].c),t);\n            edge[k].c-=c;\n            edge[k^1].c+=c;\n            ret+=c;\n            if(ret==maxf)   return  ret;\n        }\n    }\n    --level[now]; //一个优化，说明往level[now]+1找流量已经找不到了。自己就降一个level。\n    return ret;\n}\nint dinic(int s,int t) {\n    int  ans=0;\n    while(makelevel(s,t))   ans+=dfs(s,INF,t);\n    return ans;\n}\nvoid add(int u,int v,int c,int f) {//有向边f为0 ,否则为 c\n    edge[ip].to=v;edge[ip].c=c;edge[ip].next=head[u];head[u]=ip++;\n    edge[ip].to=u;edge[ip].c=f;edge[ip].next=head[v];head[v]=ip++;\n}\n```\n","slug":"网络流","updated":1430918643000,"excerpt":"<p>网络流，也被称为最大流。</p>\n<p>模型也非常简单，就是一个管道系统，在有源点，汇点，和一堆有流速限制的管道连接的情况下，问能从源点到汇点传输流量的最大流速是多少。如下图所示。</p>\n<p><img src=\"http://7tszmu.com1.z0.glb.clouddn.com/网络流.png\" alt=\"Alt text\"><br>","_id":"bm3an0xj3qa55s6m","comments":true,"layout":"post","photos":[],"link":""},{"title":"(转) Mac中安装Vim7.4","categories":["82hv6ntzei74foze"],"date":1420606731000,"tags":["mrfrsxi5yfcw931g","ofh76mxkkzl3ffjk"],"description":null,"content":"<p>Mac本身其实是预装了Vim的，但是目前的系统中都是Vim7.3版本的，而最新的Vim已经是7.4版了，因此为了能够使用最新版的vim，必须要对Mac中的vim要么升级，要么重装。在折腾过程中，遇到了一些问题，这里记录，以鉴后人。</p>\n<p><a id=\"more\"></a></p>\n<h1 id=\"可选方案\"><strong>可选方案</strong></h1>\n<p><strong>升级原生的Vim7.3</strong><br> 这种方法貌似是最”干净”的，不会引入其他任何多余的东西，对于有洁癖的人这应该是一种比较好的方案。但是，这个方案也有缺点，那就是它会覆盖原生的Vim，会改变系统的默认设置，并且一旦升级过程中出现了问题，那你就再也没有可用的vim了。另外一个问题是，以后当你系统升级的时候，很有可能你自己的vim又会被新系统的vim给覆盖，这样会比较麻烦。</p>\n<p><strong>使用MacVim</strong><br>这是一种比较好的方案，Vim官网上也是推荐使用这种方案的，MacVim是针对Mac系统特别定制的Vim版本，安装过程也很简单，网上一搜一大把。它功能上和vim完全一致，不会有任何的问题。要说这种方案其实已经算是一个完美的解决方案了，但是它有一点不太方便的地方，那就是不能直接在终端中使用vim，每次使用MacVim的时候都会单独开启一个窗口，有点类似于windows中的gvim。而我个人是比较习惯在终端中写代码的，因此这个方案还是不能满足我的需求。</p>\n<p><strong>自己编译</strong><br>这是一种终极的方案，但是自己编译的时候注意要手动更改默认的安装目录，不然它就会覆盖原生的vim7.3，这样就会变成第一种方案了。将vim7.4安装在其他目录，然后在.bash_profile中添加一个vim命令的别名，将其指向新安装的vim7.4的目录，而不是原生的vim7.3目录。这个方案就能在终端中直接使用vim7.4了，并且不会对原生的vim7.3又任何影响。这个方案唯一的缺点大概就是会在系统中产生两个不同版本的vim了，这也许对一些有洁癖的人是难以接受的。</p>\n<p>我自己最终选择了第三套方案，也就是自己编译新版本的vim.</p>\n<h1 id=\"重新编译\"><strong>重新编译</strong></h1>\n<p>好了，现在让我们开始折腾吧。</p>\n<p>首先上vim的官网下载vim7.4的源文件。（<a href=\"http://www.vim.org/sources.ph\" target=\"_blank\" rel=\"external\">下载链接</a>）</p>\n<p>新建目录<code>/opt/local</code>，这个目录就是用来存放我们新安装的vim7.4的，你也可以建立其他的目录，这里只是一个示例。</p>\n<p>进入vim的源文件目录中，在终端中运行命令:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./configure --with-features=huge --enable-pythoninterp=yes  --enable-cscope --enable-fontset --enable-perlinterp --enable-rubyinterp --with-python-config-dir=/usr/lib/python2.<span class=\"number\">6</span>/config --prefix=/opt/local</div></pre></td></tr></table></figure>\n\n<p>这个命令是完成对vim的一些配置选项，启用了python和ruby的支持特性，这还是比较重要的，因为vim中有些插件会使用python和ruby的，如果没有开启这些特性，有些插件是无法运行的。在这些配置命令中，最后一个<code>--prefix=/opt/local</code>是用来指明安装目录的，你也可以修改成你自己的目录。</p>\n<p>在写配置命令的时候，需要注意的是，不能写上<code>--enable-gui</code>，这是开启gui特性的，但是我们是在终端环境下安装的，因此不能开启这个特性，否则会出现编译错误。</p>\n<p>在终端中执行<code>make</code>命令。在make过程中，会出现一个错误，如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">:info:build os_unix.c:<span class=\"number\">830</span>:<span class=\"number\">46</span>: warning: declaration of <span class=\"string\">'struct sigaltstack'</span> will not be visible outside of this function [-Wvisibility]</div><div class=\"line\">:info:build         extern int sigaltstack __ARGS((const struct sigaltstack *ss, struct sigaltstack *oss));</div><div class=\"line\">:info:build                                                     ^</div><div class=\"line\">:info:build ./os_unix.h:<span class=\"number\">88</span>:<span class=\"number\">21</span>: note: expanded from macro <span class=\"string\">'__ARGS'</span></div><div class=\"line\">:info:build <span class=\"comment\">#  define __ARGS(x) x</span></div><div class=\"line\">:info:build                     ^</div><div class=\"line\">:info:build os_unix.c:<span class=\"number\">830</span>:<span class=\"number\">13</span>: error: conflicting types <span class=\"keyword\">for</span> <span class=\"string\">'sigaltstack'</span></div><div class=\"line\">:info:build         extern int sigaltstack __ARGS((const struct sigaltstack *ss, struct sigaltstack *oss));</div><div class=\"line\">:info:build                    ^</div><div class=\"line\">:info:build /usr/include/signal.h:<span class=\"number\">89</span>:<span class=\"number\">5</span>: note: previous declaration is here</div><div class=\"line\">:info:build int     sigaltstack(const stack_t * __restrict, stack_t * __restrict)  __DARWIN_ALIAS(sigaltstack);</div><div class=\"line\">:info:build         ^</div><div class=\"line\">:info:build <span class=\"number\">1</span> warning and <span class=\"number\">1</span> error generated.</div><div class=\"line\">:info:build make[<span class=\"number\">1</span>]: *** [objects/os_unix.o] Error <span class=\"number\">1</span></div><div class=\"line\">:info:build make[<span class=\"number\">1</span>]: *** Waiting <span class=\"keyword\">for</span> unfinished jobs….)</div></pre></td></tr></table></figure>\n\n<p>解决方案也很简单，只需要在os_unix.h(src文件夹中)中加上<code>#include &lt;AvailabilityMacros.h&gt;</code>就可以了。</p>\n<p>执行<code>make install</code>.执行完成之后，vim7.4就安装完成了。</p>\n<p>添加vim命令的别名，在.bash_profile中添加一行<code>alias vim=&#39;/opt/local/bin/vim&#39;</code>，然后在终端中执行<code>source ~/.bash_profile</code></p>\n<p>好了，现在你的Mac系统已经安装好了vim7.4了，现在可以开始愉快的工作了。</p>\n<p>参考资料<br><a href=\"http://stackoverflow.com/questions/7211820/update-built-in-vim-on-mac-os-x\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/7211820/update-built-in-vim-on-mac-os-x</a><br><a href=\"http://www.jokerlin.us/2014/04/13/Vim74.html\" target=\"_blank\" rel=\"external\">http://www.jokerlin.us/2014/04/13/Vim74.html</a><br><a href=\"http://trac.macports.org/ticket/41774\" target=\"_blank\" rel=\"external\">http://trac.macports.org/ticket/41774</a></p>\n<p>声明:本文采用<code>BY-NC-SA</code>协议进行授权.转载请注明: <a href=\"http://zhouyichu.com/vim/Vim-in-Mac.html\" target=\"_blank\" rel=\"external\">Mac中安装Vim7.4</a><br>转自:Flyaway<br>原文链接: <a href=\"http://zhouyichu.com/vim/Vim-in-Mac.html\" target=\"_blank\" rel=\"external\">http://zhouyichu.com/vim/Vim-in-Mac.html</a></p>\n","source":"_posts/Mac中安装Vim7-4.md","raw":"title: (转) Mac中安装Vim7.4\ncategories: Tech\ndate: 2015-01-07 12:58:51\ntags: [MacOS,VIM]\ndescription:\n---\nMac本身其实是预装了Vim的，但是目前的系统中都是Vim7.3版本的，而最新的Vim已经是7.4版了，因此为了能够使用最新版的vim，必须要对Mac中的vim要么升级，要么重装。在折腾过程中，遇到了一些问题，这里记录，以鉴后人。\n\n<!-- more -->\n# **可选方案**\n\n**升级原生的Vim7.3**\n 这种方法貌似是最”干净”的，不会引入其他任何多余的东西，对于有洁癖的人这应该是一种比较好的方案。但是，这个方案也有缺点，那就是它会覆盖原生的Vim，会改变系统的默认设置，并且一旦升级过程中出现了问题，那你就再也没有可用的vim了。另外一个问题是，以后当你系统升级的时候，很有可能你自己的vim又会被新系统的vim给覆盖，这样会比较麻烦。\n\n**使用MacVim**\n这是一种比较好的方案，Vim官网上也是推荐使用这种方案的，MacVim是针对Mac系统特别定制的Vim版本，安装过程也很简单，网上一搜一大把。它功能上和vim完全一致，不会有任何的问题。要说这种方案其实已经算是一个完美的解决方案了，但是它有一点不太方便的地方，那就是不能直接在终端中使用vim，每次使用MacVim的时候都会单独开启一个窗口，有点类似于windows中的gvim。而我个人是比较习惯在终端中写代码的，因此这个方案还是不能满足我的需求。\n\n**自己编译**\n这是一种终极的方案，但是自己编译的时候注意要手动更改默认的安装目录，不然它就会覆盖原生的vim7.3，这样就会变成第一种方案了。将vim7.4安装在其他目录，然后在.bash_profile中添加一个vim命令的别名，将其指向新安装的vim7.4的目录，而不是原生的vim7.3目录。这个方案就能在终端中直接使用vim7.4了，并且不会对原生的vim7.3又任何影响。这个方案唯一的缺点大概就是会在系统中产生两个不同版本的vim了，这也许对一些有洁癖的人是难以接受的。\n\n我自己最终选择了第三套方案，也就是自己编译新版本的vim.\n\n\n# **重新编译**\n\n好了，现在让我们开始折腾吧。\n\n首先上vim的官网下载vim7.4的源文件。（[下载链接](http://www.vim.org/sources.ph)）\n\n新建目录`/opt/local`，这个目录就是用来存放我们新安装的vim7.4的，你也可以建立其他的目录，这里只是一个示例。\n\n进入vim的源文件目录中，在终端中运行命令:\n```bash\n./configure --with-features=huge --enable-pythoninterp=yes  --enable-cscope --enable-fontset --enable-perlinterp --enable-rubyinterp --with-python-config-dir=/usr/lib/python2.6/config --prefix=/opt/local\n```\n这个命令是完成对vim的一些配置选项，启用了python和ruby的支持特性，这还是比较重要的，因为vim中有些插件会使用python和ruby的，如果没有开启这些特性，有些插件是无法运行的。在这些配置命令中，最后一个`--prefix=/opt/local`是用来指明安装目录的，你也可以修改成你自己的目录。\n\n在写配置命令的时候，需要注意的是，不能写上`--enable-gui`，这是开启gui特性的，但是我们是在终端环境下安装的，因此不能开启这个特性，否则会出现编译错误。\n\n在终端中执行`make`命令。在make过程中，会出现一个错误，如下所示：\n```bash\n:info:build os_unix.c:830:46: warning: declaration of 'struct sigaltstack' will not be visible outside of this function [-Wvisibility]\n:info:build         extern int sigaltstack __ARGS((const struct sigaltstack *ss, struct sigaltstack *oss));\n:info:build                                                     ^\n:info:build ./os_unix.h:88:21: note: expanded from macro '__ARGS'\n:info:build #  define __ARGS(x) x\n:info:build                     ^\n:info:build os_unix.c:830:13: error: conflicting types for 'sigaltstack'\n:info:build         extern int sigaltstack __ARGS((const struct sigaltstack *ss, struct sigaltstack *oss));\n:info:build                    ^\n:info:build /usr/include/signal.h:89:5: note: previous declaration is here\n:info:build int     sigaltstack(const stack_t * __restrict, stack_t * __restrict)  __DARWIN_ALIAS(sigaltstack);\n:info:build         ^\n:info:build 1 warning and 1 error generated.\n:info:build make[1]: *** [objects/os_unix.o] Error 1\n:info:build make[1]: *** Waiting for unfinished jobs….)\n```\n解决方案也很简单，只需要在os_unix.h(src文件夹中)中加上`#include <AvailabilityMacros.h>`就可以了。\n\n执行`make install`.执行完成之后，vim7.4就安装完成了。\n\n添加vim命令的别名，在.bash_profile中添加一行`alias vim='/opt/local/bin/vim'`，然后在终端中执行`source ~/.bash_profile`\n\n好了，现在你的Mac系统已经安装好了vim7.4了，现在可以开始愉快的工作了。\n\n参考资料\nhttp://stackoverflow.com/questions/7211820/update-built-in-vim-on-mac-os-x\nhttp://www.jokerlin.us/2014/04/13/Vim74.html\nhttp://trac.macports.org/ticket/41774\n\n声明:本文采用`BY-NC-SA`协议进行授权.转载请注明: [Mac中安装Vim7.4](http://zhouyichu.com/vim/Vim-in-Mac.html)\n转自:Flyaway\n原文链接: [http://zhouyichu.com/vim/Vim-in-Mac.html](http://zhouyichu.com/vim/Vim-in-Mac.html)\n","slug":"Mac中安装Vim7-4","updated":1430918643000,"excerpt":"<p>Mac本身其实是预装了Vim的，但是目前的系统中都是Vim7.3版本的，而最新的Vim已经是7.4版了，因此为了能够使用最新版的vim，必须要对Mac中的vim要么升级，要么重装。在折腾过程中，遇到了一些问题，这里记录，以鉴后人。</p>\n<p>","_id":"lnm14yyf649r6mx6","comments":true,"layout":"post","photos":[],"link":""},{"title":"[转] Manacher算法-回文串处理","categories":["sa7ex4uajg10wus6"],"date":1420775139000,"tags":[],"description":null,"content":"<p><strong>Manacher</strong>算法是查找一个字符串的最长回文子串的线性算法。<br>在介绍算法之前，首先介绍一下什么是回文串，所谓回文串，简单来说就是正着读和反着读都是一样的字符串，比如abba，noon等等，一个字符串的最长回文子串即为这个字符串的子串中，是回文串的最长的那个。<br>计算字符串的最长回文字串最简单的算法就是枚举该字符串的每一个子串，并且判断这个子串是否为回文串，这个算法的时间复杂度为O(n^3)的，显然无法令人满意，稍微优化的一个算法是枚举回文串的中点，这里要分为两种情况，一种是回文串长度是奇数的情况，另一种是回文串长度是偶数的情况，枚举中点再判断是否是回文串，这样能把算法的时间复杂度降为O(n^2)，但是当n比较大的时候仍然无法令人满意，Manacher算法可以在线性时间复杂度内求出一个字符串的最长回文字串，达到了理论上的下界。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"Manacher算法原理与实现\">Manacher算法原理与实现</h1>\n<p>下面介绍Manacher算法的原理与步骤。<br>首先，Manacher算法提供了一种巧妙地办法，将长度为奇数的回文串和长度为偶数的回文串一起考虑，具体做法是，在原字符串的每个相邻两个字符中间插入一个分隔符，同时在首尾也要添加一个分隔符，分隔符的要求是不在原串中出现，一般情况下可以用#号。下面举一个例子：<br><img src=\"http://7tszmu.com1.z0.glb.clouddn.com/Manacher-1.png\" alt=\"\"></p>\n<h2 id=\"Len数组简介与性质\">Len数组简介与性质</h2>\n<p>Manacher算法用一个辅助数组Len[i]表示以字符T[i]为中心的最长回文字串的最右字符到T[i]的长度，比如以T[i]为中心的最长回文字串是T[l,r],那么Len[i]=r-i+1。<br>对于上面的例子，可以得出Len[i]数组为:</p>\n<p><img src=\"http://7tszmu.com1.z0.glb.clouddn.com/Manacher-2.png\" alt=\"\"></p>\n<p>Len数组有一个性质，那就是Len[i]-1就是该回文子串在原字符串S中的长度，至于证明，首先在转换得到的字符串T中，所有的回文字串的长度都为奇数，那么对于以T[i]为中心的最长回文字串，其长度就为2*Len[i]-1,经过观察可知，T中所有的回文子串，其中分隔符的数量一定比其他字符的数量多1，也就是有Len[i]个分隔符，剩下Len[i]-1个字符来自原字符串，所以该回文串在原字符串中的长度就为Len[i]-1。<br>有了这个性质，那么原问题就转化为求所有的Len[i]。下面介绍如何在线性时间复杂度内求出所有的Len。</p>\n<h2 id=\"Len数组的计算\">Len数组的计算</h2>\n<p>首先从左往右依次计算Len[i]，当计算Len[i]时，Len<a href=\"0&lt;=j&lt;i\">j</a>已经计算完毕。设P为之前计算中最长回文子串的右端点的最大值，并且设取得这个最大值的位置为po，分两种情况：<br>第一种情况：i&lt;=P<br>那么找到i相对于po的对称位置，设为j，那么如果Len[j]&lt;P-i，如下图：</p>\n<p><img src=\"http://7tszmu.com1.z0.glb.clouddn.com/Manacher-3.png\" alt=\"\"></p>\n<p>那么说明以j为中心的回文串一定在以po为中心的回文串的内部，且j和i关于位置po对称，由回文串的定义可知，一个回文串反过来还是一个回文串，所以以i为中心的回文串的长度至少和以j为中心的回文串一样，即Len[i]&gt;=Len[j]。因为Len[j]<p-i,所以说i+len[j]<p。由对称性可知len[i]=len[j]。 如果len[j]=\"\">=P-i,由对称性，说明以i为中心的回文串可能会延伸到P之外，而大于P的部分我们还没有进行匹配，所以要从P+1位置开始一个一个进行匹配，直到发生失配，从而更新P和对应的po以及Len[i]。</p-i,所以说i+len[j]<p。由对称性可知len[i]=len[j]。></p>\n<p><img src=\"http://7tszmu.com1.z0.glb.clouddn.com/Manacher-4.png\" alt=\"\"></p>\n<p>第二种情况: i&gt;P<br>如果i比P还要大，说明对于中点为i的回文串还一点都没有匹配，这个时候，就只能老老实实地一个一个匹配了，匹配完成后要更新P的位置和对应的po以及Len[i]。</p>\n<p><img src=\"http://7tszmu.com1.z0.glb.clouddn.com/Manacher-5.png\" alt=\"\"></p>\n<h1 id=\"时间复杂度分析\">时间复杂度分析</h1>\n<p>Manacher算法的时间复杂度分析和Z算法类似，因为算法只有遇到还没有匹配的位置时才进行匹配，已经匹配过的位置不再进行匹配，所以对于T字符串中的每一个位置，只进行一次匹配，所以Manacher算法的总体时间复杂度为O(n)，其中n为T字符串的长度，由于T的长度事实上是S的两倍，所以时间复杂度依然是线性的。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAX_LEN = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> Len[MAX_LEN&lt;&lt;<span class=\"number\">1</span>]; <span class=\"comment\">//记录算法完成后以i点为中心最长回文串向左向右延伸的半径</span></div><div class=\"line\"><span class=\"keyword\">struct</span> Manacher {</div><div class=\"line\">    <span class=\"keyword\">char</span> tmp_str[MAX_LEN&lt;&lt;<span class=\"number\">1</span>]; <span class=\"comment\">//记录预处理过后的字符串</span></div><div class=\"line\">    <span class=\"keyword\">int</span> init(<span class=\"keyword\">char</span> *s) { <span class=\"comment\">//在solve中就直接调用了。对原串进行预处理。</span></div><div class=\"line\">        <span class=\"keyword\">int</span> len = <span class=\"built_in\">strlen</span>(s);</div><div class=\"line\">        <span class=\"keyword\">int</span> id = <span class=\"number\">0</span>;</div><div class=\"line\">        tmp_str[id++] = <span class=\"string\">'#'</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;len; ++i) {</div><div class=\"line\">            tmp_str[id++] = s[i];</div><div class=\"line\">            tmp_str[id++] = <span class=\"string\">'#'</span>;</div><div class=\"line\">        }</div><div class=\"line\">        tmp_str[id] = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> id; <span class=\"comment\">//此时的id即为处理过后的字符串长度</span></div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">void</span> solve(<span class=\"keyword\">char</span> *s) { <span class=\"comment\">//从这开始处理</span></div><div class=\"line\">        <span class=\"keyword\">int</span> len = init(s);</div><div class=\"line\">        <span class=\"keyword\">int</span> max_r = -<span class=\"number\">1</span>, max_id = -<span class=\"number\">1</span>; <span class=\"comment\">// 最右能到得地方，以及最右时的中心点id</span></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;len; ++i) {</div><div class=\"line\">            <span class=\"keyword\">if</span>(max_r &gt; i)   Len[i] = min(max_r - i, Len[<span class=\"number\">2</span> * max_id - i]);</div><div class=\"line\">            <span class=\"keyword\">else</span> Len[i] = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">while</span>(i - Len[i] &gt;= <span class=\"number\">0</span> && i + Len[i] &lt; len && tmp_str[i - Len[i]] == tmp_str[i + Len[i]])</div><div class=\"line\">                ++Len[i];</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span>(i + Len[i] &gt; max_r) {</div><div class=\"line\">                max_r = i + Len[i];</div><div class=\"line\">                max_id = i;</div><div class=\"line\">            }</div><div class=\"line\">        }</div><div class=\"line\">    }</div><div class=\"line\">};</div></pre></td></tr></table></figure>\n\n<p>转自：<a href=\"http://blog.csdn.net/dyx404514/article/details/42061017\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/dyx404514/article/details/42061017</a><br>作者：dyx心心</p>\n","source":"_posts/-转-Manacher算法-回文串处理.md","raw":"title: \"[转] Manacher算法-回文串处理\"\ncategories: Algorithm\ndate: 2015-01-09 11:45:39\ntags:\ndescription:\n---\n**Manacher**算法是查找一个字符串的最长回文子串的线性算法。\n在介绍算法之前，首先介绍一下什么是回文串，所谓回文串，简单来说就是正着读和反着读都是一样的字符串，比如abba，noon等等，一个字符串的最长回文子串即为这个字符串的子串中，是回文串的最长的那个。\n计算字符串的最长回文字串最简单的算法就是枚举该字符串的每一个子串，并且判断这个子串是否为回文串，这个算法的时间复杂度为O(n^3)的，显然无法令人满意，稍微优化的一个算法是枚举回文串的中点，这里要分为两种情况，一种是回文串长度是奇数的情况，另一种是回文串长度是偶数的情况，枚举中点再判断是否是回文串，这样能把算法的时间复杂度降为O(n^2)，但是当n比较大的时候仍然无法令人满意，Manacher算法可以在线性时间复杂度内求出一个字符串的最长回文字串，达到了理论上的下界。\n\n<!-- more -->\n\n#Manacher算法原理与实现\n\n下面介绍Manacher算法的原理与步骤。\n首先，Manacher算法提供了一种巧妙地办法，将长度为奇数的回文串和长度为偶数的回文串一起考虑，具体做法是，在原字符串的每个相邻两个字符中间插入一个分隔符，同时在首尾也要添加一个分隔符，分隔符的要求是不在原串中出现，一般情况下可以用#号。下面举一个例子：\n![](http://7tszmu.com1.z0.glb.clouddn.com/Manacher-1.png)\n\n## Len数组简介与性质\nManacher算法用一个辅助数组Len[i]表示以字符T[i]为中心的最长回文字串的最右字符到T[i]的长度，比如以T[i]为中心的最长回文字串是T[l,r],那么Len[i]=r-i+1。\n对于上面的例子，可以得出Len[i]数组为:\n\n![](http://7tszmu.com1.z0.glb.clouddn.com/Manacher-2.png)\n\nLen数组有一个性质，那就是Len[i]-1就是该回文子串在原字符串S中的长度，至于证明，首先在转换得到的字符串T中，所有的回文字串的长度都为奇数，那么对于以T[i]为中心的最长回文字串，其长度就为2*Len[i]-1,经过观察可知，T中所有的回文子串，其中分隔符的数量一定比其他字符的数量多1，也就是有Len[i]个分隔符，剩下Len[i]-1个字符来自原字符串，所以该回文串在原字符串中的长度就为Len[i]-1。\n有了这个性质，那么原问题就转化为求所有的Len[i]。下面介绍如何在线性时间复杂度内求出所有的Len。\n\n## Len数组的计算\n\n首先从左往右依次计算Len[i]，当计算Len[i]时，Len[j](0<=j<i)已经计算完毕。设P为之前计算中最长回文子串的右端点的最大值，并且设取得这个最大值的位置为po，分两种情况：\n第一种情况：i<=P\n那么找到i相对于po的对称位置，设为j，那么如果Len[j]<P-i，如下图：\n\n![](http://7tszmu.com1.z0.glb.clouddn.com/Manacher-3.png)\n\n那么说明以j为中心的回文串一定在以po为中心的回文串的内部，且j和i关于位置po对称，由回文串的定义可知，一个回文串反过来还是一个回文串，所以以i为中心的回文串的长度至少和以j为中心的回文串一样，即Len[i]>=Len[j]。因为Len[j]<P-i,所以说i+Len[j]<P。由对称性可知Len[i]=Len[j]。\n如果Len[j]>=P-i,由对称性，说明以i为中心的回文串可能会延伸到P之外，而大于P的部分我们还没有进行匹配，所以要从P+1位置开始一个一个进行匹配，直到发生失配，从而更新P和对应的po以及Len[i]。\n\n![](http://7tszmu.com1.z0.glb.clouddn.com/Manacher-4.png)\n\n第二种情况: i>P\n如果i比P还要大，说明对于中点为i的回文串还一点都没有匹配，这个时候，就只能老老实实地一个一个匹配了，匹配完成后要更新P的位置和对应的po以及Len[i]。\n\n![](http://7tszmu.com1.z0.glb.clouddn.com/Manacher-5.png)\n\n# 时间复杂度分析\n\nManacher算法的时间复杂度分析和Z算法类似，因为算法只有遇到还没有匹配的位置时才进行匹配，已经匹配过的位置不再进行匹配，所以对于T字符串中的每一个位置，只进行一次匹配，所以Manacher算法的总体时间复杂度为O(n)，其中n为T字符串的长度，由于T的长度事实上是S的两倍，所以时间复杂度依然是线性的。\n\n```c++\nconst int MAX_LEN = 1e5 + 10;\n\nint Len[MAX_LEN<<1]; //记录算法完成后以i点为中心最长回文串向左向右延伸的半径\nstruct Manacher {\n    char tmp_str[MAX_LEN<<1]; //记录预处理过后的字符串\n    int init(char *s) { //在solve中就直接调用了。对原串进行预处理。\n        int len = strlen(s);\n        int id = 0;\n        tmp_str[id++] = '#';\n        for(int i=0; i<len; ++i) {\n            tmp_str[id++] = s[i];\n            tmp_str[id++] = '#';\n        }\n        tmp_str[id] = '\\0';\n        return id; //此时的id即为处理过后的字符串长度\n    }\n\n\n    void solve(char *s) { //从这开始处理\n        int len = init(s);\n        int max_r = -1, max_id = -1; // 最右能到得地方，以及最右时的中心点id\n        for(int i=0; i<len; ++i) {\n            if(max_r > i)   Len[i] = min(max_r - i, Len[2 * max_id - i]);\n            else Len[i] = 1;\n\n            while(i - Len[i] >= 0 && i + Len[i] < len && tmp_str[i - Len[i]] == tmp_str[i + Len[i]])\n                ++Len[i];\n\n            if(i + Len[i] > max_r) {\n                max_r = i + Len[i];\n                max_id = i;\n            }\n        }\n    }\n};\n```\n\n转自：[http://blog.csdn.net/dyx404514/article/details/42061017](http://blog.csdn.net/dyx404514/article/details/42061017)\n作者：dyx心心\n\n","slug":"-转-Manacher算法-回文串处理","updated":1430918643000,"excerpt":"<p><strong>Manacher</strong>算法是查找一个字符串的最长回文子串的线性算法。<br>在介绍算法之前，首先介绍一下什么是回文串，所谓回文串，简单来说就是正着读和反着读都是一样的字符串，比如abba，noon等等，一个字符串的最长回文子串即为这个字符串的子串中，是回文串的最长的那个。<br>计算字符串的最长回文字串最简单的算法就是枚举该字符串的每一个子串，并且判断这个子串是否为回文串，这个算法的时间复杂度为O(n^3)的，显然无法令人满意，稍微优化的一个算法是枚举回文串的中点，这里要分为两种情况，一种是回文串长度是奇数的情况，另一种是回文串长度是偶数的情况，枚举中点再判断是否是回文串，这样能把算法的时间复杂度降为O(n^2)，但是当n比较大的时候仍然无法令人满意，Manacher算法可以在线性时间复杂度内求出一个字符串的最长回文字串，达到了理论上的下界。</p>\n","_id":"uhewykdaugab073r","comments":true,"layout":"post","photos":[],"link":""},{"title":"BestCoder Round #25","categories":["gfm7ob8coc657zv2"],"tags":["xi7i2cqpggj6wdrd"],"date":1420783066000,"description":null,"content":"<h2 id=\"1001_Harry_and_Magical_Computer\">1001 Harry and Magical Computer</h2>\n<p>就是判断有没有环存在。<br>点比较少，Floyd一遍O(n^3)就行。</p>\n<h2 id=\"1002_Harry_And_Magic_Box\">1002 Harry And Magic Box</h2>\n<p>官方题解是O(n^4)的，其实中间有一维可以省略。（小地方而已。。不管也罢。。）<br><a id=\"more\"></a><br>dp[i][j]表示第i行已经有j列被选过（这j个不一定全都是在第i行选的，有可能包括之前选的）。<br>则dp公式为： <code>(1 &lt;= k &lt;= j)</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(k == j)</div><div class=\"line\">    dp[i][j] += dp[i-<span class=\"number\">1</span>][k] * ((<span class=\"number\">1</span>&lt;&lt;k) - <span class=\"number\">1</span>);</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    dp[i][j] += dp[i-<span class=\"number\">1</span>][k] * (<span class=\"number\">1</span>&lt;&lt;k) * c[m-k][j-k];</div></pre></td></tr></table></figure>\n\n<p>表示假如<code>k==j</code>，前k个中至少选一个，种类数为<code>((1&lt;&lt;k) - 1)</code>。<br>否则， 前k个随便选， 其余从<code>m-k</code>中选<code>j-k</code>个。<br>注意数据溢出。</p>\n<h2 id=\"1003_Harry_and_Christmas_tree\">1003 Harry and Christmas tree</h2>\n<p>我是按照官方题解的思路。<br>对每种颜色单独考虑。对第i-1个有这种颜色点a, 第i个有这种颜色的点b， 以及a和b的lca点c。 在递归过程中，c之前的点都可以被贡献1中颜色，直到c以及c往上，贡献度为a和b各一个，然后减去a和b的重复一个，总共为1。</p>\n<p>中间要用到lca算法，因为这道题就是按照递归的顺序进行遍历，用离线的lca就行。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;cstdio&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;cstring&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;algorithm&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;cstring&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;string&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;stack&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;queue&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;vector&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;set&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;map&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;cmath&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;cstdlib&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;iostream&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">define</span> FOR(i,l,r)  for(int i=(l); i&lt;=(r); ++i)</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">define</span> REP(i,r)    for(int i=0; i&lt;(r); ++i)</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">define</span> DWN(i,r,l)  for(int i=(r);i&gt;=(l);--i)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">define</span> pb push_back</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;pii;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">5e4</span> + <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> M = <span class=\"number\">1e5</span> + <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"stl_container\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;</span>head[N], gift[N];</div><div class=\"line\"><span class=\"keyword\">int</span> fa[N], ans[N];</div><div class=\"line\"><span class=\"keyword\">int</span> pre_color[M];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> find(<span class=\"keyword\">int</span> x) {</div><div class=\"line\">    <span class=\"keyword\">if</span>(x==fa[x])    <span class=\"keyword\">return</span> x;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> fa[x] = find(fa[x]);</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> dfs(<span class=\"keyword\">int</span> now, <span class=\"keyword\">int</span> pre) {</div><div class=\"line\">    REP(i, head[now].size()) {</div><div class=\"line\">        <span class=\"keyword\">if</span>(head[now][i] != pre) {</div><div class=\"line\">            dfs(head[now][i], now); </div><div class=\"line\">            fa[ head[now][i] ] = now; <span class=\"comment\">//离线lca中得一部分</span></div><div class=\"line\">            ans[now] += ans[ head[now][i] ]; <span class=\"comment\">//将子节点的贡献度加上来。（这时候子节点的贡献度已经是 总贡献度 - 重复次数 了）</span></div><div class=\"line\">        }</div><div class=\"line\">    }</div><div class=\"line\">    REP(i, gift[now].size()) {</div><div class=\"line\">        <span class=\"keyword\">int</span> color = gift[now][i];</div><div class=\"line\">        <span class=\"keyword\">if</span>(!pre_color[color])  { <span class=\"comment\">//第一个出现这种颜色，跳过不处理</span></div><div class=\"line\">            pre_color[color] = now;</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        }</div><div class=\"line\">        <span class=\"keyword\">int</span> lca = find(pre_color[color]); <span class=\"comment\">// 找lca</span></div><div class=\"line\">        --ans[lca]; <span class=\"comment\">// 在lca上加上一个重复度, ans--</span></div><div class=\"line\"></div><div class=\"line\">        pre_color[color] = now;</div><div class=\"line\">    }</div><div class=\"line\">    ans[now] += gift[now].size(); <span class=\"comment\">//加上本节点的贡献</span></div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> main() {</div><div class=\"line\">    <span class=\"comment\">//freopen(\"in\", \"r\", stdin);</span></div><div class=\"line\">    <span class=\"keyword\">int</span> n, m;</div><div class=\"line\">    <span class=\"keyword\">int</span> x, y;</div><div class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span>&gt;&gt;n&gt;&gt;m) {</div><div class=\"line\">        <span class=\"built_in\">memset</span>(ans, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(ans));</div><div class=\"line\">        <span class=\"built_in\">memset</span>(pre_color, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(pre_color));</div><div class=\"line\">        FOR(i, <span class=\"number\">1</span>, n)    fa[i] = i, head[i].clear(), gift[i].clear();</div><div class=\"line\">        REP(i, n-<span class=\"number\">1</span>) {</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&x, &y);</div><div class=\"line\">            head[x].pb(y);</div><div class=\"line\">            head[y].pb(x);</div><div class=\"line\">        }</div><div class=\"line\">        <span class=\"keyword\">while</span>(m--) {</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>, &x, &y);</div><div class=\"line\">            gift[x].pb(y);</div><div class=\"line\">        }</div><div class=\"line\">        dfs(<span class=\"number\">1</span>, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">        FOR(i, <span class=\"number\">1</span>, n) {</div><div class=\"line\">            <span class=\"keyword\">if</span>(i!=<span class=\"number\">1</span>)    <span class=\"built_in\">putchar</span>(<span class=\"string\">' '</span>);</div><div class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>, ans[i]);</div><div class=\"line\">        }</div><div class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">\"\"</span>);</div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<h2 id=\"Harry_and_magic_string\">Harry and magic string</h2>\n<p>DP + Manacher算法</p>\n<p>DP思路很简单。<br>sum[i] 表示以i结尾和i之前结尾的回文串总数。<br>dp[i] 表示以i开头的回文串数。</p>\n<blockquote>\n<p>ans = $$\\sum_{i=1}^{len-1} {sum[i-1] * dp[i]}$$</p>\n</blockquote>\n<p>难点就是<code>sum[i]</code> 和 <code>dp[i]</code> 怎么求的问题了。<br>新学习了个算法， Manacher算法，在我转载的上篇文章中有讲解。<a href=\"http://teveillan.com/2015/01/09/-%E8%BD%AC-Manacher%E7%AE%97%E6%B3%95-%E5%9B%9E%E6%96%87%E4%B8%B2%E5%A4%84%E7%90%86/\" target=\"_blank\" rel=\"external\">传送门</a></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;cstdio&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;cstring&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;algorithm&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;cstring&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;string&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;stack&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;queue&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;vector&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;set&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;map&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;cmath&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;cstdlib&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;iostream&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">define</span> FOR(i,l,r)  for(int i=(l); i&lt;=(r); ++i)</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">define</span> REP(i,r)    for(int i=0; i&lt;(r); ++i)</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">define</span> DWN(i,r,l)  for(int i=(r);i&gt;=(l);--i)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">define</span> pb push_back</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;pii;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAX_LEN = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">char</span> str[MAX_LEN];</div><div class=\"line\"><span class=\"keyword\">int</span> Len[MAX_LEN&lt;&lt;<span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">struct</span> Manacher { <span class=\"comment\">// Manacher算法, 讲解看上篇文章</span></div><div class=\"line\">    <span class=\"keyword\">char</span> tmp_str[MAX_LEN&lt;&lt;<span class=\"number\">1</span>];</div><div class=\"line\">    <span class=\"keyword\">int</span> init(<span class=\"keyword\">char</span> *s) {</div><div class=\"line\">        <span class=\"keyword\">int</span> len = <span class=\"built_in\">strlen</span>(s);</div><div class=\"line\">        <span class=\"keyword\">int</span> id = <span class=\"number\">0</span>;</div><div class=\"line\">        tmp_str[id++] = <span class=\"string\">'#'</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;len; ++i) {</div><div class=\"line\">            tmp_str[id++] = s[i];</div><div class=\"line\">            tmp_str[id++] = <span class=\"string\">'#'</span>;</div><div class=\"line\">        }</div><div class=\"line\">        tmp_str[id] = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> id;</div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">void</span> solve(<span class=\"keyword\">char</span> *s) {</div><div class=\"line\">        <span class=\"keyword\">int</span> len = init(s);</div><div class=\"line\">        <span class=\"keyword\">int</span> max_r = -<span class=\"number\">1</span>, max_id = -<span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;len; ++i) {</div><div class=\"line\">            <span class=\"keyword\">if</span>(max_r &gt; i)   Len[i] = min(max_r - i, Len[<span class=\"number\">2</span> * max_id - i]);</div><div class=\"line\">            <span class=\"keyword\">else</span> Len[i] = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">while</span>(i - Len[i] &gt;= <span class=\"number\">0</span> && i + Len[i] &lt; len && tmp_str[i - Len[i]] == tmp_str[i + Len[i]])</div><div class=\"line\">                ++Len[i];</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span>(i + Len[i] &gt; max_r) {</div><div class=\"line\">                max_r = i + Len[i];</div><div class=\"line\">                max_id = i;</div><div class=\"line\">            }</div><div class=\"line\">        }</div><div class=\"line\">    }</div><div class=\"line\">};</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> sum[MAX_LEN &lt;&lt; <span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> flag[MAX_LEN &lt;&lt; <span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> main() {</div><div class=\"line\">    <span class=\"comment\">//freopen(\"in\", \"r\", stdin);</span></div><div class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span>&gt;&gt;str) {</div><div class=\"line\">        <span class=\"built_in\">memset</span>(sum, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(sum));</div><div class=\"line\">        <span class=\"built_in\">memset</span>(flag, <span class=\"number\">0</span> ,<span class=\"keyword\">sizeof</span>(flag));</div><div class=\"line\">        Manacher manacher;</div><div class=\"line\">        manacher.solve(str);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> len = <span class=\"built_in\">strlen</span>(str);</div><div class=\"line\">        <span class=\"keyword\">int</span> tmp = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= (len&lt;&lt;<span class=\"number\">1</span>); ++i) { <span class=\"comment\">//求sum</span></div><div class=\"line\">            sum[i] += sum[i-<span class=\"number\">1</span>];</div><div class=\"line\">            ++tmp;</div><div class=\"line\"></div><div class=\"line\">            tmp -= flag[i];</div><div class=\"line\">            ++flag[i + Len[i]];</div><div class=\"line\">            <span class=\"keyword\">if</span>(i&<span class=\"number\">1</span>) sum[i] += tmp;</div><div class=\"line\">        }</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"built_in\">memset</span>(flag, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(flag));</div><div class=\"line\">        tmp = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = (len&lt;&lt;<span class=\"number\">1</span>); i &gt;= <span class=\"number\">1</span>; --i) { <span class=\"comment\">//求ans</span></div><div class=\"line\">            ++tmp;</div><div class=\"line\">            tmp -= flag[i];</div><div class=\"line\">            ++flag[i - Len[i]];</div><div class=\"line\">            <span class=\"keyword\">if</span>(i&<span class=\"number\">1</span>) ans += sum[i-<span class=\"number\">1</span>] * tmp;</div><div class=\"line\">        }</div><div class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; ans &lt;&lt; endl;</div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n","source":"_posts/BestCoder-Round-25.md","raw":"title: \"BestCoder Round #25\"\ncategories: 红名\ntags:\n  - BestCoder\ndate: 2015-01-09 13:57:46\ndescription:\n---\n## 1001 Harry and Magical Computer\n\n就是判断有没有环存在。\n点比较少，Floyd一遍O(n^3)就行。\n\n## 1002 Harry And Magic Box\n\n官方题解是O(n^4)的，其实中间有一维可以省略。（小地方而已。。不管也罢。。）\n<!-- more -->\ndp[i][j]表示第i行已经有j列被选过（这j个不一定全都是在第i行选的，有可能包括之前选的）。\n则dp公式为： `(1 <= k <= j)`\n\n```c++\nif(k == j)\n    dp[i][j] += dp[i-1][k] * ((1<<k) - 1);\nelse:\n    dp[i][j] += dp[i-1][k] * (1<<k) * c[m-k][j-k];\n```\n表示假如`k==j`，前k个中至少选一个，种类数为`((1<<k) - 1)`。\n否则， 前k个随便选， 其余从`m-k`中选`j-k`个。\n注意数据溢出。\n\n## 1003 Harry and Christmas tree\n\n我是按照官方题解的思路。\n对每种颜色单独考虑。对第i-1个有这种颜色点a, 第i个有这种颜色的点b， 以及a和b的lca点c。 在递归过程中，c之前的点都可以被贡献1中颜色，直到c以及c往上，贡献度为a和b各一个，然后减去a和b的重复一个，总共为1。\n\n中间要用到lca算法，因为这道题就是按照递归的顺序进行遍历，用离线的lca就行。\n```c++\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <cstring>\n#include <string>\n#include <stack>\n#include <queue>\n#include <vector>\n#include <set>\n#include <map>\n#include <cmath>\n#include <cstdlib>\n#include <iostream>\n\nusing namespace std;\n\n#define FOR(i,l,r)  for(int i=(l); i<=(r); ++i)\n#define REP(i,r)    for(int i=0; i<(r); ++i)\n#define DWN(i,r,l)  for(int i=(r);i>=(l);--i)\n\n#define pb push_back\n\ntypedef long long ll;\ntypedef pair<int, int>pii;\nconst int N = 5e4 + 1;\nconst int M = 1e5 + 1;\nvector<int>head[N], gift[N];\nint fa[N], ans[N];\nint pre_color[M];\n\ninline int find(int x) {\n    if(x==fa[x])    return x;\n    else return fa[x] = find(fa[x]);\n}\n\nvoid dfs(int now, int pre) {\n    REP(i, head[now].size()) {\n        if(head[now][i] != pre) {\n            dfs(head[now][i], now); \n            fa[ head[now][i] ] = now; //离线lca中得一部分\n            ans[now] += ans[ head[now][i] ]; //将子节点的贡献度加上来。（这时候子节点的贡献度已经是 总贡献度 - 重复次数 了）\n        }\n    }\n    REP(i, gift[now].size()) {\n        int color = gift[now][i];\n        if(!pre_color[color])  { //第一个出现这种颜色，跳过不处理\n            pre_color[color] = now;\n            continue;\n        }\n        int lca = find(pre_color[color]); // 找lca\n        --ans[lca]; // 在lca上加上一个重复度, ans--\n\n        pre_color[color] = now;\n    }\n    ans[now] += gift[now].size(); //加上本节点的贡献\n}\n\nint main() {\n    //freopen(\"in\", \"r\", stdin);\n    int n, m;\n    int x, y;\n    while(cin>>n>>m) {\n        memset(ans, 0, sizeof(ans));\n        memset(pre_color, 0, sizeof(pre_color));\n        FOR(i, 1, n)    fa[i] = i, head[i].clear(), gift[i].clear();\n        REP(i, n-1) {\n            scanf(\"%d%d\",&x, &y);\n            head[x].pb(y);\n            head[y].pb(x);\n        }\n        while(m--) {\n            scanf(\"%d%d\", &x, &y);\n            gift[x].pb(y);\n        }\n        dfs(1, 0);\n\n        FOR(i, 1, n) {\n            if(i!=1)    putchar(' ');\n            printf(\"%d\", ans[i]);\n        }\n        puts(\"\");\n    }\n    return 0;\n}\n```\n\n## Harry and magic string\n\nDP + Manacher算法\n\nDP思路很简单。\nsum[i] 表示以i结尾和i之前结尾的回文串总数。\ndp[i] 表示以i开头的回文串数。\n\n> ans = $$\\sum_{i=1}^{len-1} {sum[i-1] * dp[i]}$$\n\n难点就是`sum[i]` 和 `dp[i]` 怎么求的问题了。\n新学习了个算法， Manacher算法，在我转载的上篇文章中有讲解。[传送门](http://teveillan.com/2015/01/09/-%E8%BD%AC-Manacher%E7%AE%97%E6%B3%95-%E5%9B%9E%E6%96%87%E4%B8%B2%E5%A4%84%E7%90%86/)\n\n```c++\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <cstring>\n#include <string>\n#include <stack>\n#include <queue>\n#include <vector>\n#include <set>\n#include <map>\n#include <cmath>\n#include <cstdlib>\n#include <iostream>\n\nusing namespace std;\n\n#define FOR(i,l,r)  for(int i=(l); i<=(r); ++i)\n#define REP(i,r)    for(int i=0; i<(r); ++i)\n#define DWN(i,r,l)  for(int i=(r);i>=(l);--i)\n\n#define pb push_back\n\ntypedef long long ll;\ntypedef pair<int, int>pii;\n\nconst int MAX_LEN = 1e5 + 10;\n\nchar str[MAX_LEN];\nint Len[MAX_LEN<<1];\nstruct Manacher { // Manacher算法, 讲解看上篇文章\n    char tmp_str[MAX_LEN<<1];\n    int init(char *s) {\n        int len = strlen(s);\n        int id = 0;\n        tmp_str[id++] = '#';\n        for(int i=0; i<len; ++i) {\n            tmp_str[id++] = s[i];\n            tmp_str[id++] = '#';\n        }\n        tmp_str[id] = '\\0';\n        return id;\n    }\n\n    void solve(char *s) {\n        int len = init(s);\n        int max_r = -1, max_id = -1;\n        for(int i=0; i<len; ++i) {\n            if(max_r > i)   Len[i] = min(max_r - i, Len[2 * max_id - i]);\n            else Len[i] = 1;\n\n            while(i - Len[i] >= 0 && i + Len[i] < len && tmp_str[i - Len[i]] == tmp_str[i + Len[i]])\n                ++Len[i];\n\n            if(i + Len[i] > max_r) {\n                max_r = i + Len[i];\n                max_id = i;\n            }\n        }\n    }\n};\n\nlong long sum[MAX_LEN << 1];\nint flag[MAX_LEN << 1];\nint main() {\n    //freopen(\"in\", \"r\", stdin);\n    while(cin>>str) {\n        memset(sum, 0, sizeof(sum));\n        memset(flag, 0 ,sizeof(flag));\n        Manacher manacher;\n        manacher.solve(str);\n\n        int len = strlen(str);\n        int tmp = 0;\n        for(int i = 1; i <= (len<<1); ++i) { //求sum\n            sum[i] += sum[i-1];\n            ++tmp;\n\n            tmp -= flag[i];\n            ++flag[i + Len[i]];\n            if(i&1) sum[i] += tmp;\n        }\n\n        long long ans = 0;\n        memset(flag, 0, sizeof(flag));\n        tmp = 0;\n        for(int i = (len<<1); i >= 1; --i) { //求ans\n            ++tmp;\n            tmp -= flag[i];\n            ++flag[i - Len[i]];\n            if(i&1) ans += sum[i-1] * tmp;\n        }\n        cout << ans << endl;\n    }\n    return 0;\n}\n\n```\n\n\n","slug":"BestCoder-Round-25","updated":1430918643000,"excerpt":"<h2 id=\"1001_Harry_and_Magical_Computer\">1001 Harry and Magical Computer</h2>\n<p>就是判断有没有环存在。<br>点比较少，Floyd一遍O(n^3)就行。</p>\n<h2 id=\"1002_Harry_And_Magic_Box\">1002 Harry And Magic Box</h2>\n<p>官方题解是O(n^4)的，其实中间有一维可以省略。（小地方而已。。不管也罢。。）<br>","_id":"uosts3uvzuhw2fm2","comments":true,"layout":"post","photos":[],"link":""},{"title":"HDU 5208 Where is Bob && Bestcoder Round38 C题","categories":["gfm7ob8coc657zv2"],"tags":["xi7i2cqpggj6wdrd"],"date":1429610265000,"description":null,"content":"<p>题目链接：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=5208\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=5208</a></p>\n<p>近似于数位DP的思路。<br>用数位DP求区间中符号条件的数有多少的时候，有时会用一个符号位来记录当前的取值是否达到区间的上界。这里同样用这个办法。（官方题解我有点没看懂，我的解法有可能和官方题解不一样）</p>\n<p>看到题第一眼，觉得应该优先从高位到低位处理，在以下两种情况中，决策应该是确定的：</p>\n<ul>\n<li>第一个人只能取0或1中的一个。这时候第二个人一定是尽量取和第一个人一样的值。</li>\n<li>第二个人只能取0或1中得一个，而第一个人两个都可以选。第一个人自然取第二个人取不到的值。</li>\n</ul>\n<p>但是，当在这两种情况之外，决策就不唯一了。这时，先把低位的决策解决了就很有必要。<br><a id=\"more\"></a><br>我们用dp[i][l1][r1][l2][r2]来表示。 </p>\n<blockquote>\n<p><code>l1</code> 为1时，表示 <strong>假设第一个人从最高位到第i+1位的取值都是取区间范围允许的最小值。</strong> 此时，第一个人在第i位的取值要小心不要小于区间允许的最小值。<br>反之<code>l1</code>为0时，表示<strong>假设第一个人从最高位到第i+1位的取值有一个不是区间范围的最小值</strong>，这时候，从第i位到第0位取任何值都不会小于区间允许的最小值了。</p>\n</blockquote>\n<p>请仔细理解上面这段话。</p>\n<p>同理，<code>r1</code>代表之前取的是不是区间范围允许的最大值。然后能类推倒l2, r2。</p>\n<p>对于每一位, 我们枚举l1, r1, l2, r2。<strong>（再次阐明一下，l1, r1, l2, r2不是表示第i位两个人的取值范围，是表示高位的取值是不是都是边界值。）</strong> 当l1, r1, l2, r2确定以后，第i位两个人的取值范围也就确定了，枚举两个人的取值，用第i-1位递推到第i位。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;cstdio&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;cstring&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;algorithm&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;cstring&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;string&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;stack&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;queue&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;vector&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;set&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;map&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;cmath&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;cstdlib&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;iostream&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">define</span> FOR(i,l,r)  for(int i=(l); i&lt;=(r); ++i)</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">define</span> REP(i,r)    for(int i=0; i&lt;(r); ++i)</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">define</span> DWN(i,r,l)  for(int i=(r);i&gt;=(l);--i)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">define</span> pb push_back</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;pii;</div><div class=\"line\"></div><div class=\"line\">ll dp[<span class=\"number\">40</span>][<span class=\"number\">2</span>][<span class=\"number\">2</span>][<span class=\"number\">2</span>][<span class=\"number\">2</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> main() {</div><div class=\"line\">    <span class=\"keyword\">int</span> casnum, casid = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; casnum;</div><div class=\"line\">    <span class=\"keyword\">while</span>(casnum--) {</div><div class=\"line\">        REP(i, <span class=\"number\">31</span>)</div><div class=\"line\">            REP(a, <span class=\"number\">2</span>)</div><div class=\"line\">                REP(b, <span class=\"number\">2</span>)</div><div class=\"line\">                    REP(c, <span class=\"number\">2</span>)</div><div class=\"line\">                        REP(d, <span class=\"number\">2</span>)</div><div class=\"line\">                            dp[i][a][b][c][d] = <span class=\"number\">1e15</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> l[<span class=\"number\">2</span>][<span class=\"number\">2</span>];</div><div class=\"line\">        REP(i, <span class=\"number\">2</span>)</div><div class=\"line\">            REP(j, <span class=\"number\">2</span>)</div><div class=\"line\">                <span class=\"built_in\">cin</span> &gt;&gt; l[i][j];</div><div class=\"line\"></div><div class=\"line\">        FOR(i, <span class=\"number\">0</span>, <span class=\"number\">31</span>) {</div><div class=\"line\">            REP(a, <span class=\"number\">2</span>)</div><div class=\"line\">                REP(b, <span class=\"number\">2</span>)</div><div class=\"line\">                    REP(c, <span class=\"number\">2</span>)</div><div class=\"line\">                        REP(d, <span class=\"number\">2</span>) { <span class=\"comment\">//枚举高位的取值是不是都是边界值</span></div><div class=\"line\">                            <span class=\"keyword\">bool</span> tmp_l[<span class=\"number\">2</span>][<span class=\"number\">2</span>] = { {<span class=\"number\">0</span>, <span class=\"number\">1</span>}, {<span class=\"number\">0</span>, <span class=\"number\">1</span>} }; </div><div class=\"line\">                            <span class=\"comment\">// 确定此时两个人的取值范围</span></div><div class=\"line\">                            <span class=\"keyword\">if</span>(a)   tmp_l[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = l[<span class=\"number\">0</span>][<span class=\"number\">0</span>] & (<span class=\"number\">1</span>&lt;&lt;i);</div><div class=\"line\">                            <span class=\"comment\">//当第一个人高位的取值都是下界值，而且第i位的下界值为1时</span></div><div class=\"line\">                            <span class=\"comment\">//第i位的取值范围的下界为1。否则第i位的取值范围的下界为0。</span></div><div class=\"line\">                            <span class=\"keyword\">if</span>(b)   tmp_l[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = l[<span class=\"number\">0</span>][<span class=\"number\">1</span>] & (<span class=\"number\">1</span>&lt;&lt;i);</div><div class=\"line\">                            <span class=\"comment\">//都类比第一个</span></div><div class=\"line\">                            <span class=\"keyword\">if</span>(c)   tmp_l[<span class=\"number\">1</span>][<span class=\"number\">0</span>] = l[<span class=\"number\">1</span>][<span class=\"number\">0</span>] & (<span class=\"number\">1</span>&lt;&lt;i);</div><div class=\"line\">                            <span class=\"keyword\">if</span>(d)   tmp_l[<span class=\"number\">1</span>][<span class=\"number\">1</span>] = l[<span class=\"number\">1</span>][<span class=\"number\">1</span>] & (<span class=\"number\">1</span>&lt;&lt;i);</div><div class=\"line\"></div><div class=\"line\">                            ll tmp1 = <span class=\"number\">0</span>;</div><div class=\"line\">                            FOR(j, tmp_l[<span class=\"number\">0</span>][<span class=\"number\">0</span>], tmp_l[<span class=\"number\">0</span>][<span class=\"number\">1</span>]) {</div><div class=\"line\">                            <span class=\"comment\">//取值范围确定了，现在我们来枚举值。j是第一个人的取值</span></div><div class=\"line\">                                ll tmp2 = <span class=\"number\">1e15</span>;</div><div class=\"line\">                                FOR(k, tmp_l[<span class=\"number\">1</span>][<span class=\"number\">0</span>], tmp_l[<span class=\"number\">1</span>][<span class=\"number\">1</span>]) {</div><div class=\"line\">                                    <span class=\"comment\">//第i位的异或值加上i-1位的dp值就是第i位的dp值。</span></div><div class=\"line\">                                    <span class=\"comment\">//但是我们得先算出两个人分别取j和k的情况下</span></div><div class=\"line\">                                    <span class=\"comment\">//高位的取值加上第i位的取值是否依然达到上下界</span></div><div class=\"line\">                                    <span class=\"keyword\">bool</span> tmp[<span class=\"number\">2</span>][<span class=\"number\">2</span>] = { {<span class=\"number\">0</span>, <span class=\"number\">0</span>}, {<span class=\"number\">0</span>, <span class=\"number\">0</span>} };</div><div class=\"line\">                                    <span class=\"keyword\">if</span>(a && (j == tmp_l[<span class=\"number\">0</span>][<span class=\"number\">0</span>])) tmp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">                                    <span class=\"comment\">//当且仅当高位取值到达下界,第i位又取到下界值得时候,</span></div><div class=\"line\">                                    <span class=\"comment\">//对i-1位来说高位的取值达到下界</span></div><div class=\"line\">                                    <span class=\"keyword\">if</span>(b && (j == tmp_l[<span class=\"number\">0</span>][<span class=\"number\">1</span>])) tmp[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">                                    <span class=\"keyword\">if</span>(c && (k == tmp_l[<span class=\"number\">1</span>][<span class=\"number\">0</span>])) tmp[<span class=\"number\">1</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">                                    <span class=\"keyword\">if</span>(d && (k == tmp_l[<span class=\"number\">1</span>][<span class=\"number\">1</span>])) tmp[<span class=\"number\">1</span>][<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">                                    <span class=\"keyword\">if</span>(i)</div><div class=\"line\">                                        tmp2 = min(tmp2, ((ll)(j^k) &lt;&lt; i) + dp[i-<span class=\"number\">1</span>][tmp[<span class=\"number\">0</span>][<span class=\"number\">0</span>]][tmp[<span class=\"number\">0</span>][<span class=\"number\">1</span>]][tmp[<span class=\"number\">1</span>][<span class=\"number\">0</span>]][tmp[<span class=\"number\">1</span>][<span class=\"number\">1</span>]]);</div><div class=\"line\">                                    <span class=\"keyword\">else</span></div><div class=\"line\">                                        tmp2 = min(tmp2, ((ll)(j^k) &lt;&lt; i));</div><div class=\"line\">                                }</div><div class=\"line\">                                tmp1 = max(tmp1, tmp2);</div><div class=\"line\">                            }</div><div class=\"line\">                            dp[i][a][b][c][d] = tmp1;</div><div class=\"line\">                        }</div><div class=\"line\">        }</div><div class=\"line\">        ll ans = dp[<span class=\"number\">31</span>][<span class=\"number\">1</span>][<span class=\"number\">1</span>][<span class=\"number\">1</span>][<span class=\"number\">1</span>];</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Case #%d: %I64d\\n\"</span>, ++casid, ans);</div><div class=\"line\"></div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n","source":"_posts/HDU-5208-Where-is-Bob-Bestcoder-Round38-C题.md","raw":"title: \"HDU 5208 Where is Bob && Bestcoder Round38 C题\"\ncategories: 红名\ntags:\n  - BestCoder\ndate: 2015-04-21 17:57:45\ndescription:\n---\n\n题目链接：http://acm.hdu.edu.cn/showproblem.php?pid=5208\n\n近似于数位DP的思路。\n用数位DP求区间中符号条件的数有多少的时候，有时会用一个符号位来记录当前的取值是否达到区间的上界。这里同样用这个办法。（官方题解我有点没看懂，我的解法有可能和官方题解不一样）\n\n看到题第一眼，觉得应该优先从高位到低位处理，在以下两种情况中，决策应该是确定的：\n*   第一个人只能取0或1中的一个。这时候第二个人一定是尽量取和第一个人一样的值。\n*   第二个人只能取0或1中得一个，而第一个人两个都可以选。第一个人自然取第二个人取不到的值。\n\n但是，当在这两种情况之外，决策就不唯一了。这时，先把低位的决策解决了就很有必要。\n<!-- more -->\n我们用dp[i][l1][r1][l2][r2]来表示。 \n> `l1` 为1时，表示 **假设第一个人从最高位到第i+1位的取值都是取区间范围允许的最小值。** 此时，第一个人在第i位的取值要小心不要小于区间允许的最小值。\n反之`l1`为0时，表示**假设第一个人从最高位到第i+1位的取值有一个不是区间范围的最小值**，这时候，从第i位到第0位取任何值都不会小于区间允许的最小值了。\n\n请仔细理解上面这段话。\n\n同理，`r1`代表之前取的是不是区间范围允许的最大值。然后能类推倒l2, r2。\n\n对于每一位, 我们枚举l1, r1, l2, r2。**（再次阐明一下，l1, r1, l2, r2不是表示第i位两个人的取值范围，是表示高位的取值是不是都是边界值。）** 当l1, r1, l2, r2确定以后，第i位两个人的取值范围也就确定了，枚举两个人的取值，用第i-1位递推到第i位。\n\n```c++\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <cstring>\n#include <string>\n#include <stack>\n#include <queue>\n#include <vector>\n#include <set>\n#include <map>\n#include <cmath>\n#include <cstdlib>\n#include <iostream>\n\nusing namespace std;\n\n#define FOR(i,l,r)  for(int i=(l); i<=(r); ++i)\n#define REP(i,r)    for(int i=0; i<(r); ++i)\n#define DWN(i,r,l)  for(int i=(r);i>=(l);--i)\n\n#define pb push_back\n\ntypedef long long ll;\ntypedef pair<int, int>pii;\n\nll dp[40][2][2][2][2];\n\nint main() {\n    int casnum, casid = 0;\n    cin >> casnum;\n    while(casnum--) {\n        REP(i, 31)\n            REP(a, 2)\n                REP(b, 2)\n                    REP(c, 2)\n                        REP(d, 2)\n                            dp[i][a][b][c][d] = 1e15;\n        int l[2][2];\n        REP(i, 2)\n            REP(j, 2)\n                cin >> l[i][j];\n\n        FOR(i, 0, 31) {\n            REP(a, 2)\n                REP(b, 2)\n                    REP(c, 2)\n                        REP(d, 2) { //枚举高位的取值是不是都是边界值\n                            bool tmp_l[2][2] = { {0, 1}, {0, 1} }; \n                            // 确定此时两个人的取值范围\n                            if(a)   tmp_l[0][0] = l[0][0] & (1<<i);\n                            //当第一个人高位的取值都是下界值，而且第i位的下界值为1时\n                            //第i位的取值范围的下界为1。否则第i位的取值范围的下界为0。\n                            if(b)   tmp_l[0][1] = l[0][1] & (1<<i);\n                            //都类比第一个\n                            if(c)   tmp_l[1][0] = l[1][0] & (1<<i);\n                            if(d)   tmp_l[1][1] = l[1][1] & (1<<i);\n\n                            ll tmp1 = 0;\n                            FOR(j, tmp_l[0][0], tmp_l[0][1]) {\n                            //取值范围确定了，现在我们来枚举值。j是第一个人的取值\n                                ll tmp2 = 1e15;\n                                FOR(k, tmp_l[1][0], tmp_l[1][1]) {\n                                    //第i位的异或值加上i-1位的dp值就是第i位的dp值。\n                                    //但是我们得先算出两个人分别取j和k的情况下\n                                    //高位的取值加上第i位的取值是否依然达到上下界\n                                    bool tmp[2][2] = { {0, 0}, {0, 0} };\n                                    if(a && (j == tmp_l[0][0])) tmp[0][0] = 1;\n                                    //当且仅当高位取值到达下界,第i位又取到下界值得时候,\n                                    //对i-1位来说高位的取值达到下界\n                                    if(b && (j == tmp_l[0][1])) tmp[0][1] = 1;\n                                    if(c && (k == tmp_l[1][0])) tmp[1][0] = 1;\n                                    if(d && (k == tmp_l[1][1])) tmp[1][1] = 1;\n                                    if(i)\n                                        tmp2 = min(tmp2, ((ll)(j^k) << i) + dp[i-1][tmp[0][0]][tmp[0][1]][tmp[1][0]][tmp[1][1]]);\n                                    else\n                                        tmp2 = min(tmp2, ((ll)(j^k) << i));\n                                }\n                                tmp1 = max(tmp1, tmp2);\n                            }\n                            dp[i][a][b][c][d] = tmp1;\n                        }\n        }\n        ll ans = dp[31][1][1][1][1];\n        printf(\"Case #%d: %I64d\\n\", ++casid, ans);\n\n    }\n    return 0;\n}\n```\n","slug":"HDU-5208-Where-is-Bob-Bestcoder-Round38-C题","updated":1430918643000,"excerpt":"<p>题目链接：<a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=5208\" target=\"_blank\" rel=\"external\">http://acm.hdu.edu.cn/showproblem.php?pid=5208</a></p>\n<p>近似于数位DP的思路。<br>用数位DP求区间中符号条件的数有多少的时候，有时会用一个符号位来记录当前的取值是否达到区间的上界。这里同样用这个办法。（官方题解我有点没看懂，我的解法有可能和官方题解不一样）</p>\n<p>看到题第一眼，觉得应该优先从高位到低位处理，在以下两种情况中，决策应该是确定的：</p>\n<ul>\n<li>第一个人只能取0或1中的一个。这时候第二个人一定是尽量取和第一个人一样的值。</li>\n<li>第二个人只能取0或1中得一个，而第一个人两个都可以选。第一个人自然取第二个人取不到的值。</li>\n</ul>\n<p>但是，当在这两种情况之外，决策就不唯一了。这时，先把低位的决策解决了就很有必要。<br>","_id":"ilh9t48674sb37tz","comments":true,"layout":"post","photos":[],"link":""},{"title":"CDQ分治 && HDU 5126","categories":["sa7ex4uajg10wus6"],"date":1430556506000,"tags":["d9spl3ft3o7i5gd2"],"description":null,"content":"<p>参考文献：<a href=\"http://wenku.baidu.com/view/52f9c11cff00bed5b9f31d2d.html\" target=\"_blank\" rel=\"external\">从《Cash》谈一类分治算法的应用</a> — 陈丹琦</p>\n<p>也因此简称CDQ分治。</p>\n<p>个人理解CDQ分治和普通分治最大的区别为：<br>普通分治可以将问题拆成几个相互独立的子问题<br>CDQ分治将问题分成了两个部分：</p>\n<ol>\n<li>相互独立的两个子问题  </li>\n<li>两个子问题之间的联系</li>\n</ol>\n<p>因此，CDQ分治的算法流程也分为以下几步：</p>\n<blockquote>\n<ol>\n<li>算法开始</li>\n<li>取一个中间点mid, 将问题分为[L, mid] 和 [mid + 1, R]两个部分。分别处理两个子问题</li>\n<li>处理[L, mid] 和 [mid + 1, R]之间的联系</li>\n</ol>\n</blockquote>\n<a id=\"more\"></a>\n\n<p>举个例子：在二维坐标系中，有n个点，m个询问。对于每个询问(x, y)，求点(x1, x2) ，x1&lt;= x &amp;&amp; y1 &lt;= y 有多少个。</p>\n<p>当然，这题用树状数组就直接能写了。但是我们在这里用CDQ分治来解决一下这个问题。</p>\n<p>我们将n个点看做是n个更新，并和m个询问放在一起。定义一个结构体用vector存起来。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> sovle1(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"stl_container\"><span class=\"built_in\">vector</span>&lt;Struct&gt;</span>vec1) {</div><div class=\"line\">    <span class=\"comment\">//在这里将vec1[l, r]按x从小到大排序</span></div><div class=\"line\">    <span class=\"keyword\">int</span> mid = (l + r) / <span class=\"number\">2</span>;</div><div class=\"line\">    solve1(l, mid);</div><div class=\"line\">    solve1(mid + <span class=\"number\">1</span>, r);<span class=\"comment\">//划分成相互独立的子问题</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//将vec1[l, mid]中的更新操作 和 vec1[mid + 1, r]中的询问操作,存到一个vec2中 </span></div><div class=\"line\">    solve2(l, r, vec2);<span class=\"comment\">//左半边的更新操作和右半边的询问操作之间有联系</span></div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> solve2(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"stl_container\"><span class=\"built_in\">vector</span>&lt;Struct&gt;</span>vec2) {</div><div class=\"line\"><span class=\"comment\">//此时在solve2中已经不需要管x了。在vec2中所有的更新操作的x必然小于等于询问操作的x。</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//在这里将vec2[l, r]按y从小到大排序</span></div><div class=\"line\">    <span class=\"keyword\">int</span> mid = (l + r) / <span class=\"number\">2</span>;</div><div class=\"line\">    sovle2(l, mid);</div><div class=\"line\">    solve2(mid + <span class=\"number\">1</span>, r);<span class=\"comment\">//独立子问题</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//将vec2[l, mid]中的更新操作和vec2[mid + 1, r]中得询问操作存到一个vec3中</span></div><div class=\"line\">    solve3(l, r, vec3);<span class=\"comment\">//</span></div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> solve3（<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"stl_container\"><span class=\"built_in\">vector</span>&lt;Struct&gt;</span>vec3） {</div><div class=\"line\"><span class=\"comment\">//此时在solve3中，x和y都是已经排好序的。从前到后遍历该更新更新该询问询问就好。</span></div><div class=\"line\">    <span class=\"keyword\">int</span> cal = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(Struct tmp: vec3) {</div><div class=\"line\">        <span class=\"keyword\">if</span>(tmp.type == Update)  ++cal;</div><div class=\"line\">        <span class=\"keyword\">else</span> tmp.query_anser += cal;</div><div class=\"line\">    }</div><div class=\"line\">}</div><div class=\"line\"><span class=\"comment\">//这段代码其中有许多可以优化的地方，但是不要在意细节，主要是为了更加方便地理解算法</span></div></pre></td></tr></table></figure>\n\n<p>虽然解法不如树状数组，但是我们得看到题目扩展后的好处。<br>我们看到，当到solve2时，函数中的参数<code>vec2</code>已经不用再管他的x了（<code>请务必深刻理解为什么不用再管了</code>）。<br>这样的好处在哪里？没错，<strong>降维！</strong><br>假如我们要处理的不是二维，而是三维四维依旧可以这么处理，每一个维度只不过加了O(log)的复杂度而已。<br><strong>如果是随时可以更新查询的操作，只不过也只是把时间当成一个维度而已。</strong>（光是这一点就已经牛逼哄哄够解决大部分题目了。）</p>\n<p>然后就是下面这道题，三维且可随时更新查询：<br>HDU 5126 starts: <a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=5126\" target=\"_blank\" rel=\"external\">传送门</a></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;iostream&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;cstdio&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;algorithm&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;cstring&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;vector&gt;</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> &lt;cstdlib&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">define</span> FOR(i,l,r)  for(int i=(l); i&lt;=(r); ++i)</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">define</span> REP(i,r)    for(int i=0; i&lt;(r); ++i)</span></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">define</span> DWN(i,r,l)  for(int i=(r);i&gt;=(l);--i)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">define</span> pb push_back</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</div><div class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;pii;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">5e4</span> + <span class=\"number\">100</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> que[N &lt;&lt; <span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">int</span> ans[N];</div><div class=\"line\"><span class=\"keyword\">int</span> z_num;</div><div class=\"line\"><span class=\"keyword\">int</span> node[N &lt;&lt; <span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">struct</span> Query {</div><div class=\"line\">    <span class=\"keyword\">int</span> x, y, z, kind, id;</div><div class=\"line\">    Query() {}</div><div class=\"line\">    Query(<span class=\"keyword\">int</span> _x, <span class=\"keyword\">int</span> _y, <span class=\"keyword\">int</span> _z, <span class=\"keyword\">int</span> _kind, <span class=\"keyword\">int</span> _id) : x(_x), y(_y), z(_z), kind(_kind), id(_id) {}</div><div class=\"line\">}queries[N &lt;&lt; <span class=\"number\">3</span>], queries_x[N&lt;&lt;<span class=\"number\">3</span>], queries_y[N &lt;&lt; <span class=\"number\">3</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">bool</span> cmpx(Query a, Query b) {</div><div class=\"line\">    <span class=\"keyword\">return</span> a.x &lt; b.x || (a.x == b.x && a.kind &lt; b.kind);</div><div class=\"line\">}</div><div class=\"line\"><span class=\"keyword\">bool</span> cmpy(Query a, Query b) {</div><div class=\"line\">    <span class=\"keyword\">return</span> a.y &lt; b.y || (a.y == b.y && a.kind &lt; b.kind);</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> lowbit(<span class=\"keyword\">int</span> x)    {<span class=\"keyword\">return</span> x&-x;}</div><div class=\"line\"><span class=\"keyword\">void</span> update(<span class=\"keyword\">int</span> pos, <span class=\"keyword\">int</span> value) {</div><div class=\"line\">    <span class=\"keyword\">while</span>(pos &lt;= z_num) {</div><div class=\"line\">        node[pos] += value;</div><div class=\"line\">        pos += lowbit(pos);</div><div class=\"line\">    }</div><div class=\"line\">}</div><div class=\"line\"><span class=\"keyword\">int</span> query(<span class=\"keyword\">int</span> pos) {</div><div class=\"line\">    <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(pos) {</div><div class=\"line\">        ret += node[pos];</div><div class=\"line\">        pos -= lowbit(pos);</div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"keyword\">return</span> ret;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> solve3(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r) {<span class=\"comment\">//只剩下二维y和z，直接就是二维的更新查询题目，树状数组解决就好了</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(l &gt;= r)  <span class=\"keyword\">return</span>;</div><div class=\"line\">    FOR(i, l, r)</div><div class=\"line\">        <span class=\"keyword\">if</span>(queries_y[i].kind == <span class=\"number\">0</span>)  update(queries_y[i].z, <span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(queries_y[i].kind == <span class=\"number\">1</span>)  ans[ queries_y[i].id ] -= query(queries_y[i].z);</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(queries_y[i].kind == <span class=\"number\">2</span>) ans[ queries_y[i].id ] += query(queries_y[i].z);</div><div class=\"line\">    FOR(i, l, r)</div><div class=\"line\">        <span class=\"keyword\">if</span>(queries_y[i].kind == <span class=\"number\">0</span>)  update(queries_y[i].z, -<span class=\"number\">1</span>);</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> solve2(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r) {<span class=\"comment\">//把x这一维度消除</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(l &gt;= r)  <span class=\"keyword\">return</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> mid = (l+r)&gt;&gt;<span class=\"number\">1</span>;</div><div class=\"line\">    solve2(l, mid);</div><div class=\"line\">    solve2(mid + <span class=\"number\">1</span>, r);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</div><div class=\"line\">    FOR(i, l, mid)  <span class=\"keyword\">if</span>(queries_x[i].kind == <span class=\"number\">0</span>)  queries_y[num++] = queries_x[i];</div><div class=\"line\">    FOR(i, mid+<span class=\"number\">1</span>, r)    <span class=\"keyword\">if</span>(queries_x[i].kind)  queries_y[num++] = queries_x[i];</div><div class=\"line\">    sort(queries_y, queries_y + num, cmpy);</div><div class=\"line\">    solve3(<span class=\"number\">0</span>, num - <span class=\"number\">1</span>);</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> solve1(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r) {<span class=\"comment\">//已经默认时间从小到大排序了，把时间这一维度消除</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(l &gt;= r)  <span class=\"keyword\">return</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> mid = (l+r)&gt;&gt;<span class=\"number\">1</span>;</div><div class=\"line\">    solve1(l, mid);</div><div class=\"line\">    solve1(mid + <span class=\"number\">1</span>, r);</div><div class=\"line\">    <span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</div><div class=\"line\">    FOR(i, l, mid)  <span class=\"keyword\">if</span>(queries[i].kind == <span class=\"number\">0</span>)    queries_x[num++] = queries[i];</div><div class=\"line\">    FOR(i, mid + <span class=\"number\">1</span>, r)  <span class=\"keyword\">if</span>(queries[i].kind)     queries_x[num++] = queries[i];</div><div class=\"line\">    sort(queries_x, queries_x + num, cmpx);<span class=\"comment\">//对x从小到大排序</span></div><div class=\"line\">    solve2(<span class=\"number\">0</span>, num - <span class=\"number\">1</span>);</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">int</span> main() {</div><div class=\"line\">    <span class=\"keyword\">int</span> casnum, n;</div><div class=\"line\">    <span class=\"keyword\">int</span> x1, x2, y1, y2, z1, z2, kind;</div><div class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; casnum;</div><div class=\"line\">    <span class=\"keyword\">while</span>(casnum--) {</div><div class=\"line\">        <span class=\"built_in\">memset</span>(ans, -<span class=\"number\">1</span>, <span class=\"keyword\">sizeof</span>(ans));</div><div class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; n;</div><div class=\"line\">        <span class=\"keyword\">int</span> id = <span class=\"number\">0</span>;</div><div class=\"line\">        z_num = <span class=\"number\">0</span>;</div><div class=\"line\">        REP(i, n) {</div><div class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &kind);</div><div class=\"line\">            <span class=\"keyword\">if</span>(kind == <span class=\"number\">1</span>) {</div><div class=\"line\">                <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>, &x1, &y1, &z1);</div><div class=\"line\">                queries[id++] = Query(x1, y1, z1, <span class=\"number\">0</span>, i);</div><div class=\"line\">                que[z_num++] = z1;</div><div class=\"line\">            } <span class=\"keyword\">else</span> {</div><div class=\"line\">                ans[i] = <span class=\"number\">0</span>;</div><div class=\"line\">                <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d%d%d%d\"</span>, &x1, &y1, &z1, &x2, &y2, &z2);</div><div class=\"line\">                queries[id++] = Query(x2    , y2    , z2    , <span class=\"number\">2</span>, i);</div><div class=\"line\">                queries[id++] = Query(x2    , y2    , z1 - <span class=\"number\">1</span>, <span class=\"number\">1</span>, i);</div><div class=\"line\">                queries[id++] = Query(x2    , y1 - <span class=\"number\">1</span>, z2    , <span class=\"number\">1</span>, i);</div><div class=\"line\">                queries[id++] = Query(x1 - <span class=\"number\">1</span>, y2    , z2    , <span class=\"number\">1</span>, i);</div><div class=\"line\">                queries[id++] = Query(x2    , y1 - <span class=\"number\">1</span>, z1 - <span class=\"number\">1</span>, <span class=\"number\">2</span>, i);</div><div class=\"line\">                queries[id++] = Query(x1 - <span class=\"number\">1</span>, y2    , z1 - <span class=\"number\">1</span>, <span class=\"number\">2</span>, i);</div><div class=\"line\">                queries[id++] = Query(x1 - <span class=\"number\">1</span>, y1 - <span class=\"number\">1</span>, z2    , <span class=\"number\">2</span>, i);</div><div class=\"line\">                queries[id++] = Query(x1 - <span class=\"number\">1</span>, y1 - <span class=\"number\">1</span>, z1 - <span class=\"number\">1</span>, <span class=\"number\">1</span>, i);</div><div class=\"line\">                que[z_num++] = z2;</div><div class=\"line\">                que[z_num++] = z1 - <span class=\"number\">1</span>;</div><div class=\"line\">            }</div><div class=\"line\">        }</div><div class=\"line\">            sort(que, que + z_num);</div><div class=\"line\">            z_num = unique(que, que + z_num) - que;</div><div class=\"line\">            REP(i, id)  queries[i].z = lower_bound(que, que + z_num, queries[i].z) - que + <span class=\"number\">1</span>;</div><div class=\"line\">            solve1(<span class=\"number\">0</span>, id - <span class=\"number\">1</span>);</div><div class=\"line\">            REP(i, n)</div><div class=\"line\">                <span class=\"keyword\">if</span>(ans[i] != -<span class=\"number\">1</span>)</div><div class=\"line\">                    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, ans[i]);</div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n","source":"_posts/CDQ分治.md","raw":"title: CDQ分治 && HDU 5126\ncategories: Algorithm\ndate: 2015-05-02 16:48:26\ntags:\n    - HDU\n    \ndescription:\n---\n参考文献：[从《Cash》谈一类分治算法的应用](http://wenku.baidu.com/view/52f9c11cff00bed5b9f31d2d.html) -- 陈丹琦\n\n也因此简称CDQ分治。\n\n个人理解CDQ分治和普通分治最大的区别为：\n普通分治可以将问题拆成几个相互独立的子问题\nCDQ分治将问题分成了两个部分：\n1.  相互独立的两个子问题  \n2.  两个子问题之间的联系\n\n因此，CDQ分治的算法流程也分为以下几步：\n> 1.  算法开始\n> 2.  取一个中间点mid, 将问题分为[L, mid] 和 [mid + 1, R]两个部分。分别处理两个子问题\n> 3.  处理[L, mid] 和 [mid + 1, R]之间的联系\n\n<!--more-->\n\n举个例子：在二维坐标系中，有n个点，m个询问。对于每个询问(x, y)，求点(x1, x2) ，x1<= x && y1 <= y 有多少个。\n\n当然，这题用树状数组就直接能写了。但是我们在这里用CDQ分治来解决一下这个问题。\n\n我们将n个点看做是n个更新，并和m个询问放在一起。定义一个结构体用vector存起来。\n\n```c++\nvoid sovle1(int l, int r, vector<Struct>vec1) {\n    //在这里将vec1[l, r]按x从小到大排序\n    int mid = (l + r) / 2;\n    solve1(l, mid);\n    solve1(mid + 1, r);//划分成相互独立的子问题\n\n    //将vec1[l, mid]中的更新操作 和 vec1[mid + 1, r]中的询问操作,存到一个vec2中 \n    solve2(l, r, vec2);//左半边的更新操作和右半边的询问操作之间有联系\n}\n\nvoid solve2(int l, int r, vector<Struct>vec2) {\n//此时在solve2中已经不需要管x了。在vec2中所有的更新操作的x必然小于等于询问操作的x。\n    \n    //在这里将vec2[l, r]按y从小到大排序\n    int mid = (l + r) / 2;\n    sovle2(l, mid);\n    solve2(mid + 1, r);//独立子问题\n\n    //将vec2[l, mid]中的更新操作和vec2[mid + 1, r]中得询问操作存到一个vec3中\n    solve3(l, r, vec3);//\n}\n\nvoid solve3（int l, int r, vector<Struct>vec3） {\n//此时在solve3中，x和y都是已经排好序的。从前到后遍历该更新更新该询问询问就好。\n    int cal = 0;\n    for(Struct tmp: vec3) {\n        if(tmp.type == Update)  ++cal;\n        else tmp.query_anser += cal;\n    }\n}\n//这段代码其中有许多可以优化的地方，但是不要在意细节，主要是为了更加方便地理解算法\n```\n\n虽然解法不如树状数组，但是我们得看到题目扩展后的好处。\n我们看到，当到solve2时，函数中的参数`vec2`已经不用再管他的x了（`请务必深刻理解为什么不用再管了`）。\n这样的好处在哪里？没错，**降维！**\n假如我们要处理的不是二维，而是三维四维依旧可以这么处理，每一个维度只不过加了O(log)的复杂度而已。\n**如果是随时可以更新查询的操作，只不过也只是把时间当成一个维度而已。**（光是这一点就已经牛逼哄哄够解决大部分题目了。）\n\n然后就是下面这道题，三维且可随时更新查询：\nHDU 5126 starts: [传送门](http://acm.hdu.edu.cn/showproblem.php?pid=5126)\n\n```c++\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n#include <vector>\n#include <cstdlib>\n\nusing namespace std;\n\n#define FOR(i,l,r)  for(int i=(l); i<=(r); ++i)\n#define REP(i,r)    for(int i=0; i<(r); ++i)\n#define DWN(i,r,l)  for(int i=(r);i>=(l);--i)\n\n#define pb push_back\n\ntypedef long long ll;\ntypedef pair<int, int>pii;\n\nconst int N = 5e4 + 100;\nint que[N << 1];\nint ans[N];\nint z_num;\nint node[N << 1];\nstruct Query {\n    int x, y, z, kind, id;\n    Query() {}\n    Query(int _x, int _y, int _z, int _kind, int _id) : x(_x), y(_y), z(_z), kind(_kind), id(_id) {}\n}queries[N << 3], queries_x[N<<3], queries_y[N << 3];\n\nbool cmpx(Query a, Query b) {\n    return a.x < b.x || (a.x == b.x && a.kind < b.kind);\n}\nbool cmpy(Query a, Query b) {\n    return a.y < b.y || (a.y == b.y && a.kind < b.kind);\n}\n\ninline int lowbit(int x)    {return x&-x;}\nvoid update(int pos, int value) {\n    while(pos <= z_num) {\n        node[pos] += value;\n        pos += lowbit(pos);\n    }\n}\nint query(int pos) {\n    int ret = 0;\n    while(pos) {\n        ret += node[pos];\n        pos -= lowbit(pos);\n    }\n    return ret;\n}\n\nvoid solve3(int l, int r) {//只剩下二维y和z，直接就是二维的更新查询题目，树状数组解决就好了\n    if(l >= r)  return;\n    FOR(i, l, r)\n        if(queries_y[i].kind == 0)  update(queries_y[i].z, 1);\n        else if(queries_y[i].kind == 1)  ans[ queries_y[i].id ] -= query(queries_y[i].z);\n        else if(queries_y[i].kind == 2) ans[ queries_y[i].id ] += query(queries_y[i].z);\n    FOR(i, l, r)\n        if(queries_y[i].kind == 0)  update(queries_y[i].z, -1);\n}\n\n\nvoid solve2(int l, int r) {//把x这一维度消除\n    if(l >= r)  return;\n    int mid = (l+r)>>1;\n    solve2(l, mid);\n    solve2(mid + 1, r);\n\n    int num = 0;\n    FOR(i, l, mid)  if(queries_x[i].kind == 0)  queries_y[num++] = queries_x[i];\n    FOR(i, mid+1, r)    if(queries_x[i].kind)  queries_y[num++] = queries_x[i];\n    sort(queries_y, queries_y + num, cmpy);\n    solve3(0, num - 1);\n}\n\nvoid solve1(int l, int r) {//已经默认时间从小到大排序了，把时间这一维度消除\n    if(l >= r)  return;\n    int mid = (l+r)>>1;\n    solve1(l, mid);\n    solve1(mid + 1, r);\n    int num = 0;\n    FOR(i, l, mid)  if(queries[i].kind == 0)    queries_x[num++] = queries[i];\n    FOR(i, mid + 1, r)  if(queries[i].kind)     queries_x[num++] = queries[i];\n    sort(queries_x, queries_x + num, cmpx);//对x从小到大排序\n    solve2(0, num - 1);\n}\n\n\nint main() {\n    int casnum, n;\n    int x1, x2, y1, y2, z1, z2, kind;\n    cin >> casnum;\n    while(casnum--) {\n        memset(ans, -1, sizeof(ans));\n        cin >> n;\n        int id = 0;\n        z_num = 0;\n        REP(i, n) {\n            scanf(\"%d\", &kind);\n            if(kind == 1) {\n                scanf(\"%d%d%d\", &x1, &y1, &z1);\n                queries[id++] = Query(x1, y1, z1, 0, i);\n                que[z_num++] = z1;\n            } else {\n                ans[i] = 0;\n                scanf(\"%d%d%d%d%d%d\", &x1, &y1, &z1, &x2, &y2, &z2);\n                queries[id++] = Query(x2    , y2    , z2    , 2, i);\n                queries[id++] = Query(x2    , y2    , z1 - 1, 1, i);\n                queries[id++] = Query(x2    , y1 - 1, z2    , 1, i);\n                queries[id++] = Query(x1 - 1, y2    , z2    , 1, i);\n                queries[id++] = Query(x2    , y1 - 1, z1 - 1, 2, i);\n                queries[id++] = Query(x1 - 1, y2    , z1 - 1, 2, i);\n                queries[id++] = Query(x1 - 1, y1 - 1, z2    , 2, i);\n                queries[id++] = Query(x1 - 1, y1 - 1, z1 - 1, 1, i);\n                que[z_num++] = z2;\n                que[z_num++] = z1 - 1;\n            }\n        }\n            sort(que, que + z_num);\n            z_num = unique(que, que + z_num) - que;\n            REP(i, id)  queries[i].z = lower_bound(que, que + z_num, queries[i].z) - que + 1;\n            solve1(0, id - 1);\n            REP(i, n)\n                if(ans[i] != -1)\n                    printf(\"%d\\n\", ans[i]);\n    }\n\n    return 0;\n}\n```\n","slug":"CDQ分治","updated":1430918643000,"excerpt":"<p>参考文献：<a href=\"http://wenku.baidu.com/view/52f9c11cff00bed5b9f31d2d.html\" target=\"_blank\" rel=\"external\">从《Cash》谈一类分治算法的应用</a> — 陈丹琦</p>\n<p>也因此简称CDQ分治。</p>\n<p>个人理解CDQ分治和普通分治最大的区别为：<br>普通分治可以将问题拆成几个相互独立的子问题<br>CDQ分治将问题分成了两个部分：</p>\n<ol>\n<li>相互独立的两个子问题  </li>\n<li>两个子问题之间的联系</li>\n</ol>\n<p>因此，CDQ分治的算法流程也分为以下几步：</p>\n<blockquote>\n<ol>\n<li>算法开始</li>\n<li>取一个中间点mid, 将问题分为[L, mid] 和 [mid + 1, R]两个部分。分别处理两个子问题</li>\n<li>处理[L, mid] 和 [mid + 1, R]之间的联系</li>\n</ol>\n</blockquote>\n","_id":"tckrbk2lq4va2ljt","comments":true,"layout":"post","photos":[],"link":""}],"Tag":[{"name":"随笔","_id":"ky2pavmo3l6ze5fj","posts":[]},{"name":"MacOS","_id":"mrfrsxi5yfcw931g","posts":["lnm14yyf649r6mx6"]},{"name":"VIM","_id":"ofh76mxkkzl3ffjk","posts":["lnm14yyf649r6mx6"]},{"name":"BestCoder","_id":"xi7i2cqpggj6wdrd","posts":["uosts3uvzuhw2fm2","ilh9t48674sb37tz"]},{"name":"HDU","_id":"d9spl3ft3o7i5gd2","posts":["tckrbk2lq4va2ljt"]}]}