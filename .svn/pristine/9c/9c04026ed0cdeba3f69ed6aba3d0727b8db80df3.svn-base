<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="baidu-site-verification" content="FNQZfwk2LO" />
  <meta name="google-site-verification" content="Tiy4g_fxDyWORG0NcTPGtG9BomPV280Nfmd_a4DwBnM" />
  
  <title>CDQ分治 &amp;&amp; HDU 5126 | Teveillan</title>
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
  <meta name="description" content="参考文献：从《Cash》谈一类分治算法的应用 — 陈丹琦
也因此简称CDQ分治。
个人理解CDQ分治和普通分治最大的区别为：普通分治可以将问题拆成几个相互独立的子问题CDQ分治将问题分成了两个部分：

相互独立的两个子问题  
两个子问题之间的联系

因此，CDQ分治的算法流程也分为以下几步：


算法开始
取一个中间点mid, 将问题分为[L, mid] 和 [mid + 1, R]两个部分。分">
<meta property="og:type" content="article">
<meta property="og:title" content="CDQ分治 && HDU 5126">
<meta property="og:url" content="http://teveillan.com/2015/05/02/CDQ分治/">
<meta property="og:site_name" content="Teveillan">
<meta property="og:description" content="参考文献：从《Cash》谈一类分治算法的应用 — 陈丹琦
也因此简称CDQ分治。
个人理解CDQ分治和普通分治最大的区别为：普通分治可以将问题拆成几个相互独立的子问题CDQ分治将问题分成了两个部分：

相互独立的两个子问题  
两个子问题之间的联系

因此，CDQ分治的算法流程也分为以下几步：


算法开始
取一个中间点mid, 将问题分为[L, mid] 和 [mid + 1, R]两个部分。分">
<meta name="twitter:card" content="summary">
<meta name="twitter:title" content="CDQ分治 && HDU 5126">
<meta name="twitter:description" content="参考文献：从《Cash》谈一类分治算法的应用 — 陈丹琦
也因此简称CDQ分治。
个人理解CDQ分治和普通分治最大的区别为：普通分治可以将问题拆成几个相互独立的子问题CDQ分治将问题分成了两个部分：

相互独立的两个子问题  
两个子问题之间的联系

因此，CDQ分治的算法流程也分为以下几步：


算法开始
取一个中间点mid, 将问题分为[L, mid] 和 [mid + 1, R]两个部分。分">

  
    <link rel="alternative" href="/atom.xml" title="Teveillan" type="application/atom+xml">
  
  
    <link rel="icon" href="/favicon.png">
  
  <link rel="stylesheet" href="/css/style.css" type="text/css">

  

  <script src="http://libs.baidu.com/jquery/1.9.0/jquery.js"></script>
</head>

<body>
  <div id="container">
    <div class="left-col">
    <div class="overlay"></div>
<div class="intrude-less">
	<header id="header" class="inner">
		<div class="profilepic">
			<img src="https://raw.githubusercontent.com/Teveillan/Teveillan.github.io/master/img/teveillan.jpg">
		</div>

		<hgroup>
		  <h1 class="header-author"><a href="/">Teveillan</a></h1>
		</hgroup>

		
		<p class="header-subtitle">不把CF TC刷红的人生是不完整的。</p>
		

		
			<div class="switch-btn">
				<div class="icon">
					<div class="icon-ctn">
						<div class="icon-wrap icon-house" data-idx="0">
							<div class="birdhouse"></div>
							<div class="birdhouse_holes"></div>
						</div>
						<div class="icon-wrap icon-ribbon hide" data-idx="1">
							<div class="ribbon"></div>
						</div>
						
						<div class="icon-wrap icon-link hide" data-idx="2">
							<div class="loopback_l"></div>
							<div class="loopback_r"></div>
						</div>
						
						
						<div class="icon-wrap icon-me hide" data-idx="3">
							<div class="user"></div>
							<div class="shoulder"></div>
						</div>
						
					</div>
					
				</div>
				<div class="tips-box hide">
					<div class="tips-arrow"></div>
					<ul class="tips-inner">
						<li>菜单</li>
						<li>标签</li>
						
						<li>友情链接</li>
						
						
						<li>关于我</li>
						
					</ul>
				</div>
			</div>
		

		<div class="switch-area">
			<div class="switch-wrap">
				<section class="switch-part switch-part1">
					<nav class="header-menu">
						<ul>
						
							<li><a href="/">主页</a></li>
				        
							<li><a href="/archives">所有文章</a></li>
				        
							<li><a href="/categories/红名">红名</a></li>
				        
							<li><a href="/categories/Tech">Tech</a></li>
				        
						</ul>
					</nav>
					<nav class="header-nav">
						<div class="social">
							
								<a class="github" target="_blank" href="https://github.com/teveillan" title="github">github</a>
					        
								<a class="rss" target="_blank" href="/atom.xml" title="rss">rss</a>
					        
								<a class="google" target="_blank" href="mailto:teveillan@gmail.com" title="google">google</a>
					        
						</div>
					</nav>
				</section>
				
				
				<section class="switch-part switch-part2">
					<div class="widget tagcloud">
						<a href="/tags/BestCoder/" style="font-size: 20.00px;">BestCoder</a><a href="/tags/HDU/" style="font-size: 15.00px;">HDU</a><a href="/tags/MacOS/" style="font-size: 15.00px;">MacOS</a><a href="/tags/VIM/" style="font-size: 15.00px;">VIM</a><a href="/tags/随笔/" style="font-size: 10.00px;">随笔</a>
					</div>
				</section>
				
				
				
				<section class="switch-part switch-part3">
					
			          <a target="_blank" class="main-nav-link switch-friends-link" href="http://darkrhythm.net/">Pira-黄大神</a>
			        
			          <a target="_blank" class="main-nav-link switch-friends-link" href="http://litten.github.io/">Litten</a>
			        
				</section>
				

				
				
				<section class="switch-part switch-part4">
				
					我是谁，我从哪里来，我到哪里去？我就是我，是颜色不一样的吃货…
				</section>
				
			</div>
		</div>
	</header>				
</div>
    </div>
    <div class="mid-col">
      <nav id="mobile-nav">
  	<div class="overlay"></div>
	<div class="intrude-less">
		<header id="header" class="inner">
			<div class="profilepic">
				<img src="https://raw.githubusercontent.com/Teveillan/Teveillan.github.io/master/img/teveillan.jpg">
			</div>

			<hgroup>
			  <h1 class="header-author"><a href="/">Teveillan</a></h1>
			</hgroup>
			
			<p class="header-subtitle">不把CF TC刷红的人生是不完整的。</p>
			
			<nav class="header-menu">
				<ul>
				
					<li><a href="/">主页</a></li>
		        
					<li><a href="/archives">所有文章</a></li>
		        
					<li><a href="/categories/红名">红名</a></li>
		        
					<li><a href="/categories/Tech">Tech</a></li>
		        
		        <div class="clearfix"></div>
				</ul>
			</nav>
			<nav class="header-nav">
				<div class="social">
					
						<a class="github" target="_blank" href="https://github.com/teveillan" title="github">github</a>
			        
						<a class="rss" target="_blank" href="/atom.xml" title="rss">rss</a>
			        
						<a class="google" target="_blank" href="mailto:teveillan@gmail.com" title="google">google</a>
			        
				</div>
			</nav>
		</header>				
	</div>
</nav>
      <article id="post-CDQ分治" class="article article-type-post" itemscope itemprop="blogPost">
  
    <div class="article-meta">
      <a href="/2015/05/02/CDQ分治/" class="article-date">
  	<time datetime="2015-05-02T08:48:26.000Z" itemprop="datePublished">5月 2 2015</time>
</a>
      
  <div class="article-category">
    <a class="article-category-link" href="/categories/Algorithm/">Algorithm</a>
  </div>

      
  <ul class="article-tag-list"><li class="article-tag-list-item"><a class="article-tag-list-link" href="/tags/HDU/">HDU</a></li></ul>

    </div>
  
  <div class="article-inner">
    
      <input type="hidden" class="isFancy" />
    
    
      <header class="article-header">
        
  
    <h1 class="article-title" itemprop="name">
      CDQ分治 &amp;&amp; HDU 5126
    </h1>
  

      </header>
    
    <div class="article-entry" itemprop="articleBody">
      
        <p>参考文献：<a href="http://wenku.baidu.com/view/52f9c11cff00bed5b9f31d2d.html" target="_blank" rel="external">从《Cash》谈一类分治算法的应用</a> — 陈丹琦</p>
<p>也因此简称CDQ分治。</p>
<p>个人理解CDQ分治和普通分治最大的区别为：<br>普通分治可以将问题拆成几个相互独立的子问题<br>CDQ分治将问题分成了两个部分：</p>
<ol>
<li>相互独立的两个子问题  </li>
<li>两个子问题之间的联系</li>
</ol>
<p>因此，CDQ分治的算法流程也分为以下几步：</p>
<blockquote>
<ol>
<li>算法开始</li>
<li>取一个中间点mid, 将问题分为[L, mid] 和 [mid + 1, R]两个部分。分别处理两个子问题</li>
<li>处理[L, mid] 和 [mid + 1, R]之间的联系</li>
</ol>
</blockquote>
<a id="more"></a>

<p>举个例子：在二维坐标系中，有n个点，m个询问。对于每个询问(x, y)，求点(x1, x2) ，x1&lt;= x &amp;&amp; y1 &lt;= y 有多少个。</p>
<p>当然，这题用树状数组就直接能写了。但是我们在这里用CDQ分治来解决一下这个问题。</p>
<p>我们将n个点看做是n个更新，并和m个询问放在一起。定义一个结构体用vector存起来。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> sovle1(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="stl_container"><span class="built_in">vector</span>&lt;Struct&gt;</span>vec1) {</div><div class="line">    <span class="comment">//在这里将vec1[l, r]按x从小到大排序</span></div><div class="line">    <span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</div><div class="line">    solve1(l, mid);</div><div class="line">    solve1(mid + <span class="number">1</span>, r);<span class="comment">//划分成相互独立的子问题</span></div><div class="line"></div><div class="line">    <span class="comment">//将vec1[l, mid]中的更新操作 和 vec1[mid + 1, r]中的询问操作,存到一个vec2中 </span></div><div class="line">    solve2(l, r, vec2);<span class="comment">//左半边的更新操作和右半边的询问操作之间有联系</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">void</span> solve2(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="stl_container"><span class="built_in">vector</span>&lt;Struct&gt;</span>vec2) {</div><div class="line"><span class="comment">//此时在solve2中已经不需要管x了。在vec2中所有的更新操作的x必然小于等于询问操作的x。</span></div><div class="line">    </div><div class="line">    <span class="comment">//在这里将vec2[l, r]按y从小到大排序</span></div><div class="line">    <span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</div><div class="line">    sovle2(l, mid);</div><div class="line">    solve2(mid + <span class="number">1</span>, r);<span class="comment">//独立子问题</span></div><div class="line"></div><div class="line">    <span class="comment">//将vec2[l, mid]中的更新操作和vec2[mid + 1, r]中得询问操作存到一个vec3中</span></div><div class="line">    solve3(l, r, vec3);<span class="comment">//</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">void</span> solve3（<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="stl_container"><span class="built_in">vector</span>&lt;Struct&gt;</span>vec3） {</div><div class="line"><span class="comment">//此时在solve3中，x和y都是已经排好序的。从前到后遍历该更新更新该询问询问就好。</span></div><div class="line">    <span class="keyword">int</span> cal = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(Struct tmp: vec3) {</div><div class="line">        <span class="keyword">if</span>(tmp.type == Update)  ++cal;</div><div class="line">        <span class="keyword">else</span> tmp.query_anser += cal;</div><div class="line">    }</div><div class="line">}</div><div class="line"><span class="comment">//这段代码其中有许多可以优化的地方，但是不要在意细节，主要是为了更加方便地理解算法</span></div></pre></td></tr></table></figure>

<p>虽然解法不如树状数组，但是我们得看到题目扩展后的好处。<br>我们看到，当到solve2时，函数中的参数<code>vec2</code>已经不用再管他的x了（<code>请务必深刻理解为什么不用再管了</code>）。<br>这样的好处在哪里？没错，<strong>降维！</strong><br>假如我们要处理的不是二维，而是三维四维依旧可以这么处理，每一个维度只不过加了O(log)的复杂度而已。<br><strong>如果是随时可以更新查询的操作，只不过也只是把时间当成一个维度而已。</strong>（光是这一点就已经牛逼哄哄够解决大部分题目了。）</p>
<p>然后就是下面这道题，三维且可随时更新查询：<br>HDU 5126 starts: <a href="http://acm.hdu.edu.cn/showproblem.php?pid=5126" target="_blank" rel="external">传送门</a></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;vector&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdlib&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> FOR(i,l,r)  for(int i=(l); i&lt;=(r); ++i)</span></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> REP(i,r)    for(int i=0; i&lt;(r); ++i)</span></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> DWN(i,r,l)  for(int i=(r);i&gt;=(l);--i)</span></div><div class="line"></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;pii;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e4</span> + <span class="number">100</span>;</div><div class="line"><span class="keyword">int</span> que[N &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> ans[N];</div><div class="line"><span class="keyword">int</span> z_num;</div><div class="line"><span class="keyword">int</span> node[N &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">struct</span> Query {</div><div class="line">    <span class="keyword">int</span> x, y, z, kind, id;</div><div class="line">    Query() {}</div><div class="line">    Query(<span class="keyword">int</span> _x, <span class="keyword">int</span> _y, <span class="keyword">int</span> _z, <span class="keyword">int</span> _kind, <span class="keyword">int</span> _id) : x(_x), y(_y), z(_z), kind(_kind), id(_id) {}</div><div class="line">}queries[N &lt;&lt; <span class="number">3</span>], queries_x[N&lt;&lt;<span class="number">3</span>], queries_y[N &lt;&lt; <span class="number">3</span>];</div><div class="line"></div><div class="line"><span class="keyword">bool</span> cmpx(Query a, Query b) {</div><div class="line">    <span class="keyword">return</span> a.x &lt; b.x || (a.x == b.x && a.kind &lt; b.kind);</div><div class="line">}</div><div class="line"><span class="keyword">bool</span> cmpy(Query a, Query b) {</div><div class="line">    <span class="keyword">return</span> a.y &lt; b.y || (a.y == b.y && a.kind &lt; b.kind);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">inline</span> <span class="keyword">int</span> lowbit(<span class="keyword">int</span> x)    {<span class="keyword">return</span> x&-x;}</div><div class="line"><span class="keyword">void</span> update(<span class="keyword">int</span> pos, <span class="keyword">int</span> value) {</div><div class="line">    <span class="keyword">while</span>(pos &lt;= z_num) {</div><div class="line">        node[pos] += value;</div><div class="line">        pos += lowbit(pos);</div><div class="line">    }</div><div class="line">}</div><div class="line"><span class="keyword">int</span> query(<span class="keyword">int</span> pos) {</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(pos) {</div><div class="line">        ret += node[pos];</div><div class="line">        pos -= lowbit(pos);</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">void</span> solve3(<span class="keyword">int</span> l, <span class="keyword">int</span> r) {<span class="comment">//只剩下二维y和z，直接就是二维的更新查询题目，树状数组解决就好了</span></div><div class="line">    <span class="keyword">if</span>(l &gt;= r)  <span class="keyword">return</span>;</div><div class="line">    FOR(i, l, r)</div><div class="line">        <span class="keyword">if</span>(queries_y[i].kind == <span class="number">0</span>)  update(queries_y[i].z, <span class="number">1</span>);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(queries_y[i].kind == <span class="number">1</span>)  ans[ queries_y[i].id ] -= query(queries_y[i].z);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(queries_y[i].kind == <span class="number">2</span>) ans[ queries_y[i].id ] += query(queries_y[i].z);</div><div class="line">    FOR(i, l, r)</div><div class="line">        <span class="keyword">if</span>(queries_y[i].kind == <span class="number">0</span>)  update(queries_y[i].z, -<span class="number">1</span>);</div><div class="line">}</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">void</span> solve2(<span class="keyword">int</span> l, <span class="keyword">int</span> r) {<span class="comment">//把x这一维度消除</span></div><div class="line">    <span class="keyword">if</span>(l &gt;= r)  <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">    solve2(l, mid);</div><div class="line">    solve2(mid + <span class="number">1</span>, r);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</div><div class="line">    FOR(i, l, mid)  <span class="keyword">if</span>(queries_x[i].kind == <span class="number">0</span>)  queries_y[num++] = queries_x[i];</div><div class="line">    FOR(i, mid+<span class="number">1</span>, r)    <span class="keyword">if</span>(queries_x[i].kind)  queries_y[num++] = queries_x[i];</div><div class="line">    sort(queries_y, queries_y + num, cmpy);</div><div class="line">    solve3(<span class="number">0</span>, num - <span class="number">1</span>);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">void</span> solve1(<span class="keyword">int</span> l, <span class="keyword">int</span> r) {<span class="comment">//已经默认时间从小到大排序了，把时间这一维度消除</span></div><div class="line">    <span class="keyword">if</span>(l &gt;= r)  <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">    solve1(l, mid);</div><div class="line">    solve1(mid + <span class="number">1</span>, r);</div><div class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</div><div class="line">    FOR(i, l, mid)  <span class="keyword">if</span>(queries[i].kind == <span class="number">0</span>)    queries_x[num++] = queries[i];</div><div class="line">    FOR(i, mid + <span class="number">1</span>, r)  <span class="keyword">if</span>(queries[i].kind)     queries_x[num++] = queries[i];</div><div class="line">    sort(queries_x, queries_x + num, cmpx);<span class="comment">//对x从小到大排序</span></div><div class="line">    solve2(<span class="number">0</span>, num - <span class="number">1</span>);</div><div class="line">}</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">int</span> main() {</div><div class="line">    <span class="keyword">int</span> casnum, n;</div><div class="line">    <span class="keyword">int</span> x1, x2, y1, y2, z1, z2, kind;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; casnum;</div><div class="line">    <span class="keyword">while</span>(casnum--) {</div><div class="line">        <span class="built_in">memset</span>(ans, -<span class="number">1</span>, <span class="keyword">sizeof</span>(ans));</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; n;</div><div class="line">        <span class="keyword">int</span> id = <span class="number">0</span>;</div><div class="line">        z_num = <span class="number">0</span>;</div><div class="line">        REP(i, n) {</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &kind);</div><div class="line">            <span class="keyword">if</span>(kind == <span class="number">1</span>) {</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &x1, &y1, &z1);</div><div class="line">                queries[id++] = Query(x1, y1, z1, <span class="number">0</span>, i);</div><div class="line">                que[z_num++] = z1;</div><div class="line">            } <span class="keyword">else</span> {</div><div class="line">                ans[i] = <span class="number">0</span>;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%d%d"</span>, &x1, &y1, &z1, &x2, &y2, &z2);</div><div class="line">                queries[id++] = Query(x2    , y2    , z2    , <span class="number">2</span>, i);</div><div class="line">                queries[id++] = Query(x2    , y2    , z1 - <span class="number">1</span>, <span class="number">1</span>, i);</div><div class="line">                queries[id++] = Query(x2    , y1 - <span class="number">1</span>, z2    , <span class="number">1</span>, i);</div><div class="line">                queries[id++] = Query(x1 - <span class="number">1</span>, y2    , z2    , <span class="number">1</span>, i);</div><div class="line">                queries[id++] = Query(x2    , y1 - <span class="number">1</span>, z1 - <span class="number">1</span>, <span class="number">2</span>, i);</div><div class="line">                queries[id++] = Query(x1 - <span class="number">1</span>, y2    , z1 - <span class="number">1</span>, <span class="number">2</span>, i);</div><div class="line">                queries[id++] = Query(x1 - <span class="number">1</span>, y1 - <span class="number">1</span>, z2    , <span class="number">2</span>, i);</div><div class="line">                queries[id++] = Query(x1 - <span class="number">1</span>, y1 - <span class="number">1</span>, z1 - <span class="number">1</span>, <span class="number">1</span>, i);</div><div class="line">                que[z_num++] = z2;</div><div class="line">                que[z_num++] = z1 - <span class="number">1</span>;</div><div class="line">            }</div><div class="line">        }</div><div class="line">            sort(que, que + z_num);</div><div class="line">            z_num = unique(que, que + z_num) - que;</div><div class="line">            REP(i, id)  queries[i].z = lower_bound(que, que + z_num, queries[i].z) - que + <span class="number">1</span>;</div><div class="line">            solve1(<span class="number">0</span>, id - <span class="number">1</span>);</div><div class="line">            REP(i, n)</div><div class="line">                <span class="keyword">if</span>(ans[i] != -<span class="number">1</span>)</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure>


      
    </div>
    <footer class="article-footer">
      
      
    </footer>
  </div>
  
    
<nav id="article-nav">
  
  
    <a href="/2015/04/21/HDU-5208-Where-is-Bob-Bestcoder-Round38-C题/" id="article-nav-older" class="article-nav-link-wrap">
      <div class="article-nav-title">HDU 5208 Where is Bob &amp;&amp; Bestcoder Round38 C题</div>
      <strong class="article-nav-caption">&gt;</strong>
    </a>
  
</nav>

  
</article>


<div class="share">
	<!-- JiaThis Button BEGIN -->
	<div class="jiathis_style">
		<span class="jiathis_txt">分享到：</span>
		<a class="jiathis_button_tsina"></a>
		<a class="jiathis_button_cqq"></a>
		<a class="jiathis_button_douban"></a>
		<a class="jiathis_button_weixin"></a>
		<a class="jiathis_button_tumblr"></a>
		<a href="http://www.jiathis.com/share" class="jiathis jiathis_txt jtico jtico_jiathis" target="_blank"></a>
	</div>
	<script type="text/javascript" src="http://v3.jiathis.com/code/jia.js?uid=1405949716054953" charset="utf-8"></script>
	<!-- JiaThis Button END -->
</div>



<div class="duoshuo">
	<!-- 多说评论框 start -->
	<div class="ds-thread" data-thread-key="CDQ分治" data-title="CDQ分治 &amp;&amp; HDU 5126" data-url="http://teveillan.com/2015/05/02/CDQ分治/"></div>
	<!-- 多说评论框 end -->
	<!-- 多说公共JS代码 start (一个网页只需插入一次) -->
	<script type="text/javascript">
	var duoshuoQuery = {short_name:"teveillan"};
	(function() {
		var ds = document.createElement('script');
		ds.type = 'text/javascript';ds.async = true;
		ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';
		ds.charset = 'UTF-8';
		(document.getElementsByTagName('head')[0] 
		 || document.getElementsByTagName('body')[0]).appendChild(ds);
	})();
	</script>
	<!-- 多说公共JS代码 end -->
</div>




      <footer id="footer">
  <div class="outer">
    <div id="footer-info">
    	<div class="footer-left">
    		&copy; 2015 Teveillan
    	</div>
      	<div class="footer-right">
      		<a href="http://hexo.io/" target="_blank">Hexo</a>  Theme <a href="https://github.com/litten/hexo-theme-yilia" target="_blank">Yilia</a> by Litten
      	</div>
    </div>
  </div>
</footer>
    </div>
    
  <link rel="stylesheet" href="/fancybox/jquery.fancybox.css" type="text/css">

  <script src="/fancybox/jquery.fancybox.pack.js" type="text/javascript"></script>

  <script src="/js/main.js" type="text/javascript"></script>


  </div>
</body>
</html>