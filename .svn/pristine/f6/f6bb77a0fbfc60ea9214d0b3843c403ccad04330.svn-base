<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="baidu-site-verification" content="FNQZfwk2LO" />
  <meta name="google-site-verification" content="Tiy4g_fxDyWORG0NcTPGtG9BomPV280Nfmd_a4DwBnM" />
  
  <title>BestCoder Round #25 | Teveillan</title>
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
  <meta name="description" content="1001 Harry and Magical Computer
就是判断有没有环存在。点比较少，Floyd一遍O(n^3)就行。
1002 Harry And Magic Box
官方题解是O(n^4)的，其实中间有一维可以省略。（小地方而已。。不管也罢。。）">
<meta property="og:type" content="article">
<meta property="og:title" content="BestCoder Round #25">
<meta property="og:url" content="http://teveillan.com/2015/01/09/BestCoder-Round-25/">
<meta property="og:site_name" content="Teveillan">
<meta property="og:description" content="1001 Harry and Magical Computer
就是判断有没有环存在。点比较少，Floyd一遍O(n^3)就行。
1002 Harry And Magic Box
官方题解是O(n^4)的，其实中间有一维可以省略。（小地方而已。。不管也罢。。）">
<meta name="twitter:card" content="summary">
<meta name="twitter:title" content="BestCoder Round #25">
<meta name="twitter:description" content="1001 Harry and Magical Computer
就是判断有没有环存在。点比较少，Floyd一遍O(n^3)就行。
1002 Harry And Magic Box
官方题解是O(n^4)的，其实中间有一维可以省略。（小地方而已。。不管也罢。。）">

  
    <link rel="alternative" href="/atom.xml" title="Teveillan" type="application/atom+xml">
  
  
    <link rel="icon" href="/favicon.png">
  
  <link rel="stylesheet" href="/css/style.css" type="text/css">

  

  <script src="http://libs.baidu.com/jquery/1.9.0/jquery.js"></script>
</head>

<body>
  <div id="container">
    <div class="left-col">
    <div class="overlay"></div>
<div class="intrude-less">
	<header id="header" class="inner">
		<div class="profilepic">
			<img src="https://raw.githubusercontent.com/Teveillan/Teveillan.github.io/master/img/teveillan.jpg">
		</div>

		<hgroup>
		  <h1 class="header-author"><a href="/">Teveillan</a></h1>
		</hgroup>

		
		<p class="header-subtitle">不把CF TC刷红的人生是不完整的。</p>
		

		
			<div class="switch-btn">
				<div class="icon">
					<div class="icon-ctn">
						<div class="icon-wrap icon-house" data-idx="0">
							<div class="birdhouse"></div>
							<div class="birdhouse_holes"></div>
						</div>
						<div class="icon-wrap icon-ribbon hide" data-idx="1">
							<div class="ribbon"></div>
						</div>
						
						<div class="icon-wrap icon-link hide" data-idx="2">
							<div class="loopback_l"></div>
							<div class="loopback_r"></div>
						</div>
						
						
						<div class="icon-wrap icon-me hide" data-idx="3">
							<div class="user"></div>
							<div class="shoulder"></div>
						</div>
						
					</div>
					
				</div>
				<div class="tips-box hide">
					<div class="tips-arrow"></div>
					<ul class="tips-inner">
						<li>菜单</li>
						<li>标签</li>
						
						<li>友情链接</li>
						
						
						<li>关于我</li>
						
					</ul>
				</div>
			</div>
		

		<div class="switch-area">
			<div class="switch-wrap">
				<section class="switch-part switch-part1">
					<nav class="header-menu">
						<ul>
						
							<li><a href="/">主页</a></li>
				        
							<li><a href="/archives">所有文章</a></li>
				        
							<li><a href="/categories/红名">红名</a></li>
				        
							<li><a href="/categories/Tech">Tech</a></li>
				        
						</ul>
					</nav>
					<nav class="header-nav">
						<div class="social">
							
								<a class="github" target="_blank" href="https://github.com/teveillan" title="github">github</a>
					        
								<a class="rss" target="_blank" href="/atom.xml" title="rss">rss</a>
					        
						</div>
					</nav>
				</section>
				
				
				<section class="switch-part switch-part2">
					<div class="widget tagcloud">
						<a href="/tags/BestCoder/" style="font-size: 20.00px;">BestCoder</a><a href="/tags/HDU/" style="font-size: 15.00px;">HDU</a><a href="/tags/MacOS/" style="font-size: 15.00px;">MacOS</a><a href="/tags/VIM/" style="font-size: 15.00px;">VIM</a><a href="/tags/随笔/" style="font-size: 10.00px;">随笔</a>
					</div>
				</section>
				
				
				
				<section class="switch-part switch-part3">
					
			          <a target="_blank" class="main-nav-link switch-friends-link" href="http://darkrhythm.net/">Pira-黄大神</a>
			        
				</section>
				

				
				
				<section class="switch-part switch-part4">
				
					我是谁，我从哪里来，我到哪里去？我就是我，是颜色不一样的吃货…
				</section>
				
			</div>
		</div>
	</header>				
</div>
    </div>
    <div class="mid-col">
      <nav id="mobile-nav">
  	<div class="overlay"></div>
	<div class="intrude-less">
		<header id="header" class="inner">
			<div class="profilepic">
				<img src="https://raw.githubusercontent.com/Teveillan/Teveillan.github.io/master/img/teveillan.jpg">
			</div>

			<hgroup>
			  <h1 class="header-author"><a href="/">Teveillan</a></h1>
			</hgroup>
			
			<p class="header-subtitle">不把CF TC刷红的人生是不完整的。</p>
			
			<nav class="header-menu">
				<ul>
				
					<li><a href="/">主页</a></li>
		        
					<li><a href="/archives">所有文章</a></li>
		        
					<li><a href="/categories/红名">红名</a></li>
		        
					<li><a href="/categories/Tech">Tech</a></li>
		        
		        <div class="clearfix"></div>
				</ul>
			</nav>
			<nav class="header-nav">
				<div class="social">
					
						<a class="github" target="_blank" href="https://github.com/teveillan" title="github">github</a>
			        
						<a class="rss" target="_blank" href="/atom.xml" title="rss">rss</a>
			        
				</div>
			</nav>
		</header>				
	</div>
</nav>
      <article id="post-BestCoder-Round-25" class="article article-type-post" itemscope itemprop="blogPost">
  
    <div class="article-meta">
      <a href="/2015/01/09/BestCoder-Round-25/" class="article-date">
  	<time datetime="2015-01-09T05:57:46.000Z" itemprop="datePublished">1月 9 2015</time>
</a>
      
  <div class="article-category">
    <a class="article-category-link" href="/categories/红名/">红名</a>
  </div>

      
  <ul class="article-tag-list"><li class="article-tag-list-item"><a class="article-tag-list-link" href="/tags/BestCoder/">BestCoder</a></li></ul>

    </div>
  
  <div class="article-inner">
    
      <input type="hidden" class="isFancy" />
    
    
      <header class="article-header">
        
  
    <h1 class="article-title" itemprop="name">
      BestCoder Round #25
    </h1>
  

      </header>
    
    <div class="article-entry" itemprop="articleBody">
      
        <h2 id="1001_Harry_and_Magical_Computer">1001 Harry and Magical Computer</h2>
<p>就是判断有没有环存在。<br>点比较少，Floyd一遍O(n^3)就行。</p>
<h2 id="1002_Harry_And_Magic_Box">1002 Harry And Magic Box</h2>
<p>官方题解是O(n^4)的，其实中间有一维可以省略。（小地方而已。。不管也罢。。）<br><a id="more"></a><br>dp[i][j]表示第i行已经有j列被选过（这j个不一定全都是在第i行选的，有可能包括之前选的）。<br>则dp公式为： <code>(1 &lt;= k &lt;= j)</code></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(k == j)</div><div class="line">    dp[i][j] += dp[i-<span class="number">1</span>][k] * ((<span class="number">1</span>&lt;&lt;k) - <span class="number">1</span>);</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    dp[i][j] += dp[i-<span class="number">1</span>][k] * (<span class="number">1</span>&lt;&lt;k) * c[m-k][j-k];</div></pre></td></tr></table></figure>

<p>表示假如<code>k==j</code>，前k个中至少选一个，种类数为<code>((1&lt;&lt;k) - 1)</code>。<br>否则， 前k个随便选， 其余从<code>m-k</code>中选<code>j-k</code>个。<br>注意数据溢出。</p>
<h2 id="1003_Harry_and_Christmas_tree">1003 Harry and Christmas tree</h2>
<p>我是按照官方题解的思路。<br>对每种颜色单独考虑。对第i-1个有这种颜色点a, 第i个有这种颜色的点b， 以及a和b的lca点c。 在递归过程中，c之前的点都可以被贡献1中颜色，直到c以及c往上，贡献度为a和b各一个，然后减去a和b的重复一个，总共为1。</p>
<p>中间要用到lca算法，因为这道题就是按照递归的顺序进行遍历，用离线的lca就行。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stack&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;queue&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;vector&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;set&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;map&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cmath&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdlib&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> FOR(i,l,r)  for(int i=(l); i&lt;=(r); ++i)</span></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> REP(i,r)    for(int i=0; i&lt;(r); ++i)</span></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> DWN(i,r,l)  for(int i=(r);i&gt;=(l);--i)</span></div><div class="line"></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;pii;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e4</span> + <span class="number">1</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e5</span> + <span class="number">1</span>;</div><div class="line"><span class="stl_container"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;</span>head[N], gift[N];</div><div class="line"><span class="keyword">int</span> fa[N], ans[N];</div><div class="line"><span class="keyword">int</span> pre_color[M];</div><div class="line"></div><div class="line"><span class="keyword">inline</span> <span class="keyword">int</span> find(<span class="keyword">int</span> x) {</div><div class="line">    <span class="keyword">if</span>(x==fa[x])    <span class="keyword">return</span> x;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> fa[x] = find(fa[x]);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">void</span> dfs(<span class="keyword">int</span> now, <span class="keyword">int</span> pre) {</div><div class="line">    REP(i, head[now].size()) {</div><div class="line">        <span class="keyword">if</span>(head[now][i] != pre) {</div><div class="line">            dfs(head[now][i], now); </div><div class="line">            fa[ head[now][i] ] = now; <span class="comment">//离线lca中得一部分</span></div><div class="line">            ans[now] += ans[ head[now][i] ]; <span class="comment">//将子节点的贡献度加上来。（这时候子节点的贡献度已经是 总贡献度 - 重复次数 了）</span></div><div class="line">        }</div><div class="line">    }</div><div class="line">    REP(i, gift[now].size()) {</div><div class="line">        <span class="keyword">int</span> color = gift[now][i];</div><div class="line">        <span class="keyword">if</span>(!pre_color[color])  { <span class="comment">//第一个出现这种颜色，跳过不处理</span></div><div class="line">            pre_color[color] = now;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        }</div><div class="line">        <span class="keyword">int</span> lca = find(pre_color[color]); <span class="comment">// 找lca</span></div><div class="line">        --ans[lca]; <span class="comment">// 在lca上加上一个重复度, ans--</span></div><div class="line"></div><div class="line">        pre_color[color] = now;</div><div class="line">    }</div><div class="line">    ans[now] += gift[now].size(); <span class="comment">//加上本节点的贡献</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">int</span> main() {</div><div class="line">    <span class="comment">//freopen("in", "r", stdin);</span></div><div class="line">    <span class="keyword">int</span> n, m;</div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m) {</div><div class="line">        <span class="built_in">memset</span>(ans, <span class="number">0</span>, <span class="keyword">sizeof</span>(ans));</div><div class="line">        <span class="built_in">memset</span>(pre_color, <span class="number">0</span>, <span class="keyword">sizeof</span>(pre_color));</div><div class="line">        FOR(i, <span class="number">1</span>, n)    fa[i] = i, head[i].clear(), gift[i].clear();</div><div class="line">        REP(i, n-<span class="number">1</span>) {</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&x, &y);</div><div class="line">            head[x].pb(y);</div><div class="line">            head[y].pb(x);</div><div class="line">        }</div><div class="line">        <span class="keyword">while</span>(m--) {</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &x, &y);</div><div class="line">            gift[x].pb(y);</div><div class="line">        }</div><div class="line">        dfs(<span class="number">1</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line">        FOR(i, <span class="number">1</span>, n) {</div><div class="line">            <span class="keyword">if</span>(i!=<span class="number">1</span>)    <span class="built_in">putchar</span>(<span class="string">' '</span>);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans[i]);</div><div class="line">        }</div><div class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<h2 id="Harry_and_magic_string">Harry and magic string</h2>
<p>DP + Manacher算法</p>
<p>DP思路很简单。<br>sum[i] 表示以i结尾和i之前结尾的回文串总数。<br>dp[i] 表示以i开头的回文串数。</p>
<blockquote>
<p>ans = $$\sum_{i=1}^{len-1} {sum[i-1] * dp[i]}$$</p>
</blockquote>
<p>难点就是<code>sum[i]</code> 和 <code>dp[i]</code> 怎么求的问题了。<br>新学习了个算法， Manacher算法，在我转载的上篇文章中有讲解。<a href="http://teveillan.com/2015/01/09/-%E8%BD%AC-Manacher%E7%AE%97%E6%B3%95-%E5%9B%9E%E6%96%87%E4%B8%B2%E5%A4%84%E7%90%86/" target="_blank" rel="external">传送门</a></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstring&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stack&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;queue&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;vector&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;set&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;map&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cmath&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdlib&gt;</span></div><div class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> FOR(i,l,r)  for(int i=(l); i&lt;=(r); ++i)</span></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> REP(i,r)    for(int i=0; i&lt;(r); ++i)</span></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> DWN(i,r,l)  for(int i=(r);i&gt;=(l);--i)</span></div><div class="line"></div><div class="line"><span class="preprocessor">#<span class="keyword">define</span> pb push_back</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;pii;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_LEN = <span class="number">1e5</span> + <span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="keyword">char</span> str[MAX_LEN];</div><div class="line"><span class="keyword">int</span> Len[MAX_LEN&lt;&lt;<span class="number">1</span>];</div><div class="line"><span class="keyword">struct</span> Manacher { <span class="comment">// Manacher算法, 讲解看上篇文章</span></div><div class="line">    <span class="keyword">char</span> tmp_str[MAX_LEN&lt;&lt;<span class="number">1</span>];</div><div class="line">    <span class="keyword">int</span> init(<span class="keyword">char</span> *s) {</div><div class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</div><div class="line">        <span class="keyword">int</span> id = <span class="number">0</span>;</div><div class="line">        tmp_str[id++] = <span class="string">'#'</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; ++i) {</div><div class="line">            tmp_str[id++] = s[i];</div><div class="line">            tmp_str[id++] = <span class="string">'#'</span>;</div><div class="line">        }</div><div class="line">        tmp_str[id] = <span class="string">'\0'</span>;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">void</span> solve(<span class="keyword">char</span> *s) {</div><div class="line">        <span class="keyword">int</span> len = init(s);</div><div class="line">        <span class="keyword">int</span> max_r = -<span class="number">1</span>, max_id = -<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; ++i) {</div><div class="line">            <span class="keyword">if</span>(max_r &gt; i)   Len[i] = min(max_r - i, Len[<span class="number">2</span> * max_id - i]);</div><div class="line">            <span class="keyword">else</span> Len[i] = <span class="number">1</span>;</div><div class="line"></div><div class="line">            <span class="keyword">while</span>(i - Len[i] &gt;= <span class="number">0</span> && i + Len[i] &lt; len && tmp_str[i - Len[i]] == tmp_str[i + Len[i]])</div><div class="line">                ++Len[i];</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(i + Len[i] &gt; max_r) {</div><div class="line">                max_r = i + Len[i];</div><div class="line">                max_id = i;</div><div class="line">            }</div><div class="line">        }</div><div class="line">    }</div><div class="line">};</div><div class="line"></div><div class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum[MAX_LEN &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> flag[MAX_LEN &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> main() {</div><div class="line">    <span class="comment">//freopen("in", "r", stdin);</span></div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;str) {</div><div class="line">        <span class="built_in">memset</span>(sum, <span class="number">0</span>, <span class="keyword">sizeof</span>(sum));</div><div class="line">        <span class="built_in">memset</span>(flag, <span class="number">0</span> ,<span class="keyword">sizeof</span>(flag));</div><div class="line">        Manacher manacher;</div><div class="line">        manacher.solve(str);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(str);</div><div class="line">        <span class="keyword">int</span> tmp = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= (len&lt;&lt;<span class="number">1</span>); ++i) { <span class="comment">//求sum</span></div><div class="line">            sum[i] += sum[i-<span class="number">1</span>];</div><div class="line">            ++tmp;</div><div class="line"></div><div class="line">            tmp -= flag[i];</div><div class="line">            ++flag[i + Len[i]];</div><div class="line">            <span class="keyword">if</span>(i&<span class="number">1</span>) sum[i] += tmp;</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(flag, <span class="number">0</span>, <span class="keyword">sizeof</span>(flag));</div><div class="line">        tmp = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = (len&lt;&lt;<span class="number">1</span>); i &gt;= <span class="number">1</span>; --i) { <span class="comment">//求ans</span></div><div class="line">            ++tmp;</div><div class="line">            tmp -= flag[i];</div><div class="line">            ++flag[i - Len[i]];</div><div class="line">            <span class="keyword">if</span>(i&<span class="number">1</span>) ans += sum[i-<span class="number">1</span>] * tmp;</div><div class="line">        }</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; endl;</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div></pre></td></tr></table></figure>


      
    </div>
    <footer class="article-footer">
      
      
    </footer>
  </div>
  
    
<nav id="article-nav">
  
    <a href="/2015/04/21/HDU-5208-Where-is-Bob-Bestcoder-Round38-C题/" id="article-nav-newer" class="article-nav-link-wrap">
      <strong class="article-nav-caption">&lt;</strong>
      <div class="article-nav-title">
        
          HDU 5208 Where is Bob &amp;&amp; Bestcoder Round38 C题
        
      </div>
    </a>
  
  
    <a href="/2015/01/09/-转-Manacher算法-回文串处理/" id="article-nav-older" class="article-nav-link-wrap">
      <div class="article-nav-title">[转] Manacher算法-回文串处理</div>
      <strong class="article-nav-caption">&gt;</strong>
    </a>
  
</nav>

  
</article>


<div class="share">
	<!-- JiaThis Button BEGIN -->
	<div class="jiathis_style">
		<span class="jiathis_txt">分享到：</span>
		<a class="jiathis_button_tsina"></a>
		<a class="jiathis_button_cqq"></a>
		<a class="jiathis_button_douban"></a>
		<a class="jiathis_button_weixin"></a>
		<a class="jiathis_button_tumblr"></a>
		<a href="http://www.jiathis.com/share" class="jiathis jiathis_txt jtico jtico_jiathis" target="_blank"></a>
	</div>
	<script type="text/javascript" src="http://v3.jiathis.com/code/jia.js?uid=1405949716054953" charset="utf-8"></script>
	<!-- JiaThis Button END -->
</div>



<div class="duoshuo">
	<!-- 多说评论框 start -->
	<div class="ds-thread" data-thread-key="BestCoder-Round-25" data-title="BestCoder Round #25" data-url="http://teveillan.com/2015/01/09/BestCoder-Round-25/"></div>
	<!-- 多说评论框 end -->
	<!-- 多说公共JS代码 start (一个网页只需插入一次) -->
	<script type="text/javascript">
	var duoshuoQuery = {short_name:"teveillan"};
	(function() {
		var ds = document.createElement('script');
		ds.type = 'text/javascript';ds.async = true;
		ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';
		ds.charset = 'UTF-8';
		(document.getElementsByTagName('head')[0] 
		 || document.getElementsByTagName('body')[0]).appendChild(ds);
	})();
	</script>
	<!-- 多说公共JS代码 end -->
</div>




      <footer id="footer">
  <div class="outer">
    <div id="footer-info">
    	<div class="footer-left">
    		&copy; 2015 Teveillan
    	</div>
      	<div class="footer-right">
      		<a href="http://hexo.io/" target="_blank">Hexo</a>  Theme <a href="https://github.com/litten/hexo-theme-yilia" target="_blank">Yilia</a> by Litten
      	</div>
    </div>
  </div>
</footer>
    </div>
    
  <link rel="stylesheet" href="/fancybox/jquery.fancybox.css" type="text/css">

  <script src="/fancybox/jquery.fancybox.pack.js" type="text/javascript"></script>

  <script src="/js/main.js" type="text/javascript"></script>


  </div>
</body>
</html>