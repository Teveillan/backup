<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="baidu-site-verification" content="FNQZfwk2LO" />
  <meta name="google-site-verification" content="Tiy4g_fxDyWORG0NcTPGtG9BomPV280Nfmd_a4DwBnM" />
  
  <title>网络流 | Teveillan</title>
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
  <meta name="description" content="网络流，也被称为最大流。
模型也非常简单，就是一个管道系统，在有源点，汇点，和一堆有流速限制的管道连接的情况下，问能从源点到汇点传输流量的最大流速是多少。如下图所示。">
<meta property="og:type" content="article">
<meta property="og:title" content="网络流">
<meta property="og:url" content="http://teveillan.com/2015/01/04/网络流/">
<meta property="og:site_name" content="Teveillan">
<meta property="og:description" content="网络流，也被称为最大流。
模型也非常简单，就是一个管道系统，在有源点，汇点，和一堆有流速限制的管道连接的情况下，问能从源点到汇点传输流量的最大流速是多少。如下图所示。">
<meta property="og:image" content="http://7tszmu.com1.z0.glb.clouddn.com/网络流.png">
<meta name="twitter:card" content="summary">
<meta name="twitter:title" content="网络流">
<meta name="twitter:description" content="网络流，也被称为最大流。
模型也非常简单，就是一个管道系统，在有源点，汇点，和一堆有流速限制的管道连接的情况下，问能从源点到汇点传输流量的最大流速是多少。如下图所示。">

  
    <link rel="alternative" href="/atom.xml" title="Teveillan" type="application/atom+xml">
  
  
    <link rel="icon" href="/favicon.png">
  
  <link rel="stylesheet" href="/css/style.css" type="text/css">

  

  <script src="http://libs.baidu.com/jquery/1.9.0/jquery.js"></script>
</head>

<body>
  <div id="container">
    <div class="left-col">
    <div class="overlay"></div>
<div class="intrude-less">
	<header id="header" class="inner">
		<div class="profilepic">
			<img src="https://raw.githubusercontent.com/Teveillan/Teveillan.github.io/master/img/teveillan.jpg">
		</div>

		<hgroup>
		  <h1 class="header-author"><a href="/">Teveillan</a></h1>
		</hgroup>

		
		<p class="header-subtitle">不把CF TC刷红的人生是不完整的。</p>
		

		
			<div class="switch-btn">
				<div class="icon">
					<div class="icon-ctn">
						<div class="icon-wrap icon-house" data-idx="0">
							<div class="birdhouse"></div>
							<div class="birdhouse_holes"></div>
						</div>
						<div class="icon-wrap icon-ribbon hide" data-idx="1">
							<div class="ribbon"></div>
						</div>
						
						<div class="icon-wrap icon-link hide" data-idx="2">
							<div class="loopback_l"></div>
							<div class="loopback_r"></div>
						</div>
						
						
						<div class="icon-wrap icon-me hide" data-idx="3">
							<div class="user"></div>
							<div class="shoulder"></div>
						</div>
						
					</div>
					
				</div>
				<div class="tips-box hide">
					<div class="tips-arrow"></div>
					<ul class="tips-inner">
						<li>菜单</li>
						<li>标签</li>
						
						<li>友情链接</li>
						
						
						<li>关于我</li>
						
					</ul>
				</div>
			</div>
		

		<div class="switch-area">
			<div class="switch-wrap">
				<section class="switch-part switch-part1">
					<nav class="header-menu">
						<ul>
						
							<li><a href="/">主页</a></li>
				        
							<li><a href="/archives">所有文章</a></li>
				        
							<li><a href="/categories/红名">红名</a></li>
				        
							<li><a href="/categories/Tech">Tech</a></li>
				        
						</ul>
					</nav>
					<nav class="header-nav">
						<div class="social">
							
								<a class="github" target="_blank" href="https://github.com/teveillan" title="github">github</a>
					        
								<a class="rss" target="_blank" href="/atom.xml" title="rss">rss</a>
					        
						</div>
					</nav>
				</section>
				
				
				<section class="switch-part switch-part2">
					<div class="widget tagcloud">
						<a href="/tags/BestCoder/" style="font-size: 20.00px;">BestCoder</a><a href="/tags/HDU/" style="font-size: 15.00px;">HDU</a><a href="/tags/MacOS/" style="font-size: 15.00px;">MacOS</a><a href="/tags/VIM/" style="font-size: 15.00px;">VIM</a><a href="/tags/随笔/" style="font-size: 10.00px;">随笔</a>
					</div>
				</section>
				
				
				
				<section class="switch-part switch-part3">
					
			          <a target="_blank" class="main-nav-link switch-friends-link" href="http://darkrhythm.net/">Pira-黄大神</a>
			        
				</section>
				

				
				
				<section class="switch-part switch-part4">
				
					我是谁，我从哪里来，我到哪里去？我就是我，是颜色不一样的吃货…
				</section>
				
			</div>
		</div>
	</header>				
</div>
    </div>
    <div class="mid-col">
      <nav id="mobile-nav">
  	<div class="overlay"></div>
	<div class="intrude-less">
		<header id="header" class="inner">
			<div class="profilepic">
				<img src="https://raw.githubusercontent.com/Teveillan/Teveillan.github.io/master/img/teveillan.jpg">
			</div>

			<hgroup>
			  <h1 class="header-author"><a href="/">Teveillan</a></h1>
			</hgroup>
			
			<p class="header-subtitle">不把CF TC刷红的人生是不完整的。</p>
			
			<nav class="header-menu">
				<ul>
				
					<li><a href="/">主页</a></li>
		        
					<li><a href="/archives">所有文章</a></li>
		        
					<li><a href="/categories/红名">红名</a></li>
		        
					<li><a href="/categories/Tech">Tech</a></li>
		        
		        <div class="clearfix"></div>
				</ul>
			</nav>
			<nav class="header-nav">
				<div class="social">
					
						<a class="github" target="_blank" href="https://github.com/teveillan" title="github">github</a>
			        
						<a class="rss" target="_blank" href="/atom.xml" title="rss">rss</a>
			        
				</div>
			</nav>
		</header>				
	</div>
</nav>
      <article id="post-网络流" class="article article-type-post" itemscope itemprop="blogPost">
  
    <div class="article-meta">
      <a href="/2015/01/04/网络流/" class="article-date">
  	<time datetime="2015-01-04T05:01:59.000Z" itemprop="datePublished">1月 4 2015</time>
</a>
      
  <div class="article-category">
    <a class="article-category-link" href="/categories/Algorithm/">Algorithm</a>
  </div>

      
    </div>
  
  <div class="article-inner">
    
      <input type="hidden" class="isFancy" />
    
    
      <header class="article-header">
        
  
    <h1 class="article-title" itemprop="name">
      网络流
    </h1>
  

      </header>
    
    <div class="article-entry" itemprop="articleBody">
      
        <p>网络流，也被称为最大流。</p>
<p>模型也非常简单，就是一个管道系统，在有源点，汇点，和一堆有流速限制的管道连接的情况下，问能从源点到汇点传输流量的最大流速是多少。如下图所示。</p>
<p><img src="http://7tszmu.com1.z0.glb.clouddn.com/网络流.png" alt="Alt text"><br><a id="more"></a><br>假定s为源点，t为汇点，中间各箭头为管道，各管道的流速限制均为1。<br>求最大流的话，很明显，最大流为2。有两条流量：</p>
<ul>
<li>s -&gt; 1 -&gt; 3 -&gt; t，流量为1</li>
<li>s -&gt; 2 -&gt; 4 -&gt; t，流量为1</li>
</ul>
<p>现在是因为图比较简单，我们能一眼看出来。我们自然喜欢程序跑出来的结果是这样。</p>
<p>在程序过程中，自然就是找到一条流量处理一条流量。<br>如果先找到 s -&gt; 1 -&gt; 3 -&gt; t，然后找到 s -&gt; 2 -&gt; 4 -&gt; t，自然皆大欢喜。<br>但是如果程序的第一条直接找到 s -&gt; 1 -&gt; 4 -&gt; t 了呢？这样的最终结果就只有一条流量。</p>
<p>为了解决这个问题，有人提出了一种叫回退边（后悔边）的概念。<strong> 这个也是本算法的精髓所在。 </strong></p>
<blockquote>
<p>后悔边：如果我们根据原图建了一条从u到v，流量为f的边 (u,v)=f。 同时，我们也需要建一条从v到u，流量为0的边 (v,u)=0，这条边我们就称为后悔边。(u,v) 和 (v,u)互为反向边。 </p>
</blockquote>
<p>同时，在程序进行过程中，如果我们如果从残余网络中找到一条从s到v的流量为f，在更新的过程中，我们首先要把最终答案加上c，然后我们不仅要把在该流量上的各边的剩余流量减去f，同时还要把流量上各条边的反向边的流量加上f。</p>
<p>这样做有什么好处呢?</p>
<p>还是以上图为例，如果我们先找到了 s -&gt; 1 -&gt; 3 -&gt; t，流量为1。我们首先在最终答案中加1，然后在更新的过程中不仅要把 (s,1)、(1,4)、(4,t) 这几条边的剩余流量减1， 还要把 (1,s)、(4,1)、(t,4) 的剩余流量加1。 </p>
<p>此时的残余网络为：</p>
<ul>
<li>(s,1) = 0, (1,s) = 1</li>
<li>(s,2) = 1, (2,s) = 0</li>
<li>(1,3) = 1, (3,1) = 0</li>
<li>(1,4) = 0, (4,1) = 1</li>
<li>(2,4) = 1, (4,2) = 0</li>
<li>(3,t ) = 1, (t,3 ) = 0</li>
<li>(4,t ) = 0, (t,4 ) = 1</li>
</ul>
<p>然后我们从残余网络中找流量，<strong>发现此时能找到一条 s -&gt; 2 -&gt; 4 -&gt; 1 -&gt; 3 -&gt; t 的流量了！</strong>然后我们还按之前的方式更新。再找的时候找不到新的流量了，算法结束。此时的结果是和我们之前用肉眼观察的结果是一样的。</p>
<p>这就是后悔边的神奇之处。</p>
<p><strong>后悔边，顾名思义，就是给了一条边后悔的权利。在算法过程中，原图的边和后悔边是没有区别的，所以找流量的时候也没有任何区别。</strong></p>
<p>这条边存在的意义是，还拿刚刚那条 s -&gt; 2 -&gt; 4 -&gt; 1 -&gt; 3这条流量来说。里面存在一条后悔边(4,1)，它的意义是：</p>
<ul>
<li><strong> 之前已经更新过的流量中，有一条从4到t的流量<code>4 -&gt; t</code>，这条流量我可以用到。</strong></li>
<li><strong> 目前的残余网络中，还存在一条从1到s得流量<code>1 -&gt; 3 -&gt; t</code>，这条流量可以替换你之前更新过的流量 <code>1 -&gt; 4 -&gt; t</code>。</strong></li>
<li><strong> 为什么不能你用<code>1 -&gt; 3 -&gt; t</code>，我用<code>4 -&gt; t</code>呢。这样的得到的总流量多一些，我们来交换吧。</strong></li>
<li><strong> 你把你的流量退回去，用我给你的。我用你之前的。 至于中间的(4,1)，退回去我也用不上，大不了都不用了吧。</strong></li>
</ul>
<p>这样下来，最佳方案就出现了。</p>
<p>可以发现，在有后悔边存在的情况下，先找哪条流量后找哪条流量就已经不重要了。反正都是可以做修改的。这样的话，只要考虑如何高效地找流量就好了。这个当然不能随便找，有环的话肯定要进入死循环。</p>
<p>在<strong>Dinic</strong>算法中，我们采用了分层图的形式。分层用BFS来实现。</p>
<ul>
<li>首先，将源点的level设为0，并将源点加入队列。</li>
<li>从队列中取出一个点u，遍历以它为起点还有流量的边，找到点v。如果点v还没被加入队列过，将v的level设为level[u]+1，并将v加入队列。</li>
<li>回到步骤2，直到队列为空。</li>
</ul>
<p>然后我们规定，level为<code>a</code>的点只能向level为<code>a+1</code>的点找流量,这样就能很有效地避免环的出现。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">100</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e7</span> + <span class="number">100</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</div><div class="line"><span class="keyword">struct</span> Edge{</div><div class="line">    <span class="keyword">int</span> to,next;</div><div class="line">    <span class="keyword">int</span> c;</div><div class="line">}edge[M];</div><div class="line"><span class="keyword">int</span> head[N], level[N], que[N], ip;</div><div class="line"><span class="keyword">void</span> init() {</div><div class="line">    <span class="built_in">memset</span>(head, -<span class="number">1</span>, <span class="keyword">sizeof</span>(head));</div><div class="line">    ip = <span class="number">0</span>;</div><div class="line">}</div><div class="line"><span class="keyword">bool</span> makelevel(<span class="keyword">int</span> s,<span class="keyword">int</span> t) { <span class="comment">//将图分层</span></div><div class="line">    <span class="built_in">memset</span>(level,<span class="number">0</span>,<span class="keyword">sizeof</span>(level));</div><div class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;</div><div class="line">    que[num++]=s;</div><div class="line">    level[s]=<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++) {</div><div class="line">        <span class="keyword">int</span> top=que[i];</div><div class="line">        <span class="keyword">if</span>(top==t)  <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//找到t了，后面再找level肯定比t大</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=head[top];k!=-<span class="number">1</span>;k=edge[k].next) {</div><div class="line">            <span class="keyword">if</span>(!level[edge[k].to]&&edge[k].c&gt;<span class="number">0</span>) {</div><div class="line">                que[num++]=edge[k].to;</div><div class="line">                level[edge[k].to]=level[top]+<span class="number">1</span>;</div><div class="line">            }</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">}</div><div class="line"><span class="keyword">int</span> dfs(<span class="keyword">int</span> now,<span class="keyword">int</span> maxf,<span class="keyword">int</span> t) { <span class="comment">//从残余网络中找流量</span></div><div class="line">    <span class="keyword">if</span>(now==t)  <span class="keyword">return</span> maxf;</div><div class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=head[now];k!=-<span class="number">1</span>;k=edge[k].next) {</div><div class="line">        <span class="keyword">if</span>(edge[k].c&gt;<span class="number">0</span>&&level[edge[k].to]==(level[now]+<span class="number">1</span>)) {</div><div class="line">            <span class="keyword">int</span> c=dfs(edge[k].to,min(maxf-ret,edge[k].c),t);</div><div class="line">            edge[k].c-=c;</div><div class="line">            edge[k^<span class="number">1</span>].c+=c;</div><div class="line">            ret+=c;</div><div class="line">            <span class="keyword">if</span>(ret==maxf)   <span class="keyword">return</span>  ret;</div><div class="line">        }</div><div class="line">    }</div><div class="line">    --level[now]; <span class="comment">//一个优化，说明往level[now]+1找流量已经找不到了。自己就降一个level。</span></div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">}</div><div class="line"><span class="keyword">int</span> dinic(<span class="keyword">int</span> s,<span class="keyword">int</span> t) {</div><div class="line">    <span class="keyword">int</span>  ans=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(makelevel(s,t))   ans+=dfs(s,INF,t);</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">}</div><div class="line"><span class="keyword">void</span> add(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> c,<span class="keyword">int</span> f) {<span class="comment">//有向边f为0 ,否则为 c</span></div><div class="line">    edge[ip].to=v;edge[ip].c=c;edge[ip].next=head[u];head[u]=ip++;</div><div class="line">    edge[ip].to=u;edge[ip].c=f;edge[ip].next=head[v];head[v]=ip++;</div><div class="line">}</div></pre></td></tr></table></figure>


      
    </div>
    <footer class="article-footer">
      
      
    </footer>
  </div>
  
    
<nav id="article-nav">
  
    <a href="/2015/01/04/最短路-SPFA/" id="article-nav-newer" class="article-nav-link-wrap">
      <strong class="article-nav-caption">&lt;</strong>
      <div class="article-nav-title">
        
          最短路 SPFA
        
      </div>
    </a>
  
  
    <a href="/2015/01/02/New-Year/" id="article-nav-older" class="article-nav-link-wrap">
      <div class="article-nav-title">New Year</div>
      <strong class="article-nav-caption">&gt;</strong>
    </a>
  
</nav>

  
</article>


<div class="share">
	<!-- JiaThis Button BEGIN -->
	<div class="jiathis_style">
		<span class="jiathis_txt">分享到：</span>
		<a class="jiathis_button_tsina"></a>
		<a class="jiathis_button_cqq"></a>
		<a class="jiathis_button_douban"></a>
		<a class="jiathis_button_weixin"></a>
		<a class="jiathis_button_tumblr"></a>
		<a href="http://www.jiathis.com/share" class="jiathis jiathis_txt jtico jtico_jiathis" target="_blank"></a>
	</div>
	<script type="text/javascript" src="http://v3.jiathis.com/code/jia.js?uid=1405949716054953" charset="utf-8"></script>
	<!-- JiaThis Button END -->
</div>



<div class="duoshuo">
	<!-- 多说评论框 start -->
	<div class="ds-thread" data-thread-key="网络流" data-title="网络流" data-url="http://teveillan.com/2015/01/04/网络流/"></div>
	<!-- 多说评论框 end -->
	<!-- 多说公共JS代码 start (一个网页只需插入一次) -->
	<script type="text/javascript">
	var duoshuoQuery = {short_name:"teveillan"};
	(function() {
		var ds = document.createElement('script');
		ds.type = 'text/javascript';ds.async = true;
		ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';
		ds.charset = 'UTF-8';
		(document.getElementsByTagName('head')[0] 
		 || document.getElementsByTagName('body')[0]).appendChild(ds);
	})();
	</script>
	<!-- 多说公共JS代码 end -->
</div>




      <footer id="footer">
  <div class="outer">
    <div id="footer-info">
    	<div class="footer-left">
    		&copy; 2015 Teveillan
    	</div>
      	<div class="footer-right">
      		<a href="http://hexo.io/" target="_blank">Hexo</a>  Theme <a href="https://github.com/litten/hexo-theme-yilia" target="_blank">Yilia</a> by Litten
      	</div>
    </div>
  </div>
</footer>
    </div>
    
  <link rel="stylesheet" href="/fancybox/jquery.fancybox.css" type="text/css">

  <script src="/fancybox/jquery.fancybox.pack.js" type="text/javascript"></script>

  <script src="/js/main.js" type="text/javascript"></script>


  </div>
</body>
</html>